{
    "sourceFile": "app/(app)/Checkout.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1754403221458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754844262978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -270,9 +270,9 @@\n         }))\r\n         .filter((_, idx) => subscriptionProductIds.includes(items[idx].id));\r\n \r\n       const resp = await fetch(\r\n-        \"https://mon-backend-node.vercel.app/api/create-payment-intent\",\r\n+        \"https://mon-backend-node-henna.vercel.app/api/create-payment-intent\",\r\n         {\r\n           method: \"POST\",\r\n           headers: { \"Content-Type\": \"application/json\" },\r\n           body: JSON.stringify({\r\n"
                }
            ],
            "date": 1754403221458,
            "name": "Commit-0",
            "content": "import { supabase } from \"@/integrations/supabase/client\";\r\nimport { useCart } from \"@/src/components/cart/CartContext\";\r\nimport Footer from \"@/src/components/Footer\";\r\nimport CountrySelect from \"@/src/components/services/CountrySelect\";\r\nimport { CardField } from \"@stripe/stripe-react-native\";\r\nimport { useRouter } from \"expo-router\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  Platform,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\n\r\n// ‚ö†Ô∏è Stripe hooks initialis√©s plus tard\r\nlet useConfirmPayment: any;\r\nlet useStripe: any;\r\n\r\nif (Platform.OS !== \"web\") {\r\n  // @ts-ignore\r\n  const stripe = require(\"@stripe/stripe-react-native\");\r\n  useConfirmPayment = stripe.useConfirmPayment;\r\n  useStripe = stripe.useStripe;\r\n}\r\n// Ajout du type CartItem avec la propri√©t√© optionnelle 'period'\r\ntype CartItem = {\r\n  id: string;\r\n  title: string;\r\n  price: number;\r\n  quantity: number;\r\n  period?: string; // Ajout de la propri√©t√© optionnelle period\r\n};\r\ntype FormValues = {\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  companyName: string;\r\n  businessActivity: string;\r\n  siretNumber: string;\r\n  address: string;\r\n  addressDetails?: string;\r\n  city: string;\r\n  postalCode: string;\r\n  phone?: string;\r\n  country: string;\r\n};\r\n\r\n// Form schema (√† adapter avec react-hook-form ou manuellement, car zod + react-hook-form Web ne marchent pas direct en RN)\r\nconst formSchema = {\r\n  email: \"\",\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  companyName: \"\",\r\n  businessActivity: \"\",\r\n  siretNumber: \"\",\r\n  address: \"\",\r\n  addressDetails: \"\",\r\n  city: \"\",\r\n  postalCode: \"\",\r\n  phone: \"\",\r\n  country: \"France\",\r\n};\r\n\r\nconst Checkout = () => {\r\n  const stripe = useStripe();\r\n  const router = useRouter();\r\n  const { items, clearCart, subtotal, tax, total } = useCart();\r\n\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [userId, setUserId] = useState<string | null>(null);\r\n\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    companyName: \"\",\r\n    businessActivity: \"\",\r\n    siretNumber: \"\",\r\n    address: \"\",\r\n    addressDetails: \"\",\r\n    city: \"\",\r\n    postalCode: \"\",\r\n    phone: \"\",\r\n    country: \"France\",\r\n  });\r\n\r\n  const subscriptionProductIds = [\r\n    \"domiciliation-mensuel-societe-Abonnement-Mensuel\",\r\n    \"domiciliation-mensuel-societe-Abonnement-6-mois\",\r\n    \"domiciliation-mensuel-auto-entrepreneur-Abonnement-Mensuel\",\r\n    \"domiciliation-mensuel-auto-entreprise-Abonnement-6-mois\",\r\n    \"domiciliation-mensuel-association\",\r\n    \"service-reexpedition\",\r\n    \"service-scan\",\r\n    \"service-colis\",\r\n  ];\r\n\r\n  const getPriceIdFromProductId = (productId: string): string | undefined => {\r\n    const map: Record<string, string> = {\r\n      \"domiciliation-mensuel-societe-Abonnement-Mensuel\":\r\n        \"price_1RZSgAL4PnylHeS6yEgwLzzW\",\r\n      \"domiciliation-mensuel-societe-Abonnement-6-mois\":\r\n        \"price_1RZSNFL4PnylHeS6bmP6YUy2\",\r\n      \"domiciliation-mensuel-auto-entrepreneur-Abonnement-Mensuel\":\r\n        \"price_1RZSLML4PnylHeS6UMlLbJXY\",\r\n      \"domiciliation-mensuel-auto-entreprise-Abonnement-6-mois\":\r\n        \"price_1RZSM3L4PnylHeS6sa3QIcxv\",\r\n      \"domiciliation-mensuel-association\": \"price_1RZSO4L4PnylHeS6oF0FB0DM\",\r\n      \"service-reexpedition\": \"price_1RZSVDL4PnylHeS6rWzjPwPs\",\r\n      \"service-scan\": \"price_1RZSUmL4PnylHeS6GSGgxXlI\",\r\n      \"service-colis\": \"price_1RZSUML4PnylHeS6TrrTxJK7\",\r\n      \"coworking-space\": \"price_1RZSJgL4PnylHeS6cRgTMAHe\",\r\n      \"location-bureau\": \"price_1RZSHfL4PnylHeS6yKhokYyB\",\r\n      \"formation-room\": \"price_1RZSIrL4PnylHeS6JYNanGEv\",\r\n      \"domiciliation-1an-entreprise\": \"price_1RZSaTL4PnylHeS6HVPVvGaV\",\r\n      \"domiciliation-3mois-entreprise\": \"price_1RZSZZL4PnylHeS6dnGwO0yz\",\r\n      \"domiciliation-3mois-micro\": \"price_1RZSY6L4PnylHeS67MY03k7z\",\r\n      \"domiciliation-6mois-entreprise\": \"price_1RZSXBL4PnylHeS6M1xdmC4p\",\r\n      \"domiciliation-6mois-micro\": \"price_1RZSWiL4PnylHeS6kaYjekvT\",\r\n      \"pack-domine\": \"price_1RZSWAL4PnylHeS6SxTYCs4P\",\r\n      \"vtc-creation\": \"price_1RZSTiL4PnylHeS6ZhbTFDm5\",\r\n      \"bank-account\": \"price_1RZST9L4PnylHeS6FnkYpDQ5\",\r\n      \"company-creation\": \"price_1RZSSUL4PnylHeS60reF3XU6\",\r\n      \"micro-company\": \"price_1RZSS0L4PnylHeS6qSTPszwd\",\r\n      \"company-transfer\": \"price_1RZSRTL4PnylHeS6galw0X9S\",\r\n      \"share-transfer\": \"price_1RZSQsL4PnylHeS6vv6GmsNL\",\r\n      \"commercial-ad\": \"price_1RZSQJL4PnylHeS6cYFetnsv\",\r\n      \"quote-creation\": \"price_1RZSPoL4PnylHeS6lWuRYHsR\",\r\n      \"annual-accounts\": \"price_1RZSPCL4PnylHeS6aFQtr202\",\r\n      \"company-modification\": \"price_1RZSOcL4PnylHeS6yjnAkWBN\",\r\n    };\r\n    return map[productId];\r\n  };\r\n\r\n  // produit test\r\n  // const getPriceIdFromProductId = (productId: string): string | undefined => {\r\n  //   const map: Record<string, string> = {\r\n  //     \"domiciliation-mensuel-societe-normal\": \"price_1RSKGYQ5vrwB5bWyC5m7YKIm\", //fait\r\n  //     \"domiciliation-mensuel-societe-reduit\": \"price_1RSMFmQ5vrwB5bWyBk9nXFcb\", //fait\r\n  //     \"domiciliation-mensuel-auto-entrepreneur-normal\":\r\n  //       \"price_1RSMGfQ5vrwB5bWyWe4cF5pp\", //fait\r\n  //     \"domiciliation-mensuel-auto-entreprise-reduit\":\r\n  //       \"price_1RSMGIQ5vrwB5bWy4e4ogBUY\", //fait\r\n  //     \"domiciliation-mensuel-association\": \"price_1RSLsMQ5vrwB5bWydudKGQ7b\", //fait\r\n  //     \"service-reexpedition\": \"price_1RSLlyQ5vrwB5bWyTf2ay5tf\", //fait\r\n  //     \"service-scan\": \"price_1RSLmKQ5vrwB5bWyRouPTXPR\", //fait\r\n  //     \"service-colis\": \"price_1RSLmcQ5vrwB5bWyeWckoEPg\", //fait\r\n  //     \"coworking-space\": \"price_1RSMKlQ5vrwB5bWyTH1NrRlA\", //fait\r\n  //     \"location-bureau\": \"price_1RSMLjQ5vrwB5bWyUerVSlHF\", //fait\r\n  //     \"formation-room\": \"price_1RSMLIQ5vrwB5bWysp4JTZZQ\", //fait\r\n  //     \"domiciliation-1an-entreprise\": \"price_1RSLi2Q5vrwB5bWyeizWaoWy\", //fait\r\n  //     \"domiciliation-3mois-entreprise\": \"price_1RSLinQ5vrwB5bWyYpgyzSyL\", //fait\r\n  //     \"domiciliation-3mois-micro\": \"price_1RSLjPQ5vrwB5bWyoNy1OKMb\", //fait\r\n  //     \"domiciliation-6mois-entreprise\": \"price_1RSLkAQ5vrwB5bWyk4rjnkyb\", //fait\r\n  //     \"domiciliation-6mois-micro\": \"price_1RSLkfQ5vrwB5bWymj0lkM4Z\", //fait\r\n  //     \"pack-domine\": \"price_1RSLlCQ5vrwB5bWyqOByLGS5\", //fait\r\n  //     \"vtc-creation\": \"price_1RSLnfQ5vrwB5bWy7D4g1s1M\", //fait\r\n  //     \"bank-account\": \"price_1RSLo4Q5vrwB5bWyqaPfyWN0\", //fait\r\n  //     \"company-creation\": \"price_1RSLoRQ5vrwB5bWyLbVvOhhe\", //fait\r\n  //     \"micro-company\": \"price_1RSLozQ5vrwB5bWyhXZaREUE\", //fait\r\n  //     \"company-transfer\": \"price_1RSLpLQ5vrwB5bWyFdN0Wljp\", //fait\r\n  //     \"share-transfer\": \"price_1RSLpjQ5vrwB5bWynvYt7DzQ\", //fait\r\n  //     \"commercial-ad\": \"price_1RSLqCQ5vrwB5bWyabANz81P\", //fait\r\n  //     \"quote-creation\": \"price_1RSLqdQ5vrwB5bWyuMOQBt2h\", //fait\r\n  //     \"annual-accounts\": \"price_1RSLqzQ5vrwB5bWyp2PPrbP2\", //fait\r\n  //     \"company-modification\": \"price_1RSLrMQ5vrwB5bWyqYeVbL0c\", //fait\r\n  //   };\r\n  //   return map[productId];\r\n  // };\r\n  useEffect(() => {\r\n    const getSession = async () => {\r\n      const { data } = await supabase.auth.getSession();\r\n      // console.log(\"üì° Session Supabase r√©cup√©r√©e:\", data);\r\n      setUserId(data?.session?.user.id || null);\r\n    };\r\n    getSession();\r\n  }, []);\r\n\r\n  // const { confirmPayment } = useConfirmPayment();\r\n  const { confirmPayment } =\r\n    Platform.OS !== \"web\" ? useConfirmPayment() : { confirmPayment: null };\r\n\r\n  const validateFormData = (data: FormValues): string | null => {\r\n    if (!data.email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(data.email)) {\r\n      return \"Adresse e-mail invalide.\";\r\n    }\r\n    if (!data.firstName.trim()) return \"Le pr√©nom est obligatoire.\";\r\n    if (!data.lastName.trim()) return \"Le nom est obligatoire.\";\r\n    if (!data.address.trim()) return \"L'adresse est obligatoire.\";\r\n    if (!data.city.trim()) return \"La ville est obligatoire.\";\r\n    if (!/^\\d{5}$/.test(data.postalCode))\r\n      return \"Code postal invalide (5 chiffres).\";\r\n    if (data.phone && !/^\\d{10,}$/.test(data.phone.replace(/\\D/g, \"\"))) {\r\n      return \"Num√©ro de t√©l√©phone invalide.\";\r\n    }\r\n    if (data.siretNumber && !/^\\d{14}$/.test(data.siretNumber)) {\r\n      return \"Le num√©ro SIRET doit contenir 14 chiffres.\";\r\n    }\r\n    return null; // tout est ok\r\n  };\r\n\r\n  const handleSubmit = async (data: FormValues) => {\r\n    setIsProcessing(true);\r\n\r\n    const validationError = validateFormData(data);\r\n    if (validationError) {\r\n      Alert.alert(\"Erreur de validation\", validationError);\r\n      setIsProcessing(false);\r\n      return;\r\n    }\r\n\r\n    // console.log(\"‚ñ∂ D√©but handleSubmit\");\r\n    // console.log(\"üëâ userId:\", userId);\r\n    // console.log(\"üëâ items:\", items);\r\n    // console.log(\"üëâ stripe present:\", !!stripe);\r\n    // console.log(\"üëâ confirmPayment present:\", !!confirmPayment);\r\n\r\n    if (!userId) {\r\n      Alert.alert(\"Erreur\", \"Utilisateur non connect√©.\");\r\n      setIsProcessing(false);\r\n      return;\r\n    }\r\n    if (!stripe || !confirmPayment) {\r\n      Alert.alert(\"Erreur\", \"Stripe non initialis√©.\");\r\n      setIsProcessing(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { error: pmError, paymentMethod } =\r\n        await stripe.createPaymentMethod({\r\n          paymentMethodType: \"Card\",\r\n          paymentMethodData: {\r\n            billingDetails: {\r\n              email: data.email,\r\n              name: `${data.firstName} ${data.lastName}`,\r\n            },\r\n          },\r\n        });\r\n\r\n      if (pmError || !paymentMethod) {\r\n        console.error(\"‚ùå Erreur cr√©ation PaymentMethod:\", pmError);\r\n        Alert.alert(\r\n          \"Erreur\",\r\n          pmError?.message || \"Erreur cr√©ation PaymentMethod\"\r\n        );\r\n        setIsProcessing(false);\r\n        return;\r\n      }\r\n\r\n      // console.log(\"‚úÖ PaymentMethod cr√©√©:\", paymentMethod.id);\r\n\r\n      // 2Ô∏è‚É£ Pr√©parer les items pour le backend\r\n      const oneTimeItems = items\r\n        .map((item, index) => ({\r\n          amount: Math.round(item.price * 100),\r\n          quantity: item.quantity,\r\n          index,\r\n        }))\r\n        .filter((i) => !subscriptionProductIds.includes(items[i.index].id));\r\n\r\n      const subscriptionItems = items\r\n        .map((item, index) => ({\r\n          price: getPriceIdFromProductId(item.id)!,\r\n          quantity: item.quantity,\r\n        }))\r\n        .filter((_, idx) => subscriptionProductIds.includes(items[idx].id));\r\n\r\n      const resp = await fetch(\r\n        \"https://mon-backend-node.vercel.app/api/create-payment-intent\",\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            email: data.email,\r\n            paymentMethodId: paymentMethod.id,\r\n            userId,\r\n            oneTimeItems,\r\n            subscriptionItems,\r\n            items,\r\n            total,\r\n            clientInfo: {\r\n              firstName: data.firstName,\r\n              lastName: data.lastName,\r\n              address: data.address,\r\n              siretNumber: data.siretNumber,\r\n            },\r\n          }),\r\n        }\r\n      );\r\n\r\n      if (!resp.ok) {\r\n        const text = await resp.text();\r\n        throw new Error(\"Backend error: \" + text);\r\n      }\r\n\r\n      const { oneTimePaymentIntents, subscriptionPaymentIntent } =\r\n        await resp.json();\r\n      // console.log(\"‚úÖ R√©ponse backend re√ßue\");\r\n\r\n      for (const { clientSecret, index } of oneTimePaymentIntents) {\r\n        const { error: confirmErr } = await confirmPayment(clientSecret, {\r\n          paymentMethodType: \"Card\",\r\n        });\r\n\r\n        if (confirmErr) {\r\n          throw new Error(\r\n            `Erreur paiement item #${index}: ${confirmErr.message || \"\"}`\r\n          );\r\n        }\r\n      }\r\n\r\n      if (subscriptionPaymentIntent?.clientSecret) {\r\n        const { error: subErr } = await confirmPayment(\r\n          subscriptionPaymentIntent.clientSecret,\r\n          {\r\n            paymentMethodType: \"Card\",\r\n          }\r\n        );\r\n\r\n        if (subErr) {\r\n          throw new Error(`Erreur abonnement: ${subErr.message || \"\"}`);\r\n        }\r\n      }\r\n\r\n      await Promise.all(\r\n        items.map(async (item, idx) => {\r\n          const table = item.id.includes(\"domiciliation\")\r\n            ? \"user_domiciliations\"\r\n            : \"user_services\";\r\n\r\n          let duration: string | null = null;\r\n          let plan_type: string | null = null;\r\n          let periodKey: \"morning\" | \"afternoon\" | \"journ√©e\" = \"journ√©e\";\r\n          let start: string = \"09:00\";\r\n          let end: string = \"16:00\";\r\n\r\n          if (item.id.includes(\"domiciliation\")) {\r\n            duration = item.title.includes(\"1 an\")\r\n              ? \"12mois\"\r\n              : item.title.includes(\"6 mois\")\r\n              ? \"6mois\"\r\n              : item.title.includes(\"3 mois\")\r\n              ? \"3mois\"\r\n              : null;\r\n\r\n            plan_type = item.title.includes(\"micro\")\r\n              ? \"micro\"\r\n              : item.title.includes(\"entreprise\")\r\n              ? \"entreprise\"\r\n              : item.title.includes(\"association\")\r\n              ? \"association\"\r\n              : null;\r\n          }\r\n\r\n          if (\r\n            /(location-bureau|formation-room|coworking-space)/.test(item.id)\r\n          ) {\r\n            const date = item.id.match(/\\d{4}-\\d{2}-\\d{2}/)?.[0] || \"\";\r\n            const times = item.title.match(/\\d{2}:\\d{2}/g) || [];\r\n\r\n            if (times.length === 1 && times[0]) {\r\n              start = times[0];\r\n              end = `${String(\r\n                parseInt(times[0].split(\":\")[0], 10) + 1\r\n              ).padStart(2, \"0\")}:00`;\r\n              periodKey = \"morning\";\r\n            } else if (\r\n              times.length > 1 &&\r\n              times[0] &&\r\n              times[times.length - 1]\r\n            ) {\r\n              start = times[0];\r\n              end = `${String(\r\n                parseInt(times[times.length - 1].split(\":\")[0], 10) + 1\r\n              ).padStart(2, \"0\")}:00`;\r\n              periodKey = times.length === 2 ? \"morning\" : \"journ√©e\";\r\n            } else if (item.title.includes(\"morning\")) {\r\n              start = \"09:00\";\r\n              end = \"12:00\";\r\n              periodKey = \"morning\";\r\n            } else if (item.title.includes(\"afternoon\")) {\r\n              start = \"13:00\";\r\n              end = \"16:00\";\r\n              periodKey = \"afternoon\";\r\n            }\r\n\r\n            const reservationType = `${item.id\r\n              .split(\"-\")\r\n              .slice(0, 2)\r\n              .join(\"-\")} ${\r\n              periodKey === \"morning\"\r\n                ? \"matin\"\r\n                : periodKey === \"afternoon\"\r\n                ? \"apr√®s-midi\"\r\n                : \"journ√©e\"\r\n            }`;\r\n\r\n            const pi = oneTimePaymentIntents.find((p: any) => p.index === idx);\r\n\r\n            const insertData = {\r\n              user_id: userId,\r\n              reservation_type: reservationType,\r\n              reservation_date: date,\r\n              price: item.price,\r\n              period: `[${date}T${start}:00+00:00,${date}T${end}:00+00:00)`,\r\n              payment_intent_id: pi?.id || null,\r\n            };\r\n            // console.log(\"üì¶ Insertion r√©servation:\", insertData);\r\n            const { error } = await supabase\r\n              .from(\"reservations\")\r\n              .insert(insertData);\r\n            if (error) console.error(\"‚ùå Erreur r√©servation:\", error);\r\n          } else if (item.id.includes(\"domiciliation\")) {\r\n            const insertData = {\r\n              user_id: userId,\r\n              address: data.address,\r\n              duration,\r\n              plan_type,\r\n              status: \"active\",\r\n            };\r\n            // console.log(\"üì¶ Insertion domiciliation:\", insertData);\r\n            const { error } = await supabase\r\n              .from(\"user_domiciliations\")\r\n              .insert(insertData);\r\n            if (error) console.error(\"‚ùå Erreur domiciliation:\", error);\r\n          } else {\r\n            const insertData = {\r\n              user_id: userId,\r\n              name: item.title,\r\n              price: item.price,\r\n              status: \"active\",\r\n              category: \"commande\",\r\n            };\r\n            // console.log(\"üì¶ Insertion service:\", insertData);\r\n            const { error } = await supabase\r\n              .from(\"user_services\")\r\n              .insert(insertData);\r\n            if (error) console.error(\"‚ùå Erreur service:\", error);\r\n          }\r\n        })\r\n      );\r\n\r\n      // clearCart();\r\n      // Alert.alert(\"‚úÖ Paiement r√©ussi\", \"Merci pour votre commande !\");\r\n      // router.push(\"/(app)/Confirmation\");\r\n      const lastIntentId =\r\n        oneTimePaymentIntents.length > 0\r\n          ? oneTimePaymentIntents[oneTimePaymentIntents.length - 1].id\r\n          : subscriptionPaymentIntent?.id || Date.now().toString();\r\n\r\n      clearCart();\r\n      Alert.alert(\"‚úÖ Paiement r√©ussi\", \"Merci pour votre commande !\");\r\n      router.push({\r\n        pathname: \"/(app)/Confirmation\",\r\n        params: {\r\n          orderJson: JSON.stringify({\r\n            orderId: lastIntentId, // üëà ID r√©el Stripe\r\n            items,\r\n            subtotal,\r\n            tax,\r\n            total,\r\n            clientInfo: data,\r\n          }),\r\n        },\r\n      });\r\n    } catch (err: any) {\r\n      console.error(\"‚ùå Erreur handleSubmit:\", err);\r\n      Alert.alert(\"Erreur\", err.message || \"Une erreur est survenue\");\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    formData,\r\n    setFormData,\r\n    handleSubmit,\r\n    isProcessing,\r\n    items,\r\n    subtotal,\r\n    tax,\r\n    total,\r\n  };\r\n};\r\nexport default function CheckoutScreen() {\r\n  const {\r\n    formData,\r\n    setFormData,\r\n    handleSubmit,\r\n    isProcessing,\r\n    items,\r\n    subtotal,\r\n    tax,\r\n    total,\r\n  } = Checkout();\r\n\r\n  const handleChange = (name: string, value: string) => {\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1, backgroundColor: \"#f9fafb\" }}>\r\n      <ScrollView\r\n        style={styles.container}\r\n        contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n      >\r\n        <View style={{ padding: 16 }}>\r\n          <Text style={styles.title}>Finaliser votre commande</Text>\r\n\r\n          {/* Informations de facturation */}\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>Informations de facturation</Text>\r\n\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder=\"E-mail\"\r\n              value={formData.email}\r\n              onChangeText={(val) => handleChange(\"email\", val)}\r\n            />\r\n            <CountrySelect\r\n              value={formData.country}\r\n              onValueChange={(val) =>\r\n                setFormData((prev) => ({ ...prev, country: val }))\r\n              }\r\n            />\r\n            <View style={styles.row}>\r\n              <TextInput\r\n                style={[styles.input, styles.inputHalf]}\r\n                placeholder=\"Pr√©nom\"\r\n                value={formData.firstName}\r\n                onChangeText={(val) => handleChange(\"firstName\", val)}\r\n              />\r\n              <TextInput\r\n                style={[styles.input, styles.inputHalf]}\r\n                placeholder=\"Nom\"\r\n                value={formData.lastName}\r\n                onChangeText={(val) => handleChange(\"lastName\", val)}\r\n              />\r\n            </View>\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder=\"Nom de l'entreprise\"\r\n              value={formData.companyName}\r\n              onChangeText={(val) => handleChange(\"companyName\", val)}\r\n            />\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder=\"Activit√© de l'entreprise\"\r\n              value={formData.businessActivity}\r\n              onChangeText={(val) => handleChange(\"businessActivity\", val)}\r\n            />\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder=\"Num√©ro SIRET\"\r\n              value={formData.siretNumber}\r\n              onChangeText={(val) => handleChange(\"siretNumber\", val)}\r\n            />\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder=\"Adresse\"\r\n              value={formData.address}\r\n              onChangeText={(val) => handleChange(\"address\", val)}\r\n            />\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder=\"Compl√©ment d'adresse\"\r\n              value={formData.addressDetails}\r\n              onChangeText={(val) => handleChange(\"addressDetails\", val)}\r\n            />\r\n            <View style={styles.row}>\r\n              <TextInput\r\n                style={[styles.input, styles.inputHalf]}\r\n                placeholder=\"Ville\"\r\n                value={formData.city}\r\n                onChangeText={(val) => handleChange(\"city\", val)}\r\n              />\r\n              <TextInput\r\n                style={[styles.input, styles.inputHalf]}\r\n                placeholder=\"Code postal\"\r\n                value={formData.postalCode}\r\n                onChangeText={(val) => handleChange(\"postalCode\", val)}\r\n              />\r\n            </View>\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder=\"T√©l√©phone\"\r\n              value={formData.phone}\r\n              onChangeText={(val) => handleChange(\"phone\", val)}\r\n            />\r\n          </View>\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>Informations de paiement</Text>\r\n            <CardField\r\n              postalCodeEnabled={false}\r\n              placeholders={{\r\n                number: \"4242 4242 4242 4242\",\r\n              }}\r\n              cardStyle={{\r\n                backgroundColor: \"#FFFFFF\",\r\n                textColor: \"#000000\",\r\n              }}\r\n              style={{\r\n                width: \"100%\",\r\n                height: 50,\r\n                marginVertical: 10,\r\n              }}\r\n              onCardChange={(cardDetails) => {\r\n                // console.log(\"cardDetails\", cardDetails);\r\n              }}\r\n            />\r\n          </View>\r\n\r\n          {/* R√©sum√© commande */}\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>Votre commande</Text>\r\n            {items.map((item) => (\r\n              <View key={item.id} style={styles.itemRow}>\r\n                <View>\r\n                  <Text style={styles.itemTitle}>{item.title}</Text>\r\n                  <Text style={styles.itemSub}>Quantit√© : {item.quantity}</Text>\r\n                </View>\r\n                <Text style={styles.itemPrice}>\r\n                  {(item.price * item.quantity).toFixed(2)} ‚Ç¨\r\n                </Text>\r\n              </View>\r\n            ))}\r\n            <View style={styles.summaryRow}>\r\n              <Text>Sous-total</Text>\r\n              <Text>{subtotal.toFixed(2)} ‚Ç¨</Text>\r\n            </View>\r\n            <View style={styles.summaryRow}>\r\n              <Text>TVA (20%)</Text>\r\n              <Text>{tax.toFixed(2)} ‚Ç¨</Text>\r\n            </View>\r\n            <View style={[styles.summaryRow, styles.totalRow]}>\r\n              <Text style={styles.totalText}>Total</Text>\r\n              <Text style={styles.totalText}>{total.toFixed(2)} ‚Ç¨</Text>\r\n            </View>\r\n          </View>\r\n\r\n          {/* Bouton paiement */}\r\n          <TouchableOpacity\r\n            style={styles.buttonContainer}\r\n            onPress={() => handleSubmit(formData)}\r\n            disabled={isProcessing}\r\n            activeOpacity={0.8}\r\n          >\r\n            <Text style={styles.buttonText}>\r\n              {isProcessing\r\n                ? \"Traitement en cours...\"\r\n                : `Payer ${total.toFixed(2)} ‚Ç¨`}\r\n            </Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n        <Footer />\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#f9fafb\",\r\n  },\r\n  title: {\r\n    fontSize: 26,\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n    color: \"#0f172a\",\r\n    marginBottom: 28,\r\n  },\r\n  section: {\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: 16,\r\n    padding: 16,\r\n    marginBottom: 24,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.06,\r\n    shadowRadius: 6,\r\n    elevation: 2,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 18,\r\n    fontWeight: \"700\",\r\n    color: \"#0f172a\",\r\n    marginBottom: 16,\r\n  },\r\n  input: {\r\n    backgroundColor: \"#f1f5f9\",\r\n    borderColor: \"#d1d5db\",\r\n    borderWidth: 1,\r\n    borderRadius: 12,\r\n    paddingVertical: 12,\r\n    paddingHorizontal: 14,\r\n    fontSize: 14,\r\n    color: \"#0f172a\",\r\n    marginBottom: 12,\r\n  },\r\n  row: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    gap: 8,\r\n  },\r\n  inputHalf: {\r\n    flex: 1,\r\n  },\r\n  itemRow: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    marginBottom: 12,\r\n    paddingBottom: 8,\r\n    borderBottomWidth: 1,\r\n    borderColor: \"#e5e7eb\",\r\n  },\r\n  itemTitle: {\r\n    fontWeight: \"600\",\r\n    fontSize: 14,\r\n    color: \"#0f172a\",\r\n  },\r\n  itemSub: {\r\n    fontSize: 12,\r\n    color: \"#6b7280\",\r\n  },\r\n  itemPrice: {\r\n    fontWeight: \"600\",\r\n    fontSize: 14,\r\n    color: \"#0f172a\",\r\n  },\r\n  summaryRow: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginTop: 6,\r\n  },\r\n  totalRow: {\r\n    marginTop: 10,\r\n    borderTopWidth: 1,\r\n    borderColor: \"#d1d5db\",\r\n    paddingTop: 10,\r\n  },\r\n  totalText: {\r\n    fontWeight: \"700\",\r\n    fontSize: 16,\r\n    color: \"#0f172a\",\r\n  },\r\n  buttonContainer: {\r\n    marginTop: 20,\r\n    backgroundColor: \"#5cb9bc\",\r\n    borderRadius: 30,\r\n    alignItems: \"center\",\r\n    paddingVertical: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 6,\r\n    elevation: 3,\r\n  },\r\n  buttonText: {\r\n    color: \"#fff\",\r\n    fontSize: 16,\r\n    fontWeight: \"700\",\r\n  },\r\n  placeholder: {\r\n    color: \"#9ca3af\",\r\n    fontSize: 16,\r\n  },\r\n});\r\n"
        }
    ]
}