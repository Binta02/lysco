{
    "sourceFile": "app/(app)/Contact.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1754403238826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754411371307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n         contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n       >\r\n         {/* Hero Section */}\r\n         <LinearGradient\r\n-          colors={[\"#5cb9bc\", \"#f9429e\"]} // tes couleurs principales !\r\n+          colors={[\"#5cb9bc\", \"#f9429e\"]}\r\n           start={{ x: 0, y: 0 }}\r\n           end={{ x: 1, y: 0 }}\r\n           style={styles.hero}\r\n         >\r\n@@ -331,9 +331,9 @@\n   hero: {\r\n     paddingVertical: 40,\r\n     paddingHorizontal: 16,\r\n     marginBottom: 24,\r\n-    width: \"100%\", // assure que ça prend toute la largeur\r\n+    width: \"100%\",\r\n   },\r\n   heroTitle: {\r\n     fontSize: 24,\r\n     fontWeight: \"bold\",\r\n"
                },
                {
                    "date": 1754844331819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n \r\n     setSubmitting(true);\r\n     try {\r\n       const res = await fetch(\r\n-        \"https://mon-backend-node.vercel.app/api/send-contact\",\r\n+        \"https://mon-backend-node-henna.vercel.app/api/send-contact\",\r\n         {\r\n           method: \"POST\",\r\n           headers: { \"Content-Type\": \"application/json\" },\r\n           body: JSON.stringify(form),\r\n"
                }
            ],
            "date": 1754403238826,
            "name": "Commit-0",
            "content": "import Footer from \"@/src/components/Footer\";\r\nimport { supabase } from \"@/src/integrations/supabase/client\";\r\nimport { Ionicons, MaterialIcons } from \"@expo/vector-icons\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { Session } from \"@supabase/supabase-js\";\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\nimport { useRouter } from \"expo-router\";\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  Dimensions,\r\n  Linking,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\n\r\nconst Contact: React.FC = () => {\r\n  const navigation = useNavigation();\r\n  const [form, setForm] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    subject: \"\",\r\n    message: \"\",\r\n  });\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [session, setSession] = useState<Session | null>(null);\r\n  const [menuOpen, setMenuOpen] = useState(false);\r\n  const router = useRouter();\r\n\r\n  const handleChange = (field: string, value: string) => {\r\n    setForm({ ...form, [field]: value });\r\n  };\r\n\r\n  const validate = () => {\r\n    if (form.firstName.length < 2)\r\n      return \"Le prénom doit contenir au moins 2 caractères.\";\r\n    if (form.lastName.length < 2)\r\n      return \"Le nom doit contenir au moins 2 caractères.\";\r\n    if (!/\\S+@\\S+\\.\\S+/.test(form.email)) return \"Adresse email invalide.\";\r\n    if (form.subject.length < 3)\r\n      return \"Le sujet doit contenir au moins 3 caractères.\";\r\n    if (form.message.length < 10)\r\n      return \"Le message doit contenir au moins 10 caractères.\";\r\n    return null;\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    const error = validate();\r\n    if (error) {\r\n      Alert.alert(\"Erreur\", error);\r\n      return;\r\n    }\r\n\r\n    setSubmitting(true);\r\n    try {\r\n      const res = await fetch(\r\n        \"https://mon-backend-node.vercel.app/api/send-contact\",\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(form),\r\n        }\r\n      );\r\n      const json = await res.json();\r\n\r\n      if (res.ok && json.status === \"success\") {\r\n        Alert.alert(\"Succès\", \"Votre message a bien été envoyé.\");\r\n        setForm({\r\n          firstName: \"\",\r\n          lastName: \"\",\r\n          email: \"\",\r\n          subject: \"\",\r\n          message: \"\",\r\n        });\r\n      } else {\r\n        Alert.alert(\"Erreur\", json.error || \"Une erreur est survenue.\");\r\n      }\r\n    } catch (err) {\r\n      Alert.alert(\"Erreur de connexion\", \"Impossible de joindre le serveur.\");\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <ScrollView\r\n        style={styles.container1}\r\n        contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n      >\r\n        {/* Hero Section */}\r\n        <LinearGradient\r\n          colors={[\"#5cb9bc\", \"#f9429e\"]} // tes couleurs principales !\r\n          start={{ x: 0, y: 0 }}\r\n          end={{ x: 1, y: 0 }}\r\n          style={styles.hero}\r\n        >\r\n          <Text style={styles.heroTitle}>Contactez-nous</Text>\r\n          <Text style={styles.heroSubtitle}>\r\n            Notre équipe est à votre disposition pour répondre à vos questions.\r\n          </Text>\r\n        </LinearGradient>\r\n\r\n        <View style={styles.content}>\r\n          {/* Coordonnées */}\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>Nos coordonnées</Text>\r\n\r\n            <View style={styles.infoRow}>\r\n              <MaterialIcons name=\"location-on\" size={20} color=\"#5cb9bc\" />\r\n              <View style={styles.infoText}>\r\n                <Text style={styles.infoLabel}>Adresse</Text>\r\n                <Text style={styles.sectionItem}>\r\n                  28 Rue de l'Eglise, 95210 Deuil-la-Barre\r\n                </Text>\r\n              </View>\r\n            </View>\r\n\r\n            <View style={styles.infoRow}>\r\n              <Ionicons name=\"call\" size={20} color=\"#5cb9bc\" />\r\n              <View style={styles.infoText}>\r\n                <Text style={styles.infoLabel}>Téléphone</Text>\r\n                <Text style={styles.sectionItem}>\r\n                  09 53 42 11 63 / 07 56 85 37 02\r\n                </Text>\r\n              </View>\r\n            </View>\r\n\r\n            <View style={styles.infoRow}>\r\n              <Ionicons name=\"mail\" size={20} color=\"#5cb9bc\" />\r\n              <View style={styles.infoText}>\r\n                <Text style={styles.infoLabel}>Email</Text>\r\n                <Text\r\n                  style={[styles.sectionItem, styles.link]}\r\n                  onPress={() =>\r\n                    Linking.openURL(\"mailto:contact@lys-and-co.com\")\r\n                  }\r\n                >\r\n                  contact@lys-and-co.com\r\n                </Text>\r\n              </View>\r\n            </View>\r\n          </View>\r\n\r\n          {/* Formulaire */}\r\n          <View style={styles.formCard}>\r\n            <View style={styles.row}>\r\n              <TextInput\r\n                style={styles.input}\r\n                placeholder=\"Prénom\"\r\n                value={form.firstName}\r\n                onChangeText={(text) => handleChange(\"firstName\", text)}\r\n              />\r\n              <TextInput\r\n                style={styles.input}\r\n                placeholder=\"Nom\"\r\n                value={form.lastName}\r\n                onChangeText={(text) => handleChange(\"lastName\", text)}\r\n              />\r\n            </View>\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder=\"Email\"\r\n              keyboardType=\"email-address\"\r\n              value={form.email}\r\n              onChangeText={(text) => handleChange(\"email\", text)}\r\n            />\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder=\"Sujet\"\r\n              value={form.subject}\r\n              onChangeText={(text) => handleChange(\"subject\", text)}\r\n            />\r\n            <TextInput\r\n              style={[styles.input, { height: 100 }]}\r\n              placeholder=\"Votre message...\"\r\n              multiline\r\n              value={form.message}\r\n              onChangeText={(text) => handleChange(\"message\", text)}\r\n            />\r\n            <TouchableOpacity\r\n              style={styles.button}\r\n              onPress={handleSubmit}\r\n              disabled={submitting}\r\n            >\r\n              <Text style={styles.buttonText}>\r\n                {submitting ? \"Envoi en cours...\" : \"Envoyer\"}\r\n              </Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </View>\r\n        <Footer />\r\n      </ScrollView>\r\n      {/* GLOBAL OVERLAY */}\r\n      {menuOpen && (\r\n        <View\r\n          style={{\r\n            position: \"absolute\",\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            backgroundColor: \"#fff\",\r\n            zIndex: 9999,\r\n            elevation: 9999,\r\n          }}\r\n        >\r\n          <ScrollView\r\n            contentContainerStyle={{ paddingTop: 90, paddingHorizontal: 20 }}\r\n          >\r\n            <TouchableOpacity\r\n              style={{ position: \"absolute\", top: 50, right: 20, padding: 10 }}\r\n              onPress={() => setMenuOpen(false)}\r\n            >\r\n              <Text style={{ fontSize: 28, color: \"#333\" }}>✕</Text>\r\n            </TouchableOpacity>\r\n\r\n            {[\r\n              { label: \"Accueil\", path: \"/(app)\" },\r\n              { label: \"Domiciliation\", path: \"/(app)/Domiciliation\" },\r\n              { label: \"Services Admin\", path: \"/(app)/ServicesAdmin\" },\r\n              { label: \"Communication\", path: \"/(app)/Communication\" },\r\n              { label: \"Contact\", path: \"/(app)/Contact\" },\r\n            ].map((item, idx) => (\r\n              <TouchableOpacity\r\n                key={idx}\r\n                style={{\r\n                  paddingVertical: 12,\r\n                  borderBottomWidth: 1,\r\n                  borderColor: \"#eee\",\r\n                }}\r\n                onPress={() => {\r\n                  router.push(item.path as any);\r\n                  setMenuOpen(false);\r\n                }}\r\n              >\r\n                <Text style={{ fontSize: 18, color: \"#333\" }}>\r\n                  {item.label}\r\n                </Text>\r\n              </TouchableOpacity>\r\n            ))}\r\n\r\n            <View style={{ marginTop: 30 }}>\r\n              {session ? (\r\n                <>\r\n                  <TouchableOpacity\r\n                    style={{\r\n                      paddingVertical: 12,\r\n                      alignItems: \"center\",\r\n                      borderRadius: 6,\r\n                      backgroundColor: \"#5cb9bc\",\r\n                      marginBottom: 12,\r\n                    }}\r\n                    onPress={() => {\r\n                      router.push(\"/(app)/Dashboard\" as any);\r\n                      setMenuOpen(false);\r\n                    }}\r\n                  >\r\n                    <Text style={{ color: \"#fff\", fontWeight: \"bold\" }}>\r\n                      Dashboard\r\n                    </Text>\r\n                  </TouchableOpacity>\r\n\r\n                  <TouchableOpacity\r\n                    style={{\r\n                      paddingVertical: 12,\r\n                      alignItems: \"center\",\r\n                      borderRadius: 6,\r\n                      backgroundColor: \"#5cb9bc\",\r\n                    }}\r\n                    onPress={async () => {\r\n                      const { error } = await supabase.auth.signOut();\r\n                      if (error) {\r\n                        Alert.alert(\"Erreur\", error.message);\r\n                        return;\r\n                      }\r\n                      Alert.alert(\"Déconnexion réussie\");\r\n                      router.push(\"/(app)/Login\" as any);\r\n                      setMenuOpen(false);\r\n                    }}\r\n                  >\r\n                    <Text style={{ color: \"#fff\", fontWeight: \"bold\" }}>\r\n                      Déconnexion\r\n                    </Text>\r\n                  </TouchableOpacity>\r\n                </>\r\n              ) : (\r\n                <TouchableOpacity\r\n                  style={{\r\n                    paddingVertical: 12,\r\n                    alignItems: \"center\",\r\n                    borderRadius: 6,\r\n                    backgroundColor: \"#fff\",\r\n                    borderWidth: 1,\r\n                    borderColor: \"#5cb9bc\",\r\n                  }}\r\n                  onPress={() => {\r\n                    router.push(\"/(app)/Login\" as any);\r\n                    setMenuOpen(false);\r\n                  }}\r\n                >\r\n                  <Text style={{ color: \"#5cb9bc\", fontWeight: \"bold\" }}>\r\n                    Connexion\r\n                  </Text>\r\n                </TouchableOpacity>\r\n              )}\r\n            </View>\r\n          </ScrollView>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst { width } = Dimensions.get(\"window\");\r\n\r\nconst styles = StyleSheet.create({\r\n  container1: {\r\n    backgroundColor: \"#f9fafb\",\r\n    flex: 1,\r\n  },\r\n  container: {\r\n    padding: 16,\r\n    backgroundColor: \"#f9fafb\",\r\n  },\r\n  hero: {\r\n    paddingVertical: 40,\r\n    paddingHorizontal: 16,\r\n    marginBottom: 24,\r\n    width: \"100%\", // assure que ça prend toute la largeur\r\n  },\r\n  heroTitle: {\r\n    fontSize: 24,\r\n    fontWeight: \"bold\",\r\n    color: \"#fff\",\r\n    textAlign: \"center\",\r\n    marginBottom: 8,\r\n  },\r\n  section: {\r\n    padding: 16,\r\n    marginBottom: 24,\r\n    elevation: 2,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 18,\r\n    fontWeight: \"600\",\r\n    color: \"#0f172a\",\r\n    marginBottom: 16,\r\n    textAlign: \"center\",\r\n  },\r\n  infoRow: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"flex-start\",\r\n    marginBottom: 12,\r\n  },\r\n  infoText: {\r\n    marginLeft: 8,\r\n    flex: 1,\r\n  },\r\n  infoLabel: {\r\n    fontSize: 14,\r\n    fontWeight: \"600\",\r\n    color: \"#0f172a\",\r\n  },\r\n  sectionItem: {\r\n    fontSize: 14,\r\n    color: \"#475569\",\r\n  },\r\n  link: {\r\n    color: \"#f9429e\",\r\n    textDecorationLine: \"underline\",\r\n  },\r\n  heroSubtitle: {\r\n    fontSize: 14,\r\n    color: \"#f0fdfa\",\r\n    textAlign: \"center\",\r\n    lineHeight: 20,\r\n  },\r\n  content: {\r\n    gap: 16,\r\n    backgroundColor: \"#f9fafb\",\r\n  },\r\n\r\n  formCard: {\r\n    backgroundColor: \"#fff\",\r\n    padding: 16,\r\n    borderRadius: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n    elevation: 2,\r\n  },\r\n  row: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    gap: 8,\r\n    marginBottom: 12,\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    backgroundColor: \"#f1f5f9\",\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 12,\r\n    borderRadius: 8,\r\n    fontSize: 14,\r\n    color: \"#0f172a\",\r\n    marginBottom: 12,\r\n  },\r\n  button: {\r\n    backgroundColor: \"#f9429e\",\r\n    paddingVertical: 14,\r\n    borderRadius: 30,\r\n    alignItems: \"center\",\r\n    marginTop: 8,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n    elevation: 3,\r\n  },\r\n  buttonText: {\r\n    color: \"#fff\",\r\n    fontSize: 16,\r\n    fontWeight: \"600\",\r\n  },\r\n});\r\n\r\nexport default Contact;\r\n"
        }
    ]
}