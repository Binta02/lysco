{
    "sourceFile": "app/(app)/Dashboard.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1754300112326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754403248239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,16 +166,16 @@\n   // useEffect(() => {\r\n   //   const checkAndLoadData = async () => {\r\n   //     try {\r\n   //       if (!session) {\r\n-  //         router.push(\"/(tabs)/Login?redirect=Dashboard\");\r\n+  //         router.push(\"/(app)/Login?redirect=Dashboard\");\r\n   //         return;\r\n   //       }\r\n \r\n   //       await loadInitialData(session.user.id);\r\n   //     } catch (error) {\r\n   //       console.error(\"Initial load error:\", error);\r\n-  //       router.push(\"/(tabs)/Login?redirect=Dashboard\");\r\n+  //       router.push(\"/(app)/Login?redirect=Dashboard\");\r\n   //     } finally {\r\n   //       setInitialLoadComplete(true);\r\n   //     }\r\n   //   };\r\n@@ -185,9 +185,9 @@\n   //   const {\r\n   //     data: { subscription },\r\n   //   } = supabase.auth.onAuthStateChange((event) => {\r\n   //     if (event === \"SIGNED_OUT\") {\r\n-  //       router.push(\"/(tabs)/Login?redirect=Dashboard\");\r\n+  //       router.push(\"/(app)/Login?redirect=Dashboard\");\r\n   //     }\r\n   //   });\r\n \r\n   //   return () => {\r\n@@ -315,16 +315,16 @@\n   useEffect(() => {\r\n     const checkAndLoadData = async () => {\r\n       try {\r\n         if (!session) {\r\n-          router.push(\"/(tabs)/Login?redirect=Dashboard\");\r\n+          router.push(\"/(app)/Login?redirect=Dashboard\");\r\n           return;\r\n         }\r\n \r\n         await loadInitialData(session.user.id);\r\n       } catch (error) {\r\n         console.error(\"Initial load error:\", error);\r\n-        router.push(\"/(tabs)/Login?redirect=Dashboard\");\r\n+        router.push(\"/(app)/Login?redirect=Dashboard\");\r\n       } finally {\r\n         setInitialLoadComplete(true);\r\n       }\r\n     };\r\n@@ -334,9 +334,9 @@\n     const {\r\n       data: { subscription },\r\n     } = supabase.auth.onAuthStateChange((event) => {\r\n       if (event === \"SIGNED_OUT\") {\r\n-        router.push(\"/(tabs)/Login?redirect=Dashboard\");\r\n+        router.push(\"/(app)/Login?redirect=Dashboard\");\r\n       }\r\n     });\r\n \r\n     return () => subscription.unsubscribe();\r\n@@ -453,9 +453,9 @@\n         text1: \"Compte d√©sactiv√©\",\r\n         text2: \"Vous avez √©t√© d√©connect√©.\",\r\n       });\r\n \r\n-      router.push(\"/(tabs)/Login?redirect=Dashboard\");\r\n+      router.push(\"/(app)/Login?redirect=Dashboard\");\r\n     } catch (err) {\r\n       console.error(\"‚ùó Erreur dans confirmDeleteAccount :\", err);\r\n       Toast.show({\r\n         type: \"error\",\r\n@@ -626,9 +626,9 @@\n       >\r\n         <Text style={{ color: \"red\", fontSize: 18, marginBottom: 20 }}>\r\n           Une erreur est survenue lors du chargement de vos donn√©es\r\n         </Text>\r\n-        <Button onPress={() => router.push(\"/(tabs)/Login?redirect=Dashboard\")}>\r\n+        <Button onPress={() => router.push(\"/(app)/Login?redirect=Dashboard\")}>\r\n           Retourner √† l'accueil\r\n         </Button>\r\n       </SafeAreaView>\r\n     );\r\n"
                },
                {
                    "date": 1754404142930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,16 +17,16 @@\n   TouchableOpacity,\r\n   View,\r\n } from \"react-native\";\r\n import Toast from \"react-native-toast-message\";\r\n-import AdminDashboard from \"../(app)/AdminDashboard\";\r\n import ProfileEditForm from \"../../src/components/dashboard/ProfileEditForm\";\r\n import Footer from \"../../src/components/Footer\";\r\n import { Button } from \"../../src/components/ui/button\";\r\n import { useUserData } from \"../../src/hooks/useUserData\";\r\n import { supabase } from \"../../src/integrations/supabase/client\";\r\n import type { RootStackParamList } from \"../../src/navigation/types\";\r\n import { humanizeReservationType } from \"../../src/utils/humanize\";\r\n+import AdminDashboard from \"./AdminDashboard\";\r\n \r\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n \r\n const Dashboard = () => {\r\n"
                },
                {
                    "date": 1754404821499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { useNavigation } from \"@react-navigation/native\";\r\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\n // import { Session } from \"@supabase/supabase-js\";\r\n \r\n+import { Session } from \"@supabase/supabase-js\";\r\n import { format } from \"date-fns\";\r\n import { fr } from \"date-fns/locale\";\r\n import { useRouter } from \"expo-router\";\r\n import React, { useCallback, useEffect, useState } from \"react\";\r\n@@ -42,220 +43,22 @@\n   const [loadingReservations, setLoadingReservations] = useState(true);\r\n   // const [session, setSession] = useState<Session | null>(null);\r\n   const [initialLoadComplete, setInitialLoadComplete] = useState(false);\r\n   // const session = useSession();\r\n-  const [session, setSession] = useState<any>(null);\r\n+  // const [session, setSession] = useState<any>(null);\r\n \r\n   const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n \r\n-  // const {\r\n-  //   profile,\r\n-  //   loading: userDataLoading,\r\n-  //   error: userDataError,\r\n-  //   updateProfile,\r\n-  // } = useUserData();\r\n+  const [session, setSession] = useState<Session | null>(null);\r\n+  const [sessionChecked, setSessionChecked] = useState(false);\r\n+\r\n   const {\r\n     profile,\r\n     loading: userDataLoading,\r\n     error: userDataError,\r\n     updateProfile,\r\n   } = useUserData(session);\r\n \r\n-  // const loadInitialData = async (userId: string) => {\r\n-  //   try {\r\n-  //     // Charger le profil\r\n-  //     const { data: profileData, error: profileError } = await supabase\r\n-  //       .from(\"profiles\")\r\n-  //       .select(\"*\")\r\n-  //       .eq(\"id\", userId)\r\n-  //       .single();\r\n-\r\n-  //     console.log(\"üë§ Profil r√©cup√©r√© :\", profileData);\r\n-\r\n-  //     if (profileError) throw profileError;\r\n-\r\n-  //     setIsAdmin(profileData?.is_admin ?? false);\r\n-\r\n-  //     // Charger les donn√©es en parall√®le\r\n-  //     await Promise.all([\r\n-  //       loadDocuments(userId),\r\n-  //       loadReservations(userId),\r\n-  //       profileData?.stripe_customer_id\r\n-  //         ? loadStripeData(profileData.stripe_customer_id)\r\n-  //         : Promise.resolve(),\r\n-  //     ]);\r\n-  //   } catch (error) {\r\n-  //     console.error(\"Error loading initial data:\", error);\r\n-  //     throw error;\r\n-  //   }\r\n-  // };\r\n-\r\n-  // const loadInitialData = async (userId: string) => {\r\n-  //   try {\r\n-  //     const { data: profileData, error: profileError } = await supabase\r\n-  //       .from(\"profiles\")\r\n-  //       .select(\"*\")\r\n-  //       .eq(\"id\", userId)\r\n-  //       .single();\r\n-\r\n-  //     if (profileError) throw profileError;\r\n-\r\n-  //     setIsAdmin(profileData?.is_admin ?? false);\r\n-\r\n-  //     await Promise.all([loadDocuments(userId), loadReservations(userId)]);\r\n-  //   } catch (error) {\r\n-  //     console.error(\"‚ùå Erreur lors du chargement initial :\", error);\r\n-  //     throw error;\r\n-  //   }\r\n-  // };\r\n-\r\n-  // const loadDocuments = async (userId: string) => {\r\n-  //   if (isAdmin) return;\r\n-\r\n-  //   setLoadingDocuments(true);\r\n-  //   try {\r\n-  //     const { data, error } = await supabase\r\n-  //       .from(\"user_documents\")\r\n-  //       .select(\"*\")\r\n-  //       .eq(\"user_id\", userId)\r\n-  //       .order(\"uploaded_at\", { ascending: false });\r\n-\r\n-  //     if (error) throw error;\r\n-  //     setDocuments(data || []);\r\n-  //   } finally {\r\n-  //     setLoadingDocuments(false);\r\n-  //   }\r\n-  // };\r\n-\r\n-  // const loadReservations = async (userId: string) => {\r\n-  //   setLoadingReservations(true);\r\n-  //   try {\r\n-  //     const { data, error } = await supabase\r\n-  //       .from(\"reservations\")\r\n-  //       .select(\"*\")\r\n-  //       .eq(\"user_id\", userId)\r\n-  //       .order(\"reservation_date\", { ascending: false });\r\n-\r\n-  //     if (error) throw error;\r\n-  //     setReservations(data || []);\r\n-  //   } finally {\r\n-  //     setLoadingReservations(false);\r\n-  //   }\r\n-  // };\r\n-\r\n-  // const loadStripeData = async (stripeCustomerId: string) => {\r\n-  //   try {\r\n-  //     const res = await fetch(\r\n-  //       \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n-  //       {\r\n-  //         method: \"POST\",\r\n-  //         headers: { \"Content-Type\": \"application/json\" },\r\n-  //         body: JSON.stringify({ stripeCustomerId }),\r\n-  //       }\r\n-  //     );\r\n-\r\n-  //     if (!res.ok) throw new Error(\"Failed to fetch Stripe data\");\r\n-\r\n-  //     const stripeData = await res.json();\r\n-  //     setStripeSubscriptions(stripeData.subscriptions || []);\r\n-  //     setStripeInvoices(stripeData.invoices || []);\r\n-  //   } catch (error) {\r\n-  //     console.error(\"Error loading Stripe data:\", error);\r\n-  //   }\r\n-  // };\r\n-  // // V√©rification de la session et chargement initial\r\n-  // useEffect(() => {\r\n-  //   const checkAndLoadData = async () => {\r\n-  //     try {\r\n-  //       if (!session) {\r\n-  //         router.push(\"/(app)/Login?redirect=Dashboard\");\r\n-  //         return;\r\n-  //       }\r\n-\r\n-  //       await loadInitialData(session.user.id);\r\n-  //     } catch (error) {\r\n-  //       console.error(\"Initial load error:\", error);\r\n-  //       router.push(\"/(app)/Login?redirect=Dashboard\");\r\n-  //     } finally {\r\n-  //       setInitialLoadComplete(true);\r\n-  //     }\r\n-  //   };\r\n-\r\n-  //   checkAndLoadData();\r\n-\r\n-  //   const {\r\n-  //     data: { subscription },\r\n-  //   } = supabase.auth.onAuthStateChange((event) => {\r\n-  //     if (event === \"SIGNED_OUT\") {\r\n-  //       router.push(\"/(app)/Login?redirect=Dashboard\");\r\n-  //     }\r\n-  //   });\r\n-\r\n-  //   return () => {\r\n-  //     subscription.unsubscribe();\r\n-  //   };\r\n-  // }, [navigation, session]);\r\n-\r\n-  // useEffect(() => {\r\n-  //   supabase.auth.getSession().then(({ data: { session } }) => {\r\n-  //     setSession(session);\r\n-  //   });\r\n-\r\n-  //   const {\r\n-  //     data: { subscription },\r\n-  //   } = supabase.auth.onAuthStateChange((_event, session) => {\r\n-  //     setSession(session);\r\n-  //   });\r\n-\r\n-  //   return () => subscription.unsubscribe();\r\n-  // }, []);\r\n-\r\n-  // useEffect(() => {\r\n-  //   const fetchStripeData = async () => {\r\n-  //     if (!profile?.id) return;\r\n-\r\n-  //     const { data: profileData, error: profileError } = await supabase\r\n-  //       .from(\"profiles\")\r\n-  //       .select(\"stripe_customer_id\")\r\n-  //       .eq(\"id\", profile.id)\r\n-  //       .maybeSingle();\r\n-\r\n-  //     if (profileError) {\r\n-  //       console.error(\r\n-  //         \"‚ùå Erreur Supabase lors de la r√©cup√©ration du profil :\",\r\n-  //         profileError\r\n-  //       );\r\n-  //       return;\r\n-  //     }\r\n-\r\n-  //     if (!profileData?.stripe_customer_id) {\r\n-  //       console.warn(\"‚ö†Ô∏è Aucun stripe_customer_id trouv√©\");\r\n-  //       return;\r\n-  //     }\r\n-\r\n-  //     try {\r\n-  //       const res = await fetch(\r\n-  //         \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n-  //         {\r\n-  //           method: \"POST\",\r\n-  //           headers: { \"Content-Type\": \"application/json\" },\r\n-  //           body: JSON.stringify({\r\n-  //             stripeCustomerId: profileData.stripe_customer_id,\r\n-  //           }),\r\n-  //         }\r\n-  //       );\r\n-  //       const stripeData = await res.json();\r\n-  //       console.log(\"üì¶ Donn√©es Stripe re√ßues :\", stripeData);\r\n-  //       setStripeSubscriptions(stripeData.subscriptions || []);\r\n-  //       setStripeInvoices(stripeData.invoices || []);\r\n-  //     } catch (error) {\r\n-  //       console.error(\"‚ùå Erreur lors de l'appel √† Stripe :\", error);\r\n-  //     }\r\n-  //   };\r\n-\r\n-  //   fetchStripeData();\r\n-  // }, [profile]);\r\n-\r\n   // Chargement initial (documents + r√©servations)\r\n   const loadInitialData = async (userId: string) => {\r\n     try {\r\n       const { data: profileData, error: profileError } = await supabase\r\n@@ -310,11 +113,59 @@\n       setLoadingReservations(false);\r\n     }\r\n   };\r\n \r\n+  // // V√©rification de la session et chargement initial\r\n+  // useEffect(() => {\r\n+  //   const checkAndLoadData = async () => {\r\n+  //     try {\r\n+  //       if (!session) {\r\n+  //         router.push(\"/(app)/Login?redirect=Dashboard\");\r\n+  //         return;\r\n+  //       }\r\n+\r\n+  //       await loadInitialData(session.user.id);\r\n+  //     } catch (error) {\r\n+  //       console.error(\"Initial load error:\", error);\r\n+  //       router.push(\"/(app)/Login?redirect=Dashboard\");\r\n+  //     } finally {\r\n+  //       setInitialLoadComplete(true);\r\n+  //     }\r\n+  //   };\r\n+\r\n+  //   checkAndLoadData();\r\n+\r\n+  //   const {\r\n+  //     data: { subscription },\r\n+  //   } = supabase.auth.onAuthStateChange((event) => {\r\n+  //     if (event === \"SIGNED_OUT\") {\r\n+  //       router.push(\"/(app)/Login?redirect=Dashboard\");\r\n+  //     }\r\n+  //   });\r\n+\r\n+  //   return () => subscription.unsubscribe();\r\n+  // }, [navigation, session]);\r\n+\r\n+  // // Session listener\r\n+  // useEffect(() => {\r\n+  //   supabase.auth.getSession().then(({ data: { session } }) => {\r\n+  //     setSession(session);\r\n+  //   });\r\n+\r\n+  //   const {\r\n+  //     data: { subscription },\r\n+  //   } = supabase.auth.onAuthStateChange((_event, session) => {\r\n+  //     setSession(session);\r\n+  //   });\r\n+\r\n+  //   return () => subscription.unsubscribe();\r\n+  // }, []);\r\n+\r\n   // V√©rification de la session et chargement initial\r\n   useEffect(() => {\r\n     const checkAndLoadData = async () => {\r\n+      if (!sessionChecked) return; // ‚õîÔ∏è Attendre que la session soit v√©rifi√©e\r\n+\r\n       try {\r\n         if (!session) {\r\n           router.push(\"/(app)/Login?redirect=Dashboard\");\r\n           return;\r\n@@ -339,14 +190,15 @@\n       }\r\n     });\r\n \r\n     return () => subscription.unsubscribe();\r\n-  }, [navigation, session]);\r\n+  }, [sessionChecked, session]);\r\n \r\n-  // Session listener\r\n+  // R√©cup√©ration initiale de la session\r\n   useEffect(() => {\r\n     supabase.auth.getSession().then(({ data: { session } }) => {\r\n       setSession(session);\r\n+      setSessionChecked(true); // ‚úÖ Session bien v√©rifi√©e\r\n     });\r\n \r\n     const {\r\n       data: { subscription },\r\n"
                },
                {
                    "date": 1754405296704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,12 +209,58 @@\n     return () => subscription.unsubscribe();\r\n   }, []);\r\n \r\n   // üéØ Stripe uniquement d√©clench√© par profile\r\n+  // useEffect(() => {\r\n+  //   const fetchStripeData = async () => {\r\n+  //     if (!profile?.id) return;\r\n+\r\n+  //     const { data: profileData, error: profileError } = await supabase\r\n+  //       .from(\"profiles\")\r\n+  //       .select(\"stripe_customer_id\")\r\n+  //       .eq(\"id\", profile.id)\r\n+  //       .maybeSingle();\r\n+\r\n+  //     if (profileError) {\r\n+  //       console.error(\r\n+  //         \"‚ùå Erreur Supabase lors de la r√©cup√©ration du profil :\",\r\n+  //         profileError\r\n+  //       );\r\n+  //       return;\r\n+  //     }\r\n+\r\n+  //     if (!profileData?.stripe_customer_id) {\r\n+  //       console.warn(\"‚ö†Ô∏è Aucun stripe_customer_id trouv√©\");\r\n+  //       return;\r\n+  //     }\r\n+\r\n+  //     try {\r\n+  //       const res = await fetch(\r\n+  //         \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n+  //         {\r\n+  //           method: \"POST\",\r\n+  //           headers: { \"Content-Type\": \"application/json\" },\r\n+  //           body: JSON.stringify({\r\n+  //             stripeCustomerId: profileData.stripe_customer_id,\r\n+  //           }),\r\n+  //         }\r\n+  //       );\r\n+  //       const stripeData = await res.json();\r\n+  //       // console.log(\"üì¶ Donn√©es Stripe re√ßues :\", stripeData);\r\n+  //       setStripeSubscriptions(stripeData.subscriptions || []);\r\n+  //       setStripeInvoices(stripeData.invoices || []);\r\n+  //     } catch (error) {\r\n+  //       console.error(\"‚ùå Erreur lors de l'appel √† Stripe :\", error);\r\n+  //     }\r\n+  //   };\r\n+\r\n+  //   fetchStripeData();\r\n+  // }, [profile]);\r\n+\r\n   useEffect(() => {\r\n+    if (!profile?.id) return;\r\n+\r\n     const fetchStripeData = async () => {\r\n-      if (!profile?.id) return;\r\n-\r\n       const { data: profileData, error: profileError } = await supabase\r\n         .from(\"profiles\")\r\n         .select(\"stripe_customer_id\")\r\n         .eq(\"id\", profile.id)\r\n@@ -243,19 +289,19 @@\n               stripeCustomerId: profileData.stripe_customer_id,\r\n             }),\r\n           }\r\n         );\r\n+\r\n         const stripeData = await res.json();\r\n-        // console.log(\"üì¶ Donn√©es Stripe re√ßues :\", stripeData);\r\n         setStripeSubscriptions(stripeData.subscriptions || []);\r\n         setStripeInvoices(stripeData.invoices || []);\r\n       } catch (error) {\r\n         console.error(\"‚ùå Erreur lors de l'appel √† Stripe :\", error);\r\n       }\r\n     };\r\n \r\n     fetchStripeData();\r\n-  }, [profile]);\r\n+  }, [profile?.id]);\r\n \r\n   type Profile = {\r\n     id: string;\r\n     email: string;\r\n"
                },
                {
                    "date": 1754405507932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,8 +256,13 @@\n   //   fetchStripeData();\r\n   // }, [profile]);\r\n \r\n   useEffect(() => {\r\n+    console.log(\r\n+      \"üìå useEffect Stripe d√©clench√© avec profile?.id =\",\r\n+      profile?.id\r\n+    );\r\n+\r\n     if (!profile?.id) return;\r\n \r\n     const fetchStripeData = async () => {\r\n       const { data: profileData, error: profileError } = await supabase\r\n"
                },
                {
                    "date": 1754405722014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,47 +256,25 @@\n   //   fetchStripeData();\r\n   // }, [profile]);\r\n \r\n   useEffect(() => {\r\n-    console.log(\r\n-      \"üìå useEffect Stripe d√©clench√© avec profile?.id =\",\r\n-      profile?.id\r\n-    );\r\n+    if (!profile?.stripe_customer_id) {\r\n+      console.warn(\"‚ö†Ô∏è Aucun stripe_customer_id dans le profil\");\r\n+      return;\r\n+    }\r\n \r\n-    if (!profile?.id) return;\r\n-\r\n     const fetchStripeData = async () => {\r\n-      const { data: profileData, error: profileError } = await supabase\r\n-        .from(\"profiles\")\r\n-        .select(\"stripe_customer_id\")\r\n-        .eq(\"id\", profile.id)\r\n-        .maybeSingle();\r\n-\r\n-      if (profileError) {\r\n-        console.error(\r\n-          \"‚ùå Erreur Supabase lors de la r√©cup√©ration du profil :\",\r\n-          profileError\r\n-        );\r\n-        return;\r\n-      }\r\n-\r\n-      if (!profileData?.stripe_customer_id) {\r\n-        console.warn(\"‚ö†Ô∏è Aucun stripe_customer_id trouv√©\");\r\n-        return;\r\n-      }\r\n-\r\n       try {\r\n         const res = await fetch(\r\n           \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n           {\r\n             method: \"POST\",\r\n             headers: { \"Content-Type\": \"application/json\" },\r\n             body: JSON.stringify({\r\n-              stripeCustomerId: profileData.stripe_customer_id,\r\n+              stripeCustomerId: profile.stripe_customer_id,\r\n             }),\r\n           }\r\n         );\r\n-\r\n         const stripeData = await res.json();\r\n         setStripeSubscriptions(stripeData.subscriptions || []);\r\n         setStripeInvoices(stripeData.invoices || []);\r\n       } catch (error) {\r\n@@ -304,9 +282,9 @@\n       }\r\n     };\r\n \r\n     fetchStripeData();\r\n-  }, [profile?.id]);\r\n+  }, [profile?.stripe_customer_id]);\r\n \r\n   type Profile = {\r\n     id: string;\r\n     email: string;\r\n"
                },
                {
                    "date": 1754406028758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,30 +256,68 @@\n   //   fetchStripeData();\r\n   // }, [profile]);\r\n \r\n   useEffect(() => {\r\n+    console.log(\r\n+      \"üåÄ [Stripe useEffect] D√©clench√© avec :\",\r\n+      profile?.stripe_customer_id\r\n+    );\r\n+\r\n     if (!profile?.stripe_customer_id) {\r\n-      console.warn(\"‚ö†Ô∏è Aucun stripe_customer_id dans le profil\");\r\n+      console.warn(\r\n+        \"‚ö†Ô∏è [Stripe useEffect] Aucun stripe_customer_id dans le profil\"\r\n+      );\r\n       return;\r\n     }\r\n \r\n     const fetchStripeData = async () => {\r\n+      console.log(\r\n+        \"üöÄ [fetchStripeData] Lancement avec stripeCustomerId :\",\r\n+        profile.stripe_customer_id\r\n+      );\r\n+\r\n       try {\r\n-        const res = await fetch(\r\n+        const response = await fetch(\r\n           \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n           {\r\n             method: \"POST\",\r\n-            headers: { \"Content-Type\": \"application/json\" },\r\n+            headers: {\r\n+              \"Content-Type\": \"application/json\",\r\n+            },\r\n             body: JSON.stringify({\r\n               stripeCustomerId: profile.stripe_customer_id,\r\n             }),\r\n           }\r\n         );\r\n-        const stripeData = await res.json();\r\n+\r\n+        console.log(\"üì© [fetchStripeData] R√©ponse brute re√ßue :\", response);\r\n+\r\n+        if (!response.ok) {\r\n+          console.error(\r\n+            \"‚ùå [fetchStripeData] Erreur HTTP :\",\r\n+            response.status,\r\n+            response.statusText\r\n+          );\r\n+          return;\r\n+        }\r\n+\r\n+        const stripeData = await response.json();\r\n+        console.log(\r\n+          \"‚úÖ [fetchStripeData] Donn√©es Stripe d√©cod√©es :\",\r\n+          stripeData\r\n+        );\r\n+\r\n         setStripeSubscriptions(stripeData.subscriptions || []);\r\n         setStripeInvoices(stripeData.invoices || []);\r\n+\r\n+        console.log(\r\n+          \"üì¶ [fetchStripeData] Subscriptions et invoices mises √† jour dans le state\"\r\n+        );\r\n       } catch (error) {\r\n-        console.error(\"‚ùå Erreur lors de l'appel √† Stripe :\", error);\r\n+        console.error(\r\n+          \"‚ùå [fetchStripeData] Erreur lors de l'appel √† Stripe :\",\r\n+          error\r\n+        );\r\n       }\r\n     };\r\n \r\n     fetchStripeData();\r\n"
                },
                {
                    "date": 1754406250272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -708,9 +708,10 @@\n               ))\r\n             )}\r\n           </View>\r\n           {/* Abonnements Stripe */}\r\n-          {stripeSubscriptions.length > 0 && (\r\n+          {/* {stripeSubscriptions.length > 0 && (\r\n+\r\n             <View style={styles.card}>\r\n               <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n               {stripeSubscriptions.map((sub) => (\r\n                 <View key={sub.id} style={styles.item}>\r\n@@ -732,9 +733,45 @@\n               >\r\n                 <Text style={styles.buttonText}>G√©rer mes abonnements</Text>\r\n               </TouchableOpacity>\r\n             </View>\r\n+          )} */}\r\n+          {stripeSubscriptions.length > 0 && (\r\n+            <View style={styles.card}>\r\n+              <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n+              {stripeSubscriptions.map((sub) => {\r\n+                console.log(\"üì¶ Abonnement Stripe :\", sub); // üëà log ici\r\n+\r\n+                return (\r\n+                  <View key={sub.id} style={styles.item}>\r\n+                    <Text>Statut: {getStatusBadge(sub.status)}</Text>\r\n+                    <Text>D√©but: {formatDate(sub.start_date * 1000)}</Text>\r\n+                    {sub.cancel_at && (\r\n+                      <Text>\r\n+                        Fin pr√©vue: {formatDate(sub.cancel_at * 1000)}\r\n+                      </Text>\r\n+                    )}\r\n+                    {sub.items?.data?.map((item: any) => {\r\n+                      console.log(\"üßæ Item d'abonnement :\", item); // üëà log item\r\n+\r\n+                      return (\r\n+                        <Text key={item.id}>\r\n+                          Produit: {item.product_name || \"Nom inconnu\"}\r\n+                        </Text>\r\n+                      );\r\n+                    })}\r\n+                  </View>\r\n+                );\r\n+              })}\r\n+              <TouchableOpacity\r\n+                style={styles.buttonPrimary}\r\n+                onPress={handleOpenStripePortal}\r\n+              >\r\n+                <Text style={styles.buttonText}>G√©rer mes abonnements</Text>\r\n+              </TouchableOpacity>\r\n+            </View>\r\n           )}\r\n+\r\n           {/* Factures Stripe */}\r\n           {stripeInvoices.length > 0 && (\r\n             <View style={styles.card}>\r\n               <Text style={styles.cardTitle}>Mes factures d'abonnement</Text>\r\n"
                },
                {
                    "date": 1754406351673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,120 +209,53 @@\n     return () => subscription.unsubscribe();\r\n   }, []);\r\n \r\n   // üéØ Stripe uniquement d√©clench√© par profile\r\n-  // useEffect(() => {\r\n-  //   const fetchStripeData = async () => {\r\n-  //     if (!profile?.id) return;\r\n+  useEffect(() => {\r\n+    const fetchStripeData = async () => {\r\n+      if (!profile?.id) return;\r\n \r\n-  //     const { data: profileData, error: profileError } = await supabase\r\n-  //       .from(\"profiles\")\r\n-  //       .select(\"stripe_customer_id\")\r\n-  //       .eq(\"id\", profile.id)\r\n-  //       .maybeSingle();\r\n+      const { data: profileData, error: profileError } = await supabase\r\n+        .from(\"profiles\")\r\n+        .select(\"stripe_customer_id\")\r\n+        .eq(\"id\", profile.id)\r\n+        .maybeSingle();\r\n \r\n-  //     if (profileError) {\r\n-  //       console.error(\r\n-  //         \"‚ùå Erreur Supabase lors de la r√©cup√©ration du profil :\",\r\n-  //         profileError\r\n-  //       );\r\n-  //       return;\r\n-  //     }\r\n+      if (profileError) {\r\n+        console.error(\r\n+          \"‚ùå Erreur Supabase lors de la r√©cup√©ration du profil :\",\r\n+          profileError\r\n+        );\r\n+        return;\r\n+      }\r\n \r\n-  //     if (!profileData?.stripe_customer_id) {\r\n-  //       console.warn(\"‚ö†Ô∏è Aucun stripe_customer_id trouv√©\");\r\n-  //       return;\r\n-  //     }\r\n+      if (!profileData?.stripe_customer_id) {\r\n+        console.warn(\"‚ö†Ô∏è Aucun stripe_customer_id trouv√©\");\r\n+        return;\r\n+      }\r\n \r\n-  //     try {\r\n-  //       const res = await fetch(\r\n-  //         \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n-  //         {\r\n-  //           method: \"POST\",\r\n-  //           headers: { \"Content-Type\": \"application/json\" },\r\n-  //           body: JSON.stringify({\r\n-  //             stripeCustomerId: profileData.stripe_customer_id,\r\n-  //           }),\r\n-  //         }\r\n-  //       );\r\n-  //       const stripeData = await res.json();\r\n-  //       // console.log(\"üì¶ Donn√©es Stripe re√ßues :\", stripeData);\r\n-  //       setStripeSubscriptions(stripeData.subscriptions || []);\r\n-  //       setStripeInvoices(stripeData.invoices || []);\r\n-  //     } catch (error) {\r\n-  //       console.error(\"‚ùå Erreur lors de l'appel √† Stripe :\", error);\r\n-  //     }\r\n-  //   };\r\n-\r\n-  //   fetchStripeData();\r\n-  // }, [profile]);\r\n-\r\n-  useEffect(() => {\r\n-    console.log(\r\n-      \"üåÄ [Stripe useEffect] D√©clench√© avec :\",\r\n-      profile?.stripe_customer_id\r\n-    );\r\n-\r\n-    if (!profile?.stripe_customer_id) {\r\n-      console.warn(\r\n-        \"‚ö†Ô∏è [Stripe useEffect] Aucun stripe_customer_id dans le profil\"\r\n-      );\r\n-      return;\r\n-    }\r\n-\r\n-    const fetchStripeData = async () => {\r\n-      console.log(\r\n-        \"üöÄ [fetchStripeData] Lancement avec stripeCustomerId :\",\r\n-        profile.stripe_customer_id\r\n-      );\r\n-\r\n       try {\r\n-        const response = await fetch(\r\n+        const res = await fetch(\r\n           \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n           {\r\n             method: \"POST\",\r\n-            headers: {\r\n-              \"Content-Type\": \"application/json\",\r\n-            },\r\n+            headers: { \"Content-Type\": \"application/json\" },\r\n             body: JSON.stringify({\r\n-              stripeCustomerId: profile.stripe_customer_id,\r\n+              stripeCustomerId: profileData.stripe_customer_id,\r\n             }),\r\n           }\r\n         );\r\n-\r\n-        console.log(\"üì© [fetchStripeData] R√©ponse brute re√ßue :\", response);\r\n-\r\n-        if (!response.ok) {\r\n-          console.error(\r\n-            \"‚ùå [fetchStripeData] Erreur HTTP :\",\r\n-            response.status,\r\n-            response.statusText\r\n-          );\r\n-          return;\r\n-        }\r\n-\r\n-        const stripeData = await response.json();\r\n-        console.log(\r\n-          \"‚úÖ [fetchStripeData] Donn√©es Stripe d√©cod√©es :\",\r\n-          stripeData\r\n-        );\r\n-\r\n+        const stripeData = await res.json();\r\n+        // console.log(\"üì¶ Donn√©es Stripe re√ßues :\", stripeData);\r\n         setStripeSubscriptions(stripeData.subscriptions || []);\r\n         setStripeInvoices(stripeData.invoices || []);\r\n-\r\n-        console.log(\r\n-          \"üì¶ [fetchStripeData] Subscriptions et invoices mises √† jour dans le state\"\r\n-        );\r\n       } catch (error) {\r\n-        console.error(\r\n-          \"‚ùå [fetchStripeData] Erreur lors de l'appel √† Stripe :\",\r\n-          error\r\n-        );\r\n+        console.error(\"‚ùå Erreur lors de l'appel √† Stripe :\", error);\r\n       }\r\n     };\r\n \r\n     fetchStripeData();\r\n-  }, [profile?.stripe_customer_id]);\r\n+  }, [profile]);\r\n \r\n   type Profile = {\r\n     id: string;\r\n     email: string;\r\n@@ -708,10 +641,9 @@\n               ))\r\n             )}\r\n           </View>\r\n           {/* Abonnements Stripe */}\r\n-          {/* {stripeSubscriptions.length > 0 && (\r\n-\r\n+          {stripeSubscriptions.length > 0 && (\r\n             <View style={styles.card}>\r\n               <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n               {stripeSubscriptions.map((sub) => (\r\n                 <View key={sub.id} style={styles.item}>\r\n@@ -733,45 +665,9 @@\n               >\r\n                 <Text style={styles.buttonText}>G√©rer mes abonnements</Text>\r\n               </TouchableOpacity>\r\n             </View>\r\n-          )} */}\r\n-          {stripeSubscriptions.length > 0 && (\r\n-            <View style={styles.card}>\r\n-              <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n-              {stripeSubscriptions.map((sub) => {\r\n-                console.log(\"üì¶ Abonnement Stripe :\", sub); // üëà log ici\r\n-\r\n-                return (\r\n-                  <View key={sub.id} style={styles.item}>\r\n-                    <Text>Statut: {getStatusBadge(sub.status)}</Text>\r\n-                    <Text>D√©but: {formatDate(sub.start_date * 1000)}</Text>\r\n-                    {sub.cancel_at && (\r\n-                      <Text>\r\n-                        Fin pr√©vue: {formatDate(sub.cancel_at * 1000)}\r\n-                      </Text>\r\n-                    )}\r\n-                    {sub.items?.data?.map((item: any) => {\r\n-                      console.log(\"üßæ Item d'abonnement :\", item); // üëà log item\r\n-\r\n-                      return (\r\n-                        <Text key={item.id}>\r\n-                          Produit: {item.product_name || \"Nom inconnu\"}\r\n-                        </Text>\r\n-                      );\r\n-                    })}\r\n-                  </View>\r\n-                );\r\n-              })}\r\n-              <TouchableOpacity\r\n-                style={styles.buttonPrimary}\r\n-                onPress={handleOpenStripePortal}\r\n-              >\r\n-                <Text style={styles.buttonText}>G√©rer mes abonnements</Text>\r\n-              </TouchableOpacity>\r\n-            </View>\r\n           )}\r\n-\r\n           {/* Factures Stripe */}\r\n           {stripeInvoices.length > 0 && (\r\n             <View style={styles.card}>\r\n               <Text style={styles.cardTitle}>Mes factures d'abonnement</Text>\r\n"
                },
                {
                    "date": 1754406540360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n             }),\r\n           }\r\n         );\r\n         const stripeData = await res.json();\r\n-        // console.log(\"üì¶ Donn√©es Stripe re√ßues :\", stripeData);\r\n+        console.log(\"üì¶ Donn√©es Stripe re√ßues :\", stripeData);\r\n         setStripeSubscriptions(stripeData.subscriptions || []);\r\n         setStripeInvoices(stripeData.invoices || []);\r\n       } catch (error) {\r\n         console.error(\"‚ùå Erreur lors de l'appel √† Stripe :\", error);\r\n"
                },
                {
                    "date": 1754411110879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n             }),\r\n           }\r\n         );\r\n         const stripeData = await res.json();\r\n-        console.log(\"üì¶ Donn√©es Stripe re√ßues :\", stripeData);\r\n+        // console.log(\"üì¶ Donn√©es Stripe re√ßues :\", stripeData);\r\n         setStripeSubscriptions(stripeData.subscriptions || []);\r\n         setStripeInvoices(stripeData.invoices || []);\r\n       } catch (error) {\r\n         console.error(\"‚ùå Erreur lors de l'appel √† Stripe :\", error);\r\n"
                },
                {
                    "date": 1754844193650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n       }\r\n \r\n       try {\r\n         const res = await fetch(\r\n-          \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n+          \"https://mon-backend-node-henna.vercel.app/api/get-stripe-data\",\r\n           {\r\n             method: \"POST\",\r\n             headers: { \"Content-Type\": \"application/json\" },\r\n             body: JSON.stringify({\r\n@@ -287,9 +287,9 @@\n         frontendUrl: process.env.EXPO_PUBLIC_APP_URL || undefined,\r\n         // frontendUrl: window.location.origin, // üî• c‚Äôest ici\r\n       };\r\n       const res = await fetch(\r\n-        \"https://mon-backend-node.vercel.app/api/disable-account\",\r\n+        \"https://mon-backend-node-henna.vercel.app/api/disable-account\",\r\n         {\r\n           method: \"POST\",\r\n           headers: { \"Content-Type\": \"application/json\" },\r\n           body: JSON.stringify(payload),\r\n"
                },
                {
                    "date": 1754844201113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -348,9 +348,9 @@\n               try {\r\n                 // Partie remboursement Stripe\r\n                 if (paymentIntentId && userEmail) {\r\n                   const res = await fetch(\r\n-                    \"https://mon-backend-node.vercel.app/api/refund-stripe-payment\",\r\n+                    \"https://mon-backend-node-henna.vercel.app/api/refund-stripe-payment\",\r\n                     {\r\n                       method: \"POST\",\r\n                       headers: { \"Content-Type\": \"application/json\" },\r\n                       body: JSON.stringify({\r\n"
                },
                {
                    "date": 1754844209454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,895 @@\n+import { useNavigation } from \"@react-navigation/native\";\r\n+import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\n+// import { Session } from \"@supabase/supabase-js\";\r\n+\r\n+import { Session } from \"@supabase/supabase-js\";\r\n+import { format } from \"date-fns\";\r\n+import { fr } from \"date-fns/locale\";\r\n+import { useRouter } from \"expo-router\";\r\n+import React, { useCallback, useEffect, useState } from \"react\";\r\n+import {\r\n+  ActivityIndicator,\r\n+  Alert,\r\n+  Linking,\r\n+  SafeAreaView,\r\n+  ScrollView,\r\n+  StyleSheet,\r\n+  Text,\r\n+  TouchableOpacity,\r\n+  View,\r\n+} from \"react-native\";\r\n+import Toast from \"react-native-toast-message\";\r\n+import ProfileEditForm from \"../../src/components/dashboard/ProfileEditForm\";\r\n+import Footer from \"../../src/components/Footer\";\r\n+import { Button } from \"../../src/components/ui/button\";\r\n+import { useUserData } from \"../../src/hooks/useUserData\";\r\n+import { supabase } from \"../../src/integrations/supabase/client\";\r\n+import type { RootStackParamList } from \"../../src/navigation/types\";\r\n+import { humanizeReservationType } from \"../../src/utils/humanize\";\r\n+import AdminDashboard from \"./AdminDashboard\";\r\n+\r\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n+\r\n+const Dashboard = () => {\r\n+  const navigation = useNavigation<NavigationProp>();\r\n+  const router = useRouter();\r\n+  const [isAdmin, setIsAdmin] = useState<boolean | null>(null);\r\n+  const [documents, setDocuments] = useState<any[]>([]);\r\n+  const [reservations, setReservations] = useState<any[]>([]);\r\n+  const [stripeSubscriptions, setStripeSubscriptions] = useState<any[]>([]);\r\n+  const [stripeInvoices, setStripeInvoices] = useState<any[]>([]);\r\n+  const [isEditingProfile, setIsEditingProfile] = useState(false);\r\n+  const [loadingDocuments, setLoadingDocuments] = useState(false);\r\n+  const [loadingReservations, setLoadingReservations] = useState(true);\r\n+  // const [session, setSession] = useState<Session | null>(null);\r\n+  const [initialLoadComplete, setInitialLoadComplete] = useState(false);\r\n+  // const session = useSession();\r\n+  // const [session, setSession] = useState<any>(null);\r\n+\r\n+  const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n+\r\n+  const [session, setSession] = useState<Session | null>(null);\r\n+  const [sessionChecked, setSessionChecked] = useState(false);\r\n+\r\n+  const {\r\n+    profile,\r\n+    loading: userDataLoading,\r\n+    error: userDataError,\r\n+    updateProfile,\r\n+  } = useUserData(session);\r\n+\r\n+  // Chargement initial (documents + r√©servations)\r\n+  const loadInitialData = async (userId: string) => {\r\n+    try {\r\n+      const { data: profileData, error: profileError } = await supabase\r\n+        .from(\"profiles\")\r\n+        .select(\"*\")\r\n+        .eq(\"id\", userId)\r\n+        .single();\r\n+\r\n+      // console.log(\"üë§ Profil r√©cup√©r√© :\", profileData);\r\n+\r\n+      if (profileError) throw profileError;\r\n+\r\n+      setIsAdmin(profileData?.is_admin ?? false);\r\n+\r\n+      await Promise.all([loadDocuments(userId), loadReservations(userId)]);\r\n+    } catch (error) {\r\n+      console.error(\"Error loading initial data:\", error);\r\n+      throw error;\r\n+    }\r\n+  };\r\n+\r\n+  const loadDocuments = async (userId: string) => {\r\n+    if (isAdmin) return;\r\n+\r\n+    setLoadingDocuments(true);\r\n+    try {\r\n+      const { data, error } = await supabase\r\n+        .from(\"user_documents\")\r\n+        .select(\"*\")\r\n+        .eq(\"user_id\", userId)\r\n+        .order(\"uploaded_at\", { ascending: false });\r\n+\r\n+      if (error) throw error;\r\n+      setDocuments(data || []);\r\n+    } finally {\r\n+      setLoadingDocuments(false);\r\n+    }\r\n+  };\r\n+\r\n+  const loadReservations = async (userId: string) => {\r\n+    setLoadingReservations(true);\r\n+    try {\r\n+      const { data, error } = await supabase\r\n+        .from(\"reservations\")\r\n+        .select(\"*\")\r\n+        .eq(\"user_id\", userId)\r\n+        .order(\"reservation_date\", { ascending: false });\r\n+\r\n+      if (error) throw error;\r\n+      setReservations(data || []);\r\n+    } finally {\r\n+      setLoadingReservations(false);\r\n+    }\r\n+  };\r\n+\r\n+  // // V√©rification de la session et chargement initial\r\n+  // useEffect(() => {\r\n+  //   const checkAndLoadData = async () => {\r\n+  //     try {\r\n+  //       if (!session) {\r\n+  //         router.push(\"/(app)/Login?redirect=Dashboard\");\r\n+  //         return;\r\n+  //       }\r\n+\r\n+  //       await loadInitialData(session.user.id);\r\n+  //     } catch (error) {\r\n+  //       console.error(\"Initial load error:\", error);\r\n+  //       router.push(\"/(app)/Login?redirect=Dashboard\");\r\n+  //     } finally {\r\n+  //       setInitialLoadComplete(true);\r\n+  //     }\r\n+  //   };\r\n+\r\n+  //   checkAndLoadData();\r\n+\r\n+  //   const {\r\n+  //     data: { subscription },\r\n+  //   } = supabase.auth.onAuthStateChange((event) => {\r\n+  //     if (event === \"SIGNED_OUT\") {\r\n+  //       router.push(\"/(app)/Login?redirect=Dashboard\");\r\n+  //     }\r\n+  //   });\r\n+\r\n+  //   return () => subscription.unsubscribe();\r\n+  // }, [navigation, session]);\r\n+\r\n+  // // Session listener\r\n+  // useEffect(() => {\r\n+  //   supabase.auth.getSession().then(({ data: { session } }) => {\r\n+  //     setSession(session);\r\n+  //   });\r\n+\r\n+  //   const {\r\n+  //     data: { subscription },\r\n+  //   } = supabase.auth.onAuthStateChange((_event, session) => {\r\n+  //     setSession(session);\r\n+  //   });\r\n+\r\n+  //   return () => subscription.unsubscribe();\r\n+  // }, []);\r\n+\r\n+  // V√©rification de la session et chargement initial\r\n+  useEffect(() => {\r\n+    const checkAndLoadData = async () => {\r\n+      if (!sessionChecked) return; // ‚õîÔ∏è Attendre que la session soit v√©rifi√©e\r\n+\r\n+      try {\r\n+        if (!session) {\r\n+          router.push(\"/(app)/Login?redirect=Dashboard\");\r\n+          return;\r\n+        }\r\n+\r\n+        await loadInitialData(session.user.id);\r\n+      } catch (error) {\r\n+        console.error(\"Initial load error:\", error);\r\n+        router.push(\"/(app)/Login?redirect=Dashboard\");\r\n+      } finally {\r\n+        setInitialLoadComplete(true);\r\n+      }\r\n+    };\r\n+\r\n+    checkAndLoadData();\r\n+\r\n+    const {\r\n+      data: { subscription },\r\n+    } = supabase.auth.onAuthStateChange((event) => {\r\n+      if (event === \"SIGNED_OUT\") {\r\n+        router.push(\"/(app)/Login?redirect=Dashboard\");\r\n+      }\r\n+    });\r\n+\r\n+    return () => subscription.unsubscribe();\r\n+  }, [sessionChecked, session]);\r\n+\r\n+  // R√©cup√©ration initiale de la session\r\n+  useEffect(() => {\r\n+    supabase.auth.getSession().then(({ data: { session } }) => {\r\n+      setSession(session);\r\n+      setSessionChecked(true); // ‚úÖ Session bien v√©rifi√©e\r\n+    });\r\n+\r\n+    const {\r\n+      data: { subscription },\r\n+    } = supabase.auth.onAuthStateChange((_event, session) => {\r\n+      setSession(session);\r\n+    });\r\n+\r\n+    return () => subscription.unsubscribe();\r\n+  }, []);\r\n+\r\n+  // üéØ Stripe uniquement d√©clench√© par profile\r\n+  useEffect(() => {\r\n+    const fetchStripeData = async () => {\r\n+      if (!profile?.id) return;\r\n+\r\n+      const { data: profileData, error: profileError } = await supabase\r\n+        .from(\"profiles\")\r\n+        .select(\"stripe_customer_id\")\r\n+        .eq(\"id\", profile.id)\r\n+        .maybeSingle();\r\n+\r\n+      if (profileError) {\r\n+        console.error(\r\n+          \"‚ùå Erreur Supabase lors de la r√©cup√©ration du profil :\",\r\n+          profileError\r\n+        );\r\n+        return;\r\n+      }\r\n+\r\n+      if (!profileData?.stripe_customer_id) {\r\n+        console.warn(\"‚ö†Ô∏è Aucun stripe_customer_id trouv√©\");\r\n+        return;\r\n+      }\r\n+\r\n+      try {\r\n+        const res = await fetch(\r\n+          \"https://mon-backend-node-henna.vercel.app/api/get-stripe-data\",\r\n+          {\r\n+            method: \"POST\",\r\n+            headers: { \"Content-Type\": \"application/json\" },\r\n+            body: JSON.stringify({\r\n+              stripeCustomerId: profileData.stripe_customer_id,\r\n+            }),\r\n+          }\r\n+        );\r\n+        const stripeData = await res.json();\r\n+        // console.log(\"üì¶ Donn√©es Stripe re√ßues :\", stripeData);\r\n+        setStripeSubscriptions(stripeData.subscriptions || []);\r\n+        setStripeInvoices(stripeData.invoices || []);\r\n+      } catch (error) {\r\n+        console.error(\"‚ùå Erreur lors de l'appel √† Stripe :\", error);\r\n+      }\r\n+    };\r\n+\r\n+    fetchStripeData();\r\n+  }, [profile]);\r\n+\r\n+  type Profile = {\r\n+    id: string;\r\n+    email: string;\r\n+    first_name?: string;\r\n+    last_name?: string;\r\n+  };\r\n+\r\n+  const handleDeleteAccount = useCallback(() => {\r\n+    if (!profile || !profile.id || !profile.email) {\r\n+      // console.log(\"‚ùå [handleDeleteAccount] Profil incomplet ou null\");\r\n+      Toast.show({\r\n+        type: \"error\",\r\n+        text1: \"Erreur\",\r\n+        text2: \"Impossible de r√©cup√©rer votre profil.\",\r\n+      });\r\n+      return;\r\n+    }\r\n+\r\n+    setShowConfirmModal(true);\r\n+  }, [profile]);\r\n+\r\n+  const confirmDeleteAccount = async (profile: any) => {\r\n+    try {\r\n+      const payload = {\r\n+        id: profile.id,\r\n+        email: profile.email,\r\n+        first_name: profile.first_name || undefined,\r\n+        last_name: profile.last_name || undefined,\r\n+        frontendUrl: process.env.EXPO_PUBLIC_APP_URL || undefined,\r\n+        // frontendUrl: window.location.origin, // üî• c‚Äôest ici\r\n+      };\r\n+      const res = await fetch(\r\n+        \"https://mon-backend-node-henna.vercel.app/api/disable-account\",\r\n+        {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/json\" },\r\n+          body: JSON.stringify(payload),\r\n+        }\r\n+      );\r\n+\r\n+      if (!res.ok) throw new Error(\"Failed to disable account\");\r\n+\r\n+      await supabase.auth.signOut();\r\n+\r\n+      Toast.show({\r\n+        type: \"success\",\r\n+        text1: \"Compte d√©sactiv√©\",\r\n+        text2: \"Vous avez √©t√© d√©connect√©.\",\r\n+      });\r\n+\r\n+      router.push(\"/(app)/Login?redirect=Dashboard\");\r\n+    } catch (err) {\r\n+      console.error(\"‚ùó Erreur dans confirmDeleteAccount :\", err);\r\n+      Toast.show({\r\n+        type: \"error\",\r\n+        text1: \"Erreur\",\r\n+        text2: \"Une erreur est survenue pendant la suppression.\",\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  const canCancel = useCallback(\r\n+    (reservationDate: string, startTime: string) => {\r\n+      const dateTime = new Date(\r\n+        `${reservationDate}T${startTime || \"09:00:00\"}`\r\n+      );\r\n+      const now = new Date();\r\n+      const diff = dateTime.getTime() - now.getTime();\r\n+      return diff > 48 * 60 * 60 * 1000; // 48h en ms\r\n+    },\r\n+    []\r\n+  );\r\n+\r\n+  const handleCancelReservation = useCallback(\r\n+    async (\r\n+      id: string,\r\n+      paymentIntentId?: string,\r\n+      userEmail?: string,\r\n+      reservationDate?: string,\r\n+      reservationType?: string\r\n+    ) => {\r\n+      Alert.alert(\r\n+        \"Confirmation\",\r\n+        \"Voulez-vous vraiment annuler cette r√©servation ?\",\r\n+        [\r\n+          { text: \"Non\", style: \"cancel\" },\r\n+          {\r\n+            text: \"Oui\",\r\n+            onPress: async () => {\r\n+              try {\r\n+                // Partie remboursement Stripe\r\n+                if (paymentIntentId && userEmail) {\r\n+                  const res = await fetch(\r\n+                    \"https://mon-backend-node-henna.vercel.app/api/refund-stripe-payment\",\r\n+                    {\r\n+                      method: \"POST\",\r\n+                      headers: { \"Content-Type\": \"application/json\" },\r\n+                      body: JSON.stringify({\r\n+                        paymentIntentId,\r\n+                        userEmail,\r\n+                        reservationDate,\r\n+                        reservationType,\r\n+                      }),\r\n+                    }\r\n+                  );\r\n+\r\n+                  if (!res.ok) {\r\n+                    throw new Error(\"Refund failed\");\r\n+                  }\r\n+                }\r\n+\r\n+                // Suppression en base\r\n+                const { error } = await supabase\r\n+                  .from(\"reservations\")\r\n+                  .delete()\r\n+                  .eq(\"id\", id);\r\n+\r\n+                if (error) throw error;\r\n+\r\n+                setReservations((prev) => prev.filter((r) => r.id !== id));\r\n+                Alert.alert(\"Succ√®s\", \"R√©servation annul√©e\");\r\n+              } catch (error) {\r\n+                console.error(\"Cancel error:\", error);\r\n+                Alert.alert(\"Erreur\", \"Une erreur est survenue\");\r\n+              }\r\n+            },\r\n+          },\r\n+        ]\r\n+      );\r\n+    },\r\n+    []\r\n+  );\r\n+\r\n+  const handleOpenStripePortal = useCallback(async () => {\r\n+    if (!profile?.id) return;\r\n+\r\n+    try {\r\n+      const { data: profileData, error: profileError } = await supabase\r\n+        .from(\"profiles\")\r\n+        .select(\"stripe_customer_id\")\r\n+        .eq(\"id\", profile.id)\r\n+        .single();\r\n+\r\n+      if (profileError || !profileData?.stripe_customer_id) {\r\n+        throw new Error(\"No Stripe customer ID\");\r\n+      }\r\n+\r\n+      const res = await fetch(\r\n+        \"https://mon-backend-node-henna.vercel.app/api/create-stripe-portal-session\",\r\n+        {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/json\" },\r\n+          body: JSON.stringify({\r\n+            stripeCustomerId: profileData.stripe_customer_id,\r\n+          }),\r\n+        }\r\n+      );\r\n+\r\n+      const data = await res.json();\r\n+      if (!data.url) {\r\n+        throw new Error(\"No portal URL\");\r\n+      }\r\n+\r\n+      await Linking.openURL(data.url);\r\n+    } catch (error) {\r\n+      console.error(\"Stripe portal error:\", error);\r\n+      Alert.alert(\"Erreur\", \"Impossible d'ouvrir le portail Stripe\");\r\n+    }\r\n+  }, [profile]);\r\n+\r\n+  const formatDate = useCallback((dateInput: string | number): string => {\r\n+    try {\r\n+      const date = new Date(dateInput);\r\n+      return format(date, \"dd/MM/yyyy\", { locale: fr });\r\n+    } catch {\r\n+      return String(dateInput);\r\n+    }\r\n+  }, []);\r\n+\r\n+  const getStatusBadge = useCallback((status: string) => {\r\n+    const statusStyles = {\r\n+      active: { backgroundColor: \"green\", text: \"Actif\" },\r\n+      option: { backgroundColor: \"orange\", text: \"En option\" },\r\n+      pending: { backgroundColor: \"blue\", text: \"En attente\" },\r\n+      default: { backgroundColor: \"gray\", text: status },\r\n+    };\r\n+\r\n+    const style =\r\n+      statusStyles[status as keyof typeof statusStyles] || statusStyles.default;\r\n+\r\n+    return (\r\n+      <Text\r\n+        style={{\r\n+          backgroundColor: style.backgroundColor,\r\n+          color: \"white\",\r\n+          paddingVertical: 4,\r\n+          paddingHorizontal: 8,\r\n+          borderRadius: 4,\r\n+          overflow: \"hidden\",\r\n+          fontSize: 12,\r\n+        }}\r\n+      >\r\n+        {style.text}\r\n+      </Text>\r\n+    );\r\n+  }, []);\r\n+\r\n+  if (!initialLoadComplete || userDataLoading) {\r\n+    return (\r\n+      <SafeAreaView style={{ flex: 1, justifyContent: \"center\" }}>\r\n+        <ActivityIndicator size=\"large\" color=\"#5cb9bc\" />\r\n+      </SafeAreaView>\r\n+    );\r\n+  }\r\n+\r\n+  if (userDataError) {\r\n+    return (\r\n+      <SafeAreaView\r\n+        style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}\r\n+      >\r\n+        <Text style={{ color: \"red\", fontSize: 18, marginBottom: 20 }}>\r\n+          Une erreur est survenue lors du chargement de vos donn√©es\r\n+        </Text>\r\n+        <Button onPress={() => router.push(\"/(app)/Login?redirect=Dashboard\")}>\r\n+          Retourner √† l'accueil\r\n+        </Button>\r\n+      </SafeAreaView>\r\n+    );\r\n+  }\r\n+\r\n+  if (isEditingProfile) {\r\n+    return (\r\n+      <View style={{ flex: 1, position: \"relative\" }}>\r\n+        <ScrollView\r\n+          style={styles.container1}\r\n+          contentContainerStyle={{\r\n+            flexGrow: 1,\r\n+            justifyContent: \"space-between\",\r\n+          }}\r\n+        >\r\n+          <ProfileEditForm\r\n+            profile={\r\n+              profile\r\n+                ? {\r\n+                    first_name: profile.first_name || \"\",\r\n+                    last_name: profile.last_name || \"\",\r\n+                    company_name: profile.company_name || \"\",\r\n+                    phone: profile.phone || \"\",\r\n+                  }\r\n+                : null\r\n+            }\r\n+            onUpdate={updateProfile}\r\n+            onCancel={() => setIsEditingProfile(false)}\r\n+          />\r\n+          <Footer />\r\n+        </ScrollView>\r\n+      </View>\r\n+    );\r\n+  }\r\n+\r\n+  return (\r\n+    <View style={{ flex: 1, backgroundColor: \"#f9fafb\" }}>\r\n+      <ScrollView\r\n+        style={styles.container1}\r\n+        contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n+      >\r\n+        <View style={{ padding: 16 }}>\r\n+          <Text style={styles.title}>Tableau de bord</Text>\r\n+          <Text style={styles.subtitle}>\r\n+            Bienvenue sur votre espace personnel Lys&Co,{\" \"}\r\n+            {profile?.first_name || profile?.email}\r\n+          </Text>\r\n+          {/* Mon Profil */}\r\n+          <View style={styles.card}>\r\n+            <Text style={styles.cardTitle}>Mon Profil</Text>\r\n+            <View style={styles.row}>\r\n+              <View style={styles.column}>\r\n+                <Text style={styles.label}>Nom</Text>\r\n+                <Text style={styles.value}>\r\n+                  {profile?.first_name} {profile?.last_name}\r\n+                </Text>\r\n+                <Text style={styles.label}>Email</Text>\r\n+                <Text style={styles.value}>{profile?.email}</Text>\r\n+              </View>\r\n+              <View style={styles.column}>\r\n+                <Text style={styles.label}>Entreprise</Text>\r\n+                <Text style={styles.value}>\r\n+                  {profile?.company_name || \"Non renseign√©\"}\r\n+                </Text>\r\n+                <Text style={styles.label}>T√©l√©phone</Text>\r\n+                <Text style={styles.value}>\r\n+                  {profile?.phone || \"Non renseign√©\"}\r\n+                </Text>\r\n+              </View>\r\n+            </View>\r\n+            <TouchableOpacity\r\n+              style={styles.buttonOutline}\r\n+              onPress={() => setIsEditingProfile(true)}\r\n+            >\r\n+              <Text style={styles.buttonOutlineText}>Modifier mon profil</Text>\r\n+            </TouchableOpacity>\r\n+\r\n+            <Text style={styles.dangerTitle}>Suppression de compte</Text>\r\n+            <Text style={styles.smallText}>\r\n+              Cette action est irr√©versible. Toutes vos donn√©es seront\r\n+              supprim√©es.\r\n+            </Text>\r\n+            <TouchableOpacity\r\n+              style={styles.buttonDanger}\r\n+              onPress={handleDeleteAccount}\r\n+            >\r\n+              <Text style={styles.buttonText}>\r\n+                Supprimer d√©finitivement mon compte\r\n+              </Text>\r\n+            </TouchableOpacity>\r\n+          </View>\r\n+          {isAdmin && (\r\n+            <View style={{ marginTop: 32 }}>\r\n+              <AdminDashboard />\r\n+            </View>\r\n+          )}\r\n+          {/* Documents */}\r\n+          <View style={styles.card}>\r\n+            <Text style={styles.cardTitle}>Mes documents</Text>\r\n+            {loadingDocuments ? (\r\n+              <ActivityIndicator />\r\n+            ) : documents.length === 0 ? (\r\n+              <Text>Aucun document disponible.</Text>\r\n+            ) : (\r\n+              documents.map((doc) => (\r\n+                <View key={doc.id} style={styles.item}>\r\n+                  <Text>{doc.file_name}</Text>\r\n+                  <Text>{new Date(doc.uploaded_at).toLocaleDateString()}</Text>\r\n+                  <TouchableOpacity\r\n+                    onPress={() => Linking.openURL(doc.file_url)}\r\n+                  >\r\n+                    <Text style={styles.link}>T√©l√©charger</Text>\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+              ))\r\n+            )}\r\n+          </View>\r\n+\r\n+          {/* R√©servations */}\r\n+          <View style={styles.card}>\r\n+            <Text style={styles.cardTitle}>Mes r√©servations de salles</Text>\r\n+            {loadingReservations ? (\r\n+              <ActivityIndicator />\r\n+            ) : reservations.length === 0 ? (\r\n+              <Text>Aucune r√©servation trouv√©e.</Text>\r\n+            ) : (\r\n+              reservations.map((res) => (\r\n+                <View key={res.id} style={styles.item}>\r\n+                  <Text>Date: {formatDate(res.reservation_date)}</Text>\r\n+                  <Text>\r\n+                    Heure:{\" \"}\r\n+                    {res.start_time\r\n+                      ? `${res.start_time} - ${res.end_time}`\r\n+                      : \"Journ√©e/Demi-journ√©e\"}\r\n+                  </Text>\r\n+                  <Text>\r\n+                    Type: {humanizeReservationType(res.reservation_type)}\r\n+                  </Text>\r\n+                  <Text>Statut: {getStatusBadge(res.status)}</Text>\r\n+                  {res.status !== \"cancelled\" &&\r\n+                    canCancel(res.reservation_date, res.start_time) && (\r\n+                      <TouchableOpacity\r\n+                        style={styles.buttonDanger}\r\n+                        onPress={() =>\r\n+                          handleCancelReservation(\r\n+                            res.id,\r\n+                            res.payment_intent_id,\r\n+                            profile?.email,\r\n+                            res.reservation_date,\r\n+                            res.reservation_type\r\n+                          )\r\n+                        }\r\n+                      >\r\n+                        <Text style={styles.buttonText}>Annuler</Text>\r\n+                      </TouchableOpacity>\r\n+                    )}\r\n+                </View>\r\n+              ))\r\n+            )}\r\n+          </View>\r\n+          {/* Abonnements Stripe */}\r\n+          {stripeSubscriptions.length > 0 && (\r\n+            <View style={styles.card}>\r\n+              <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n+              {stripeSubscriptions.map((sub) => (\r\n+                <View key={sub.id} style={styles.item}>\r\n+                  <Text>Statut: {getStatusBadge(sub.status)}</Text>\r\n+                  <Text>D√©but: {formatDate(sub.start_date * 1000)}</Text>\r\n+                  {sub.cancel_at && (\r\n+                    <Text>Fin pr√©vue: {formatDate(sub.cancel_at * 1000)}</Text>\r\n+                  )}\r\n+                  {sub.items?.data?.map((item: any) => (\r\n+                    <Text key={item.id}>\r\n+                      Produit: {item.product_name || \"Nom inconnu\"}\r\n+                    </Text>\r\n+                  ))}\r\n+                </View>\r\n+              ))}\r\n+              <TouchableOpacity\r\n+                style={styles.buttonPrimary}\r\n+                onPress={handleOpenStripePortal}\r\n+              >\r\n+                <Text style={styles.buttonText}>G√©rer mes abonnements</Text>\r\n+              </TouchableOpacity>\r\n+            </View>\r\n+          )}\r\n+          {/* Factures Stripe */}\r\n+          {stripeInvoices.length > 0 && (\r\n+            <View style={styles.card}>\r\n+              <Text style={styles.cardTitle}>Mes factures d'abonnement</Text>\r\n+              {stripeInvoices.map((invoice) => (\r\n+                <View key={invoice.id} style={styles.item}>\r\n+                  <Text>\r\n+                    Montant pay√©: {(invoice.amount_paid / 100).toFixed(2)} ‚Ç¨\r\n+                  </Text>\r\n+                  <Text>Date: {formatDate(invoice.created * 1000)}</Text>\r\n+                  {invoice.lines?.data?.map((line: any) => (\r\n+                    <Text key={line.id}>\r\n+                      Produit: {line.product_name || \"Nom inconnu\"}\r\n+                    </Text>\r\n+                  ))}\r\n+                  <TouchableOpacity\r\n+                    onPress={() => Linking.openURL(invoice.invoice_pdf)}\r\n+                  >\r\n+                    <Text style={styles.link}>T√©l√©charger la facture</Text>\r\n+                  </TouchableOpacity>\r\n+                </View>\r\n+              ))}\r\n+            </View>\r\n+          )}\r\n+        </View>\r\n+\r\n+        <Footer />\r\n+      </ScrollView>\r\n+      {showConfirmModal && (\r\n+        <View\r\n+          style={{\r\n+            position: \"absolute\",\r\n+            top: 0,\r\n+            left: 0,\r\n+            right: 0,\r\n+            bottom: 0,\r\n+            backgroundColor: \"rgba(0,0,0,0.5)\",\r\n+            justifyContent: \"center\",\r\n+            alignItems: \"center\",\r\n+          }}\r\n+        >\r\n+          <View\r\n+            style={{\r\n+              backgroundColor: \"white\",\r\n+              padding: 20,\r\n+              borderRadius: 10,\r\n+              width: \"80%\",\r\n+              alignItems: \"center\",\r\n+            }}\r\n+          >\r\n+            <Text\r\n+              style={{ fontSize: 18, fontWeight: \"bold\", marginBottom: 10 }}\r\n+            >\r\n+              Confirmation\r\n+            </Text>\r\n+            <Text style={{ marginBottom: 20 }}>\r\n+              Voulez-vous vraiment d√©sactiver votre compte ?\r\n+            </Text>\r\n+            <View style={{ flexDirection: \"row\" }}>\r\n+              <TouchableOpacity\r\n+                style={{ padding: 10, marginRight: 10 }}\r\n+                onPress={() => setShowConfirmModal(false)}\r\n+              >\r\n+                <Text style={{ color: \"#4f46e5\" }}>Annuler</Text>\r\n+              </TouchableOpacity>\r\n+              <TouchableOpacity\r\n+                style={{ padding: 10 }}\r\n+                onPress={() => {\r\n+                  setShowConfirmModal(false);\r\n+                  confirmDeleteAccount(profile);\r\n+                }}\r\n+              >\r\n+                <Text style={{ color: \"#dc2626\" }}>Confirmer</Text>\r\n+              </TouchableOpacity>\r\n+            </View>\r\n+          </View>\r\n+        </View>\r\n+      )}\r\n+    </View>\r\n+  );\r\n+};\r\n+\r\n+const styles = StyleSheet.create({\r\n+  container1: {\r\n+    flex: 1,\r\n+  },\r\n+  container: {\r\n+    padding: 16,\r\n+    paddingBottom: 32,\r\n+  },\r\n+  title: {\r\n+    fontSize: 24,\r\n+    fontWeight: \"bold\",\r\n+    marginBottom: 12,\r\n+  },\r\n+  subtitle: {\r\n+    fontSize: 16,\r\n+    marginBottom: 20,\r\n+  },\r\n+  card: {\r\n+    backgroundColor: \"#fff\",\r\n+    borderRadius: 8,\r\n+    padding: 16,\r\n+    marginBottom: 16,\r\n+    shadowColor: \"#000\",\r\n+    shadowOffset: { width: 0, height: 2 },\r\n+    shadowOpacity: 0.1,\r\n+    shadowRadius: 4,\r\n+    elevation: 2,\r\n+  },\r\n+  cardTitle: {\r\n+    fontSize: 18,\r\n+    fontWeight: \"bold\",\r\n+    marginBottom: 12,\r\n+  },\r\n+  row: {\r\n+    flexDirection: \"row\",\r\n+    justifyContent: \"space-between\",\r\n+  },\r\n+  column: {\r\n+    flex: 1,\r\n+  },\r\n+  label: {\r\n+    fontSize: 14,\r\n+    color: \"#666\",\r\n+  },\r\n+  value: {\r\n+    fontSize: 16,\r\n+    fontWeight: \"500\",\r\n+    marginBottom: 8,\r\n+  },\r\n+  buttonPrimary: {\r\n+    backgroundColor: \"#4f46e5\",\r\n+    padding: 12,\r\n+    borderRadius: 6,\r\n+    marginTop: 8,\r\n+    alignItems: \"center\",\r\n+  },\r\n+  buttonOutline: {\r\n+    borderColor: \"#4f46e5\",\r\n+    borderWidth: 1,\r\n+    padding: 12,\r\n+    borderRadius: 6,\r\n+    marginTop: 8,\r\n+    alignItems: \"center\",\r\n+  },\r\n+  buttonDanger: {\r\n+    backgroundColor: \"#dc2626\",\r\n+    padding: 12,\r\n+    borderRadius: 6,\r\n+    marginTop: 8,\r\n+    alignItems: \"center\",\r\n+  },\r\n+  buttonText: {\r\n+    color: \"#fff\",\r\n+    fontWeight: \"bold\",\r\n+  },\r\n+  buttonOutlineText: {\r\n+    color: \"#4f46e5\",\r\n+    fontWeight: \"bold\",\r\n+  },\r\n+  item: {\r\n+    marginBottom: 12,\r\n+  },\r\n+  link: {\r\n+    color: \"#2563eb\",\r\n+    textDecorationLine: \"underline\",\r\n+  },\r\n+  dangerTitle: {\r\n+    color: \"#dc2626\",\r\n+    fontWeight: \"bold\",\r\n+    marginTop: 12,\r\n+  },\r\n+  smallText: {\r\n+    fontSize: 12,\r\n+    color: \"#666\",\r\n+    marginBottom: 8,\r\n+  },\r\n+  menuOverlay: {\r\n+    position: \"absolute\",\r\n+    top: 0,\r\n+    bottom: 0,\r\n+    left: 0,\r\n+    right: 0,\r\n+    backgroundColor: \"#fff\",\r\n+    zIndex: 9999,\r\n+  },\r\n+  menuContent: {\r\n+    paddingTop: 60,\r\n+    paddingHorizontal: 20,\r\n+  },\r\n+  menuCloseButton: {\r\n+    position: \"absolute\",\r\n+    top: 20,\r\n+    right: 20,\r\n+    padding: 10,\r\n+  },\r\n+  menuCloseIcon: {\r\n+    fontSize: 28,\r\n+    color: \"#333\",\r\n+  },\r\n+  menuItem: {\r\n+    paddingVertical: 12,\r\n+    borderBottomWidth: 1,\r\n+    borderColor: \"#eee\",\r\n+  },\r\n+  menuItemText: {\r\n+    fontSize: 18,\r\n+    color: \"#333\",\r\n+  },\r\n+  menuAuthSection: {\r\n+    marginTop: 30,\r\n+  },\r\n+  menuButton: {\r\n+    paddingVertical: 12,\r\n+    alignItems: \"center\",\r\n+    borderRadius: 6,\r\n+    marginBottom: 12,\r\n+    borderWidth: 1,\r\n+  },\r\n+  menuButtonText: {\r\n+    fontWeight: \"bold\",\r\n+  },\r\n+});\r\n+\r\n+export default Dashboard;\r\n"
                }
            ],
            "date": 1754300112326,
            "name": "Commit-0",
            "content": "import { useNavigation } from \"@react-navigation/native\";\r\nimport type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\n// import { Session } from \"@supabase/supabase-js\";\r\n\r\nimport { format } from \"date-fns\";\r\nimport { fr } from \"date-fns/locale\";\r\nimport { useRouter } from \"expo-router\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport {\r\n  ActivityIndicator,\r\n  Alert,\r\n  Linking,\r\n  SafeAreaView,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Text,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\nimport Toast from \"react-native-toast-message\";\r\nimport AdminDashboard from \"../(app)/AdminDashboard\";\r\nimport ProfileEditForm from \"../../src/components/dashboard/ProfileEditForm\";\r\nimport Footer from \"../../src/components/Footer\";\r\nimport { Button } from \"../../src/components/ui/button\";\r\nimport { useUserData } from \"../../src/hooks/useUserData\";\r\nimport { supabase } from \"../../src/integrations/supabase/client\";\r\nimport type { RootStackParamList } from \"../../src/navigation/types\";\r\nimport { humanizeReservationType } from \"../../src/utils/humanize\";\r\n\r\ntype NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n\r\nconst Dashboard = () => {\r\n  const navigation = useNavigation<NavigationProp>();\r\n  const router = useRouter();\r\n  const [isAdmin, setIsAdmin] = useState<boolean | null>(null);\r\n  const [documents, setDocuments] = useState<any[]>([]);\r\n  const [reservations, setReservations] = useState<any[]>([]);\r\n  const [stripeSubscriptions, setStripeSubscriptions] = useState<any[]>([]);\r\n  const [stripeInvoices, setStripeInvoices] = useState<any[]>([]);\r\n  const [isEditingProfile, setIsEditingProfile] = useState(false);\r\n  const [loadingDocuments, setLoadingDocuments] = useState(false);\r\n  const [loadingReservations, setLoadingReservations] = useState(true);\r\n  // const [session, setSession] = useState<Session | null>(null);\r\n  const [initialLoadComplete, setInitialLoadComplete] = useState(false);\r\n  // const session = useSession();\r\n  const [session, setSession] = useState<any>(null);\r\n\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n\r\n  // const {\r\n  //   profile,\r\n  //   loading: userDataLoading,\r\n  //   error: userDataError,\r\n  //   updateProfile,\r\n  // } = useUserData();\r\n  const {\r\n    profile,\r\n    loading: userDataLoading,\r\n    error: userDataError,\r\n    updateProfile,\r\n  } = useUserData(session);\r\n\r\n  // const loadInitialData = async (userId: string) => {\r\n  //   try {\r\n  //     // Charger le profil\r\n  //     const { data: profileData, error: profileError } = await supabase\r\n  //       .from(\"profiles\")\r\n  //       .select(\"*\")\r\n  //       .eq(\"id\", userId)\r\n  //       .single();\r\n\r\n  //     console.log(\"üë§ Profil r√©cup√©r√© :\", profileData);\r\n\r\n  //     if (profileError) throw profileError;\r\n\r\n  //     setIsAdmin(profileData?.is_admin ?? false);\r\n\r\n  //     // Charger les donn√©es en parall√®le\r\n  //     await Promise.all([\r\n  //       loadDocuments(userId),\r\n  //       loadReservations(userId),\r\n  //       profileData?.stripe_customer_id\r\n  //         ? loadStripeData(profileData.stripe_customer_id)\r\n  //         : Promise.resolve(),\r\n  //     ]);\r\n  //   } catch (error) {\r\n  //     console.error(\"Error loading initial data:\", error);\r\n  //     throw error;\r\n  //   }\r\n  // };\r\n\r\n  // const loadInitialData = async (userId: string) => {\r\n  //   try {\r\n  //     const { data: profileData, error: profileError } = await supabase\r\n  //       .from(\"profiles\")\r\n  //       .select(\"*\")\r\n  //       .eq(\"id\", userId)\r\n  //       .single();\r\n\r\n  //     if (profileError) throw profileError;\r\n\r\n  //     setIsAdmin(profileData?.is_admin ?? false);\r\n\r\n  //     await Promise.all([loadDocuments(userId), loadReservations(userId)]);\r\n  //   } catch (error) {\r\n  //     console.error(\"‚ùå Erreur lors du chargement initial :\", error);\r\n  //     throw error;\r\n  //   }\r\n  // };\r\n\r\n  // const loadDocuments = async (userId: string) => {\r\n  //   if (isAdmin) return;\r\n\r\n  //   setLoadingDocuments(true);\r\n  //   try {\r\n  //     const { data, error } = await supabase\r\n  //       .from(\"user_documents\")\r\n  //       .select(\"*\")\r\n  //       .eq(\"user_id\", userId)\r\n  //       .order(\"uploaded_at\", { ascending: false });\r\n\r\n  //     if (error) throw error;\r\n  //     setDocuments(data || []);\r\n  //   } finally {\r\n  //     setLoadingDocuments(false);\r\n  //   }\r\n  // };\r\n\r\n  // const loadReservations = async (userId: string) => {\r\n  //   setLoadingReservations(true);\r\n  //   try {\r\n  //     const { data, error } = await supabase\r\n  //       .from(\"reservations\")\r\n  //       .select(\"*\")\r\n  //       .eq(\"user_id\", userId)\r\n  //       .order(\"reservation_date\", { ascending: false });\r\n\r\n  //     if (error) throw error;\r\n  //     setReservations(data || []);\r\n  //   } finally {\r\n  //     setLoadingReservations(false);\r\n  //   }\r\n  // };\r\n\r\n  // const loadStripeData = async (stripeCustomerId: string) => {\r\n  //   try {\r\n  //     const res = await fetch(\r\n  //       \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n  //       {\r\n  //         method: \"POST\",\r\n  //         headers: { \"Content-Type\": \"application/json\" },\r\n  //         body: JSON.stringify({ stripeCustomerId }),\r\n  //       }\r\n  //     );\r\n\r\n  //     if (!res.ok) throw new Error(\"Failed to fetch Stripe data\");\r\n\r\n  //     const stripeData = await res.json();\r\n  //     setStripeSubscriptions(stripeData.subscriptions || []);\r\n  //     setStripeInvoices(stripeData.invoices || []);\r\n  //   } catch (error) {\r\n  //     console.error(\"Error loading Stripe data:\", error);\r\n  //   }\r\n  // };\r\n  // // V√©rification de la session et chargement initial\r\n  // useEffect(() => {\r\n  //   const checkAndLoadData = async () => {\r\n  //     try {\r\n  //       if (!session) {\r\n  //         router.push(\"/(tabs)/Login?redirect=Dashboard\");\r\n  //         return;\r\n  //       }\r\n\r\n  //       await loadInitialData(session.user.id);\r\n  //     } catch (error) {\r\n  //       console.error(\"Initial load error:\", error);\r\n  //       router.push(\"/(tabs)/Login?redirect=Dashboard\");\r\n  //     } finally {\r\n  //       setInitialLoadComplete(true);\r\n  //     }\r\n  //   };\r\n\r\n  //   checkAndLoadData();\r\n\r\n  //   const {\r\n  //     data: { subscription },\r\n  //   } = supabase.auth.onAuthStateChange((event) => {\r\n  //     if (event === \"SIGNED_OUT\") {\r\n  //       router.push(\"/(tabs)/Login?redirect=Dashboard\");\r\n  //     }\r\n  //   });\r\n\r\n  //   return () => {\r\n  //     subscription.unsubscribe();\r\n  //   };\r\n  // }, [navigation, session]);\r\n\r\n  // useEffect(() => {\r\n  //   supabase.auth.getSession().then(({ data: { session } }) => {\r\n  //     setSession(session);\r\n  //   });\r\n\r\n  //   const {\r\n  //     data: { subscription },\r\n  //   } = supabase.auth.onAuthStateChange((_event, session) => {\r\n  //     setSession(session);\r\n  //   });\r\n\r\n  //   return () => subscription.unsubscribe();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   const fetchStripeData = async () => {\r\n  //     if (!profile?.id) return;\r\n\r\n  //     const { data: profileData, error: profileError } = await supabase\r\n  //       .from(\"profiles\")\r\n  //       .select(\"stripe_customer_id\")\r\n  //       .eq(\"id\", profile.id)\r\n  //       .maybeSingle();\r\n\r\n  //     if (profileError) {\r\n  //       console.error(\r\n  //         \"‚ùå Erreur Supabase lors de la r√©cup√©ration du profil :\",\r\n  //         profileError\r\n  //       );\r\n  //       return;\r\n  //     }\r\n\r\n  //     if (!profileData?.stripe_customer_id) {\r\n  //       console.warn(\"‚ö†Ô∏è Aucun stripe_customer_id trouv√©\");\r\n  //       return;\r\n  //     }\r\n\r\n  //     try {\r\n  //       const res = await fetch(\r\n  //         \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n  //         {\r\n  //           method: \"POST\",\r\n  //           headers: { \"Content-Type\": \"application/json\" },\r\n  //           body: JSON.stringify({\r\n  //             stripeCustomerId: profileData.stripe_customer_id,\r\n  //           }),\r\n  //         }\r\n  //       );\r\n  //       const stripeData = await res.json();\r\n  //       console.log(\"üì¶ Donn√©es Stripe re√ßues :\", stripeData);\r\n  //       setStripeSubscriptions(stripeData.subscriptions || []);\r\n  //       setStripeInvoices(stripeData.invoices || []);\r\n  //     } catch (error) {\r\n  //       console.error(\"‚ùå Erreur lors de l'appel √† Stripe :\", error);\r\n  //     }\r\n  //   };\r\n\r\n  //   fetchStripeData();\r\n  // }, [profile]);\r\n\r\n  // Chargement initial (documents + r√©servations)\r\n  const loadInitialData = async (userId: string) => {\r\n    try {\r\n      const { data: profileData, error: profileError } = await supabase\r\n        .from(\"profiles\")\r\n        .select(\"*\")\r\n        .eq(\"id\", userId)\r\n        .single();\r\n\r\n      // console.log(\"üë§ Profil r√©cup√©r√© :\", profileData);\r\n\r\n      if (profileError) throw profileError;\r\n\r\n      setIsAdmin(profileData?.is_admin ?? false);\r\n\r\n      await Promise.all([loadDocuments(userId), loadReservations(userId)]);\r\n    } catch (error) {\r\n      console.error(\"Error loading initial data:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const loadDocuments = async (userId: string) => {\r\n    if (isAdmin) return;\r\n\r\n    setLoadingDocuments(true);\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(\"user_documents\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", userId)\r\n        .order(\"uploaded_at\", { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setDocuments(data || []);\r\n    } finally {\r\n      setLoadingDocuments(false);\r\n    }\r\n  };\r\n\r\n  const loadReservations = async (userId: string) => {\r\n    setLoadingReservations(true);\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(\"reservations\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", userId)\r\n        .order(\"reservation_date\", { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setReservations(data || []);\r\n    } finally {\r\n      setLoadingReservations(false);\r\n    }\r\n  };\r\n\r\n  // V√©rification de la session et chargement initial\r\n  useEffect(() => {\r\n    const checkAndLoadData = async () => {\r\n      try {\r\n        if (!session) {\r\n          router.push(\"/(tabs)/Login?redirect=Dashboard\");\r\n          return;\r\n        }\r\n\r\n        await loadInitialData(session.user.id);\r\n      } catch (error) {\r\n        console.error(\"Initial load error:\", error);\r\n        router.push(\"/(tabs)/Login?redirect=Dashboard\");\r\n      } finally {\r\n        setInitialLoadComplete(true);\r\n      }\r\n    };\r\n\r\n    checkAndLoadData();\r\n\r\n    const {\r\n      data: { subscription },\r\n    } = supabase.auth.onAuthStateChange((event) => {\r\n      if (event === \"SIGNED_OUT\") {\r\n        router.push(\"/(tabs)/Login?redirect=Dashboard\");\r\n      }\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, [navigation, session]);\r\n\r\n  // Session listener\r\n  useEffect(() => {\r\n    supabase.auth.getSession().then(({ data: { session } }) => {\r\n      setSession(session);\r\n    });\r\n\r\n    const {\r\n      data: { subscription },\r\n    } = supabase.auth.onAuthStateChange((_event, session) => {\r\n      setSession(session);\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, []);\r\n\r\n  // üéØ Stripe uniquement d√©clench√© par profile\r\n  useEffect(() => {\r\n    const fetchStripeData = async () => {\r\n      if (!profile?.id) return;\r\n\r\n      const { data: profileData, error: profileError } = await supabase\r\n        .from(\"profiles\")\r\n        .select(\"stripe_customer_id\")\r\n        .eq(\"id\", profile.id)\r\n        .maybeSingle();\r\n\r\n      if (profileError) {\r\n        console.error(\r\n          \"‚ùå Erreur Supabase lors de la r√©cup√©ration du profil :\",\r\n          profileError\r\n        );\r\n        return;\r\n      }\r\n\r\n      if (!profileData?.stripe_customer_id) {\r\n        console.warn(\"‚ö†Ô∏è Aucun stripe_customer_id trouv√©\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const res = await fetch(\r\n          \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n          {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n              stripeCustomerId: profileData.stripe_customer_id,\r\n            }),\r\n          }\r\n        );\r\n        const stripeData = await res.json();\r\n        // console.log(\"üì¶ Donn√©es Stripe re√ßues :\", stripeData);\r\n        setStripeSubscriptions(stripeData.subscriptions || []);\r\n        setStripeInvoices(stripeData.invoices || []);\r\n      } catch (error) {\r\n        console.error(\"‚ùå Erreur lors de l'appel √† Stripe :\", error);\r\n      }\r\n    };\r\n\r\n    fetchStripeData();\r\n  }, [profile]);\r\n\r\n  type Profile = {\r\n    id: string;\r\n    email: string;\r\n    first_name?: string;\r\n    last_name?: string;\r\n  };\r\n\r\n  const handleDeleteAccount = useCallback(() => {\r\n    if (!profile || !profile.id || !profile.email) {\r\n      // console.log(\"‚ùå [handleDeleteAccount] Profil incomplet ou null\");\r\n      Toast.show({\r\n        type: \"error\",\r\n        text1: \"Erreur\",\r\n        text2: \"Impossible de r√©cup√©rer votre profil.\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setShowConfirmModal(true);\r\n  }, [profile]);\r\n\r\n  const confirmDeleteAccount = async (profile: any) => {\r\n    try {\r\n      const payload = {\r\n        id: profile.id,\r\n        email: profile.email,\r\n        first_name: profile.first_name || undefined,\r\n        last_name: profile.last_name || undefined,\r\n        frontendUrl: process.env.EXPO_PUBLIC_APP_URL || undefined,\r\n        // frontendUrl: window.location.origin, // üî• c‚Äôest ici\r\n      };\r\n      const res = await fetch(\r\n        \"https://mon-backend-node.vercel.app/api/disable-account\",\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(payload),\r\n        }\r\n      );\r\n\r\n      if (!res.ok) throw new Error(\"Failed to disable account\");\r\n\r\n      await supabase.auth.signOut();\r\n\r\n      Toast.show({\r\n        type: \"success\",\r\n        text1: \"Compte d√©sactiv√©\",\r\n        text2: \"Vous avez √©t√© d√©connect√©.\",\r\n      });\r\n\r\n      router.push(\"/(tabs)/Login?redirect=Dashboard\");\r\n    } catch (err) {\r\n      console.error(\"‚ùó Erreur dans confirmDeleteAccount :\", err);\r\n      Toast.show({\r\n        type: \"error\",\r\n        text1: \"Erreur\",\r\n        text2: \"Une erreur est survenue pendant la suppression.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const canCancel = useCallback(\r\n    (reservationDate: string, startTime: string) => {\r\n      const dateTime = new Date(\r\n        `${reservationDate}T${startTime || \"09:00:00\"}`\r\n      );\r\n      const now = new Date();\r\n      const diff = dateTime.getTime() - now.getTime();\r\n      return diff > 48 * 60 * 60 * 1000; // 48h en ms\r\n    },\r\n    []\r\n  );\r\n\r\n  const handleCancelReservation = useCallback(\r\n    async (\r\n      id: string,\r\n      paymentIntentId?: string,\r\n      userEmail?: string,\r\n      reservationDate?: string,\r\n      reservationType?: string\r\n    ) => {\r\n      Alert.alert(\r\n        \"Confirmation\",\r\n        \"Voulez-vous vraiment annuler cette r√©servation ?\",\r\n        [\r\n          { text: \"Non\", style: \"cancel\" },\r\n          {\r\n            text: \"Oui\",\r\n            onPress: async () => {\r\n              try {\r\n                // Partie remboursement Stripe\r\n                if (paymentIntentId && userEmail) {\r\n                  const res = await fetch(\r\n                    \"https://mon-backend-node.vercel.app/api/refund-stripe-payment\",\r\n                    {\r\n                      method: \"POST\",\r\n                      headers: { \"Content-Type\": \"application/json\" },\r\n                      body: JSON.stringify({\r\n                        paymentIntentId,\r\n                        userEmail,\r\n                        reservationDate,\r\n                        reservationType,\r\n                      }),\r\n                    }\r\n                  );\r\n\r\n                  if (!res.ok) {\r\n                    throw new Error(\"Refund failed\");\r\n                  }\r\n                }\r\n\r\n                // Suppression en base\r\n                const { error } = await supabase\r\n                  .from(\"reservations\")\r\n                  .delete()\r\n                  .eq(\"id\", id);\r\n\r\n                if (error) throw error;\r\n\r\n                setReservations((prev) => prev.filter((r) => r.id !== id));\r\n                Alert.alert(\"Succ√®s\", \"R√©servation annul√©e\");\r\n              } catch (error) {\r\n                console.error(\"Cancel error:\", error);\r\n                Alert.alert(\"Erreur\", \"Une erreur est survenue\");\r\n              }\r\n            },\r\n          },\r\n        ]\r\n      );\r\n    },\r\n    []\r\n  );\r\n\r\n  const handleOpenStripePortal = useCallback(async () => {\r\n    if (!profile?.id) return;\r\n\r\n    try {\r\n      const { data: profileData, error: profileError } = await supabase\r\n        .from(\"profiles\")\r\n        .select(\"stripe_customer_id\")\r\n        .eq(\"id\", profile.id)\r\n        .single();\r\n\r\n      if (profileError || !profileData?.stripe_customer_id) {\r\n        throw new Error(\"No Stripe customer ID\");\r\n      }\r\n\r\n      const res = await fetch(\r\n        \"https://mon-backend-node.vercel.app/api/create-stripe-portal-session\",\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            stripeCustomerId: profileData.stripe_customer_id,\r\n          }),\r\n        }\r\n      );\r\n\r\n      const data = await res.json();\r\n      if (!data.url) {\r\n        throw new Error(\"No portal URL\");\r\n      }\r\n\r\n      await Linking.openURL(data.url);\r\n    } catch (error) {\r\n      console.error(\"Stripe portal error:\", error);\r\n      Alert.alert(\"Erreur\", \"Impossible d'ouvrir le portail Stripe\");\r\n    }\r\n  }, [profile]);\r\n\r\n  const formatDate = useCallback((dateInput: string | number): string => {\r\n    try {\r\n      const date = new Date(dateInput);\r\n      return format(date, \"dd/MM/yyyy\", { locale: fr });\r\n    } catch {\r\n      return String(dateInput);\r\n    }\r\n  }, []);\r\n\r\n  const getStatusBadge = useCallback((status: string) => {\r\n    const statusStyles = {\r\n      active: { backgroundColor: \"green\", text: \"Actif\" },\r\n      option: { backgroundColor: \"orange\", text: \"En option\" },\r\n      pending: { backgroundColor: \"blue\", text: \"En attente\" },\r\n      default: { backgroundColor: \"gray\", text: status },\r\n    };\r\n\r\n    const style =\r\n      statusStyles[status as keyof typeof statusStyles] || statusStyles.default;\r\n\r\n    return (\r\n      <Text\r\n        style={{\r\n          backgroundColor: style.backgroundColor,\r\n          color: \"white\",\r\n          paddingVertical: 4,\r\n          paddingHorizontal: 8,\r\n          borderRadius: 4,\r\n          overflow: \"hidden\",\r\n          fontSize: 12,\r\n        }}\r\n      >\r\n        {style.text}\r\n      </Text>\r\n    );\r\n  }, []);\r\n\r\n  if (!initialLoadComplete || userDataLoading) {\r\n    return (\r\n      <SafeAreaView style={{ flex: 1, justifyContent: \"center\" }}>\r\n        <ActivityIndicator size=\"large\" color=\"#5cb9bc\" />\r\n      </SafeAreaView>\r\n    );\r\n  }\r\n\r\n  if (userDataError) {\r\n    return (\r\n      <SafeAreaView\r\n        style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}\r\n      >\r\n        <Text style={{ color: \"red\", fontSize: 18, marginBottom: 20 }}>\r\n          Une erreur est survenue lors du chargement de vos donn√©es\r\n        </Text>\r\n        <Button onPress={() => router.push(\"/(tabs)/Login?redirect=Dashboard\")}>\r\n          Retourner √† l'accueil\r\n        </Button>\r\n      </SafeAreaView>\r\n    );\r\n  }\r\n\r\n  if (isEditingProfile) {\r\n    return (\r\n      <View style={{ flex: 1, position: \"relative\" }}>\r\n        <ScrollView\r\n          style={styles.container1}\r\n          contentContainerStyle={{\r\n            flexGrow: 1,\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          <ProfileEditForm\r\n            profile={\r\n              profile\r\n                ? {\r\n                    first_name: profile.first_name || \"\",\r\n                    last_name: profile.last_name || \"\",\r\n                    company_name: profile.company_name || \"\",\r\n                    phone: profile.phone || \"\",\r\n                  }\r\n                : null\r\n            }\r\n            onUpdate={updateProfile}\r\n            onCancel={() => setIsEditingProfile(false)}\r\n          />\r\n          <Footer />\r\n        </ScrollView>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={{ flex: 1, backgroundColor: \"#f9fafb\" }}>\r\n      <ScrollView\r\n        style={styles.container1}\r\n        contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n      >\r\n        <View style={{ padding: 16 }}>\r\n          <Text style={styles.title}>Tableau de bord</Text>\r\n          <Text style={styles.subtitle}>\r\n            Bienvenue sur votre espace personnel Lys&Co,{\" \"}\r\n            {profile?.first_name || profile?.email}\r\n          </Text>\r\n          {/* Mon Profil */}\r\n          <View style={styles.card}>\r\n            <Text style={styles.cardTitle}>Mon Profil</Text>\r\n            <View style={styles.row}>\r\n              <View style={styles.column}>\r\n                <Text style={styles.label}>Nom</Text>\r\n                <Text style={styles.value}>\r\n                  {profile?.first_name} {profile?.last_name}\r\n                </Text>\r\n                <Text style={styles.label}>Email</Text>\r\n                <Text style={styles.value}>{profile?.email}</Text>\r\n              </View>\r\n              <View style={styles.column}>\r\n                <Text style={styles.label}>Entreprise</Text>\r\n                <Text style={styles.value}>\r\n                  {profile?.company_name || \"Non renseign√©\"}\r\n                </Text>\r\n                <Text style={styles.label}>T√©l√©phone</Text>\r\n                <Text style={styles.value}>\r\n                  {profile?.phone || \"Non renseign√©\"}\r\n                </Text>\r\n              </View>\r\n            </View>\r\n            <TouchableOpacity\r\n              style={styles.buttonOutline}\r\n              onPress={() => setIsEditingProfile(true)}\r\n            >\r\n              <Text style={styles.buttonOutlineText}>Modifier mon profil</Text>\r\n            </TouchableOpacity>\r\n\r\n            <Text style={styles.dangerTitle}>Suppression de compte</Text>\r\n            <Text style={styles.smallText}>\r\n              Cette action est irr√©versible. Toutes vos donn√©es seront\r\n              supprim√©es.\r\n            </Text>\r\n            <TouchableOpacity\r\n              style={styles.buttonDanger}\r\n              onPress={handleDeleteAccount}\r\n            >\r\n              <Text style={styles.buttonText}>\r\n                Supprimer d√©finitivement mon compte\r\n              </Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n          {isAdmin && (\r\n            <View style={{ marginTop: 32 }}>\r\n              <AdminDashboard />\r\n            </View>\r\n          )}\r\n          {/* Documents */}\r\n          <View style={styles.card}>\r\n            <Text style={styles.cardTitle}>Mes documents</Text>\r\n            {loadingDocuments ? (\r\n              <ActivityIndicator />\r\n            ) : documents.length === 0 ? (\r\n              <Text>Aucun document disponible.</Text>\r\n            ) : (\r\n              documents.map((doc) => (\r\n                <View key={doc.id} style={styles.item}>\r\n                  <Text>{doc.file_name}</Text>\r\n                  <Text>{new Date(doc.uploaded_at).toLocaleDateString()}</Text>\r\n                  <TouchableOpacity\r\n                    onPress={() => Linking.openURL(doc.file_url)}\r\n                  >\r\n                    <Text style={styles.link}>T√©l√©charger</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              ))\r\n            )}\r\n          </View>\r\n\r\n          {/* R√©servations */}\r\n          <View style={styles.card}>\r\n            <Text style={styles.cardTitle}>Mes r√©servations de salles</Text>\r\n            {loadingReservations ? (\r\n              <ActivityIndicator />\r\n            ) : reservations.length === 0 ? (\r\n              <Text>Aucune r√©servation trouv√©e.</Text>\r\n            ) : (\r\n              reservations.map((res) => (\r\n                <View key={res.id} style={styles.item}>\r\n                  <Text>Date: {formatDate(res.reservation_date)}</Text>\r\n                  <Text>\r\n                    Heure:{\" \"}\r\n                    {res.start_time\r\n                      ? `${res.start_time} - ${res.end_time}`\r\n                      : \"Journ√©e/Demi-journ√©e\"}\r\n                  </Text>\r\n                  <Text>\r\n                    Type: {humanizeReservationType(res.reservation_type)}\r\n                  </Text>\r\n                  <Text>Statut: {getStatusBadge(res.status)}</Text>\r\n                  {res.status !== \"cancelled\" &&\r\n                    canCancel(res.reservation_date, res.start_time) && (\r\n                      <TouchableOpacity\r\n                        style={styles.buttonDanger}\r\n                        onPress={() =>\r\n                          handleCancelReservation(\r\n                            res.id,\r\n                            res.payment_intent_id,\r\n                            profile?.email,\r\n                            res.reservation_date,\r\n                            res.reservation_type\r\n                          )\r\n                        }\r\n                      >\r\n                        <Text style={styles.buttonText}>Annuler</Text>\r\n                      </TouchableOpacity>\r\n                    )}\r\n                </View>\r\n              ))\r\n            )}\r\n          </View>\r\n          {/* Abonnements Stripe */}\r\n          {stripeSubscriptions.length > 0 && (\r\n            <View style={styles.card}>\r\n              <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n              {stripeSubscriptions.map((sub) => (\r\n                <View key={sub.id} style={styles.item}>\r\n                  <Text>Statut: {getStatusBadge(sub.status)}</Text>\r\n                  <Text>D√©but: {formatDate(sub.start_date * 1000)}</Text>\r\n                  {sub.cancel_at && (\r\n                    <Text>Fin pr√©vue: {formatDate(sub.cancel_at * 1000)}</Text>\r\n                  )}\r\n                  {sub.items?.data?.map((item: any) => (\r\n                    <Text key={item.id}>\r\n                      Produit: {item.product_name || \"Nom inconnu\"}\r\n                    </Text>\r\n                  ))}\r\n                </View>\r\n              ))}\r\n              <TouchableOpacity\r\n                style={styles.buttonPrimary}\r\n                onPress={handleOpenStripePortal}\r\n              >\r\n                <Text style={styles.buttonText}>G√©rer mes abonnements</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n          )}\r\n          {/* Factures Stripe */}\r\n          {stripeInvoices.length > 0 && (\r\n            <View style={styles.card}>\r\n              <Text style={styles.cardTitle}>Mes factures d'abonnement</Text>\r\n              {stripeInvoices.map((invoice) => (\r\n                <View key={invoice.id} style={styles.item}>\r\n                  <Text>\r\n                    Montant pay√©: {(invoice.amount_paid / 100).toFixed(2)} ‚Ç¨\r\n                  </Text>\r\n                  <Text>Date: {formatDate(invoice.created * 1000)}</Text>\r\n                  {invoice.lines?.data?.map((line: any) => (\r\n                    <Text key={line.id}>\r\n                      Produit: {line.product_name || \"Nom inconnu\"}\r\n                    </Text>\r\n                  ))}\r\n                  <TouchableOpacity\r\n                    onPress={() => Linking.openURL(invoice.invoice_pdf)}\r\n                  >\r\n                    <Text style={styles.link}>T√©l√©charger la facture</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              ))}\r\n            </View>\r\n          )}\r\n        </View>\r\n\r\n        <Footer />\r\n      </ScrollView>\r\n      {showConfirmModal && (\r\n        <View\r\n          style={{\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            backgroundColor: \"rgba(0,0,0,0.5)\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <View\r\n            style={{\r\n              backgroundColor: \"white\",\r\n              padding: 20,\r\n              borderRadius: 10,\r\n              width: \"80%\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Text\r\n              style={{ fontSize: 18, fontWeight: \"bold\", marginBottom: 10 }}\r\n            >\r\n              Confirmation\r\n            </Text>\r\n            <Text style={{ marginBottom: 20 }}>\r\n              Voulez-vous vraiment d√©sactiver votre compte ?\r\n            </Text>\r\n            <View style={{ flexDirection: \"row\" }}>\r\n              <TouchableOpacity\r\n                style={{ padding: 10, marginRight: 10 }}\r\n                onPress={() => setShowConfirmModal(false)}\r\n              >\r\n                <Text style={{ color: \"#4f46e5\" }}>Annuler</Text>\r\n              </TouchableOpacity>\r\n              <TouchableOpacity\r\n                style={{ padding: 10 }}\r\n                onPress={() => {\r\n                  setShowConfirmModal(false);\r\n                  confirmDeleteAccount(profile);\r\n                }}\r\n              >\r\n                <Text style={{ color: \"#dc2626\" }}>Confirmer</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n          </View>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container1: {\r\n    flex: 1,\r\n  },\r\n  container: {\r\n    padding: 16,\r\n    paddingBottom: 32,\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: \"bold\",\r\n    marginBottom: 12,\r\n  },\r\n  subtitle: {\r\n    fontSize: 16,\r\n    marginBottom: 20,\r\n  },\r\n  card: {\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: 8,\r\n    padding: 16,\r\n    marginBottom: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n    elevation: 2,\r\n  },\r\n  cardTitle: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n    marginBottom: 12,\r\n  },\r\n  row: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  column: {\r\n    flex: 1,\r\n  },\r\n  label: {\r\n    fontSize: 14,\r\n    color: \"#666\",\r\n  },\r\n  value: {\r\n    fontSize: 16,\r\n    fontWeight: \"500\",\r\n    marginBottom: 8,\r\n  },\r\n  buttonPrimary: {\r\n    backgroundColor: \"#4f46e5\",\r\n    padding: 12,\r\n    borderRadius: 6,\r\n    marginTop: 8,\r\n    alignItems: \"center\",\r\n  },\r\n  buttonOutline: {\r\n    borderColor: \"#4f46e5\",\r\n    borderWidth: 1,\r\n    padding: 12,\r\n    borderRadius: 6,\r\n    marginTop: 8,\r\n    alignItems: \"center\",\r\n  },\r\n  buttonDanger: {\r\n    backgroundColor: \"#dc2626\",\r\n    padding: 12,\r\n    borderRadius: 6,\r\n    marginTop: 8,\r\n    alignItems: \"center\",\r\n  },\r\n  buttonText: {\r\n    color: \"#fff\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  buttonOutlineText: {\r\n    color: \"#4f46e5\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  item: {\r\n    marginBottom: 12,\r\n  },\r\n  link: {\r\n    color: \"#2563eb\",\r\n    textDecorationLine: \"underline\",\r\n  },\r\n  dangerTitle: {\r\n    color: \"#dc2626\",\r\n    fontWeight: \"bold\",\r\n    marginTop: 12,\r\n  },\r\n  smallText: {\r\n    fontSize: 12,\r\n    color: \"#666\",\r\n    marginBottom: 8,\r\n  },\r\n  menuOverlay: {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    right: 0,\r\n    backgroundColor: \"#fff\",\r\n    zIndex: 9999,\r\n  },\r\n  menuContent: {\r\n    paddingTop: 60,\r\n    paddingHorizontal: 20,\r\n  },\r\n  menuCloseButton: {\r\n    position: \"absolute\",\r\n    top: 20,\r\n    right: 20,\r\n    padding: 10,\r\n  },\r\n  menuCloseIcon: {\r\n    fontSize: 28,\r\n    color: \"#333\",\r\n  },\r\n  menuItem: {\r\n    paddingVertical: 12,\r\n    borderBottomWidth: 1,\r\n    borderColor: \"#eee\",\r\n  },\r\n  menuItemText: {\r\n    fontSize: 18,\r\n    color: \"#333\",\r\n  },\r\n  menuAuthSection: {\r\n    marginTop: 30,\r\n  },\r\n  menuButton: {\r\n    paddingVertical: 12,\r\n    alignItems: \"center\",\r\n    borderRadius: 6,\r\n    marginBottom: 12,\r\n    borderWidth: 1,\r\n  },\r\n  menuButtonText: {\r\n    fontWeight: \"bold\",\r\n  },\r\n});\r\n\r\nexport default Dashboard;\r\n"
        }
    ]
}