{
    "sourceFile": "app/(app)/DemandeDevis.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754844347025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754844347025,
            "name": "Commit-0",
            "content": "import Footer from \"@/src/components/Footer\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { Picker } from \"@react-native-picker/picker\";\r\nimport React from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport {\r\n  Alert,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\nimport * as yup from \"yup\";\r\n\r\n// Schéma de validation\r\nconst formSchema = yup.object({\r\n  firstName: yup.string().min(2, \"Prénom trop court\").required(\"Prénom requis\"),\r\n  lastName: yup.string().min(2, \"Nom trop court\").required(\"Nom requis\"),\r\n  email: yup.string().email(\"Email invalide\").required(\"Email requis\"),\r\n  phone: yup.string().min(10, \"Numéro invalide\").required(\"Téléphone requis\"),\r\n  company: yup.string().default(\"\"),\r\n  serviceType: yup.string().required(\"Veuillez choisir un service\"),\r\n  budget: yup.string().default(\"\"),\r\n  message: yup\r\n    .string()\r\n    .min(10, \"Message trop court\")\r\n    .required(\"Message requis\"),\r\n});\r\n\r\ntype FormValues = {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  phone: string;\r\n  company: string;\r\n  serviceType: string;\r\n  budget: string;\r\n  message: string;\r\n};\r\n\r\nconst DemandeDevis = () => {\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { isSubmitting, errors },\r\n  } = useForm<FormValues>({\r\n    resolver: yupResolver(formSchema),\r\n    defaultValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      company: \"\",\r\n      serviceType: \"\",\r\n      budget: \"\",\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = async (data: FormValues) => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://mon-backend-node-henna.vercel.app/api/send-contact\",\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(data),\r\n        }\r\n      );\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.status === \"success\") {\r\n        Alert.alert(\r\n          \"Demande envoyée\",\r\n          \"Votre demande a bien été prise en compte.\"\r\n        );\r\n        reset();\r\n      } else {\r\n        Alert.alert(\"Erreur\", \"Une erreur est survenue. Veuillez réessayer.\");\r\n      }\r\n    } catch (error) {\r\n      Alert.alert(\r\n        \"Connexion impossible\",\r\n        \"Veuillez vérifier votre connexion internet.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1, backgroundColor: \"#f0f4f8\" }}>\r\n      <ScrollView contentContainerStyle={{ flexGrow: 1 }}>\r\n        <View style={{ padding: 20 }}>\r\n          <Text style={styles.title}>Demande de devis</Text>\r\n          <View style={styles.card}>\r\n            <FormInput\r\n              control={control}\r\n              name=\"firstName\"\r\n              placeholder=\"Votre prénom\"\r\n              label=\"Prénom\"\r\n              error={errors.firstName?.message}\r\n            />\r\n            <FormInput\r\n              control={control}\r\n              name=\"lastName\"\r\n              placeholder=\"Votre nom\"\r\n              label=\"Nom\"\r\n              error={errors.lastName?.message}\r\n            />\r\n            <FormInput\r\n              control={control}\r\n              name=\"email\"\r\n              placeholder=\"votre@email.com\"\r\n              label=\"Email\"\r\n              keyboardType=\"email-address\"\r\n              error={errors.email?.message}\r\n            />\r\n            <FormInput\r\n              control={control}\r\n              name=\"phone\"\r\n              placeholder=\"Votre numéro de téléphone\"\r\n              label=\"Téléphone\"\r\n              keyboardType=\"phone-pad\"\r\n              error={errors.phone?.message}\r\n            />\r\n            <FormInput\r\n              control={control}\r\n              name=\"company\"\r\n              placeholder=\"Nom de votre entreprise\"\r\n              label=\"Entreprise\"\r\n            />\r\n\r\n            {/* Type de service */}\r\n            <Controller\r\n              control={control}\r\n              name=\"serviceType\"\r\n              render={({ field: { onChange, value } }) => (\r\n                <View style={{ marginBottom: 16 }}>\r\n                  <Text style={styles.label}>Type de service</Text>\r\n                  <View style={styles.pickerWrapper}>\r\n                    <Picker\r\n                      selectedValue={value}\r\n                      onValueChange={onChange}\r\n                      style={styles.picker}\r\n                    >\r\n                      <Picker.Item label=\"Sélectionnez un service\" value=\"\" />\r\n                      <Picker.Item\r\n                        label=\"Domiciliation\"\r\n                        value=\"domiciliation\"\r\n                      />\r\n                      <Picker.Item\r\n                        label=\"Communication\"\r\n                        value=\"communication\"\r\n                      />\r\n                      <Picker.Item\r\n                        label=\"Services administratifs\"\r\n                        value=\"administratif\"\r\n                      />\r\n                      <Picker.Item label=\"Autre\" value=\"autre\" />\r\n                    </Picker>\r\n                  </View>\r\n                  {errors.serviceType?.message && (\r\n                    <Text style={styles.errorText}>\r\n                      {errors.serviceType.message}\r\n                    </Text>\r\n                  )}\r\n                </View>\r\n              )}\r\n            />\r\n\r\n            <FormInput\r\n              control={control}\r\n              name=\"budget\"\r\n              placeholder=\"Votre budget en €\"\r\n              label=\"Budget\"\r\n              keyboardType=\"numeric\"\r\n            />\r\n\r\n            {/* Message */}\r\n            <Controller\r\n              control={control}\r\n              name=\"message\"\r\n              render={({ field: { onChange, value } }) => (\r\n                <View style={{ marginBottom: 20 }}>\r\n                  <Text style={styles.label}>Description de votre projet</Text>\r\n                  <TextInput\r\n                    placeholder=\"Décrivez votre besoin en détail...\"\r\n                    value={value}\r\n                    onChangeText={onChange}\r\n                    multiline\r\n                    numberOfLines={5}\r\n                    style={styles.textArea}\r\n                  />\r\n                  {errors.message?.message && (\r\n                    <Text style={styles.errorText}>\r\n                      {errors.message.message}\r\n                    </Text>\r\n                  )}\r\n                </View>\r\n              )}\r\n            />\r\n\r\n            <TouchableOpacity\r\n              style={styles.submitButton}\r\n              onPress={handleSubmit(onSubmit)}\r\n              disabled={isSubmitting}\r\n            >\r\n              <Text style={styles.submitButtonText}>\r\n                {isSubmitting ? \"Envoi en cours...\" : \"Demander un devis\"}\r\n              </Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </View>\r\n        <Footer />\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst FormInput = ({\r\n  control,\r\n  name,\r\n  placeholder,\r\n  label,\r\n  keyboardType = \"default\",\r\n  error,\r\n}: {\r\n  control: any;\r\n  name: any;\r\n  placeholder: string;\r\n  label: string;\r\n  keyboardType?: \"default\" | \"email-address\" | \"phone-pad\" | \"numeric\";\r\n  error?: string;\r\n}) => (\r\n  <Controller\r\n    control={control}\r\n    name={name}\r\n    render={({ field: { onChange, value } }) => (\r\n      <View style={{ marginBottom: 16 }}>\r\n        <Text style={styles.label}>{label}</Text>\r\n        <TextInput\r\n          placeholder={placeholder}\r\n          value={value}\r\n          onChangeText={onChange}\r\n          keyboardType={keyboardType}\r\n          style={styles.input}\r\n        />\r\n        {error && <Text style={styles.errorText}>{error}</Text>}\r\n      </View>\r\n    )}\r\n  />\r\n);\r\n\r\nconst styles = StyleSheet.create({\r\n  title: {\r\n    fontSize: 26,\r\n    fontWeight: \"800\",\r\n    textAlign: \"center\",\r\n    color: \"#1f2937\",\r\n    marginBottom: 28,\r\n  },\r\n  card: {\r\n    backgroundColor: \"#ffffff\",\r\n    borderRadius: 20,\r\n    padding: 20,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.08,\r\n    shadowRadius: 6,\r\n    elevation: 3,\r\n    marginBottom: 20,\r\n  },\r\n  label: {\r\n    fontSize: 15,\r\n    fontWeight: \"600\",\r\n    color: \"#334155\",\r\n    marginBottom: 8,\r\n  },\r\n  input: {\r\n    backgroundColor: \"#f8fafc\",\r\n    borderColor: \"#d1d5db\",\r\n    borderWidth: 1,\r\n    borderRadius: 12,\r\n    paddingVertical: 12,\r\n    paddingHorizontal: 16,\r\n    fontSize: 14,\r\n    color: \"#1e293b\",\r\n  },\r\n  textArea: {\r\n    backgroundColor: \"#f8fafc\",\r\n    borderColor: \"#d1d5db\",\r\n    borderWidth: 1,\r\n    borderRadius: 12,\r\n    padding: 16,\r\n    fontSize: 14,\r\n    color: \"#1e293b\",\r\n    minHeight: 120,\r\n    textAlignVertical: \"top\",\r\n  },\r\n  pickerWrapper: {\r\n    backgroundColor: \"#f8fafc\",\r\n    borderColor: \"#d1d5db\",\r\n    borderWidth: 1,\r\n    borderRadius: 12,\r\n  },\r\n  picker: {\r\n    color: \"#1e293b\",\r\n    padding: 0,\r\n  },\r\n  errorText: {\r\n    color: \"#dc2626\",\r\n    fontSize: 12,\r\n    marginTop: 6,\r\n  },\r\n  submitButton: {\r\n    backgroundColor: \"#5cb9bc\",\r\n    paddingVertical: 16,\r\n    borderRadius: 30,\r\n    alignItems: \"center\",\r\n    marginTop: 32,\r\n    marginBottom: 40,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 3 },\r\n    shadowOpacity: 0.2,\r\n    shadowRadius: 6,\r\n    elevation: 4,\r\n  },\r\n  submitButtonText: {\r\n    color: \"#ffffff\",\r\n    fontSize: 16,\r\n    fontWeight: \"700\",\r\n    letterSpacing: 0.5,\r\n  },\r\n});\r\n\r\nexport default DemandeDevis;\r\n"
        }
    ]
}