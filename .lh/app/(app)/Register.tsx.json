{
    "sourceFile": "app/(app)/Register.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754403290525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754403290525,
            "name": "Commit-0",
            "content": "import { supabase } from \"@/integrations/supabase/client\";\r\nimport Footer from \"@/src/components/Footer\";\r\nimport type { RootStackParamList } from \"@/src/navigation/types\";\r\nimport { Feather } from \"@expo/vector-icons\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\nimport type { Session } from \"@supabase/supabase-js\";\r\nimport { router } from \"expo-router\";\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\n\r\ntype NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n\r\nconst Register = () => {\r\n  const navigation = useNavigation<NavigationProp>();\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [passwordError, setPasswordError] = useState(false);\r\n  const [session, setSession] = useState<Session | null>(null);\r\n  const [menuOpen, setMenuOpen] = useState(false);\r\n\r\n  const isPasswordValid = (pwd: string) => {\r\n    const regex =\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|<>?,./`~]).{8,}$/;\r\n    return regex.test(pwd);\r\n  };\r\n\r\n  const handleRegister = async () => {\r\n    if (!isPasswordValid(password)) {\r\n      setPasswordError(true);\r\n      Alert.alert(\r\n        \"Mot de passe invalide\",\r\n        \"Le mot de passe doit contenir : 1 minuscule, 1 majuscule, 1 chiffre et 1 caractère spécial.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data, error } = await supabase.auth.signUp({\r\n        email,\r\n        password,\r\n        options: {\r\n          data: {\r\n            first_name: firstName,\r\n            last_name: lastName,\r\n          },\r\n        },\r\n      });\r\n\r\n      if (error) {\r\n        if (\r\n          error.message.includes(\"already registered\") ||\r\n          error.message.includes(\"Email already in use\")\r\n        ) {\r\n          Alert.alert(\r\n            \"Cet email est déjà associé à un compte\",\r\n            \"Essayez de vous connecter ou de réinitialiser votre mot de passe.\"\r\n          );\r\n        } else {\r\n          Alert.alert(\"Erreur\", error.message);\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (data.user) {\r\n        Alert.alert(\r\n          \"Inscription réussie\",\r\n          \"Vous êtes maintenant inscrit. Bienvenue chez Lys&Co!\",\r\n          [{ text: \"OK\", onPress: () => navigation.navigate(\"Dashboard\") }]\r\n        );\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Registration error:\", err);\r\n      Alert.alert(\"Erreur\", \"Une erreur inattendue est survenue\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1, backgroundColor: \"#f5f5f5\" }}>\r\n      <ScrollView\r\n        style={styles.container}\r\n        contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n      >\r\n        <View style={styles.card}>\r\n          <Text style={styles.title}>Créer un compte</Text>\r\n          <Text style={styles.subtitle}>\r\n            Inscrivez-vous pour accéder à nos services\r\n          </Text>\r\n\r\n          {/* Prénom */}\r\n          <View style={styles.inputRow}>\r\n            <Feather name=\"user\" size={20} color=\"#9ca3af\" />\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder=\"Prénom\"\r\n              value={firstName}\r\n              onChangeText={setFirstName}\r\n            />\r\n          </View>\r\n\r\n          {/* Nom */}\r\n          <View style={styles.inputRow}>\r\n            <Feather name=\"user\" size={20} color=\"#9ca3af\" />\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder=\"Nom\"\r\n              value={lastName}\r\n              onChangeText={setLastName}\r\n            />\r\n          </View>\r\n\r\n          {/* Email */}\r\n          <View style={styles.inputRow}>\r\n            <Feather name=\"mail\" size={20} color=\"#9ca3af\" />\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder=\"Email\"\r\n              keyboardType=\"email-address\"\r\n              value={email}\r\n              onChangeText={setEmail}\r\n            />\r\n          </View>\r\n\r\n          {/* Mot de passe */}\r\n          <View\r\n            style={[\r\n              styles.inputRow,\r\n              { borderColor: passwordError ? \"red\" : \"#d1d5db\" },\r\n            ]}\r\n          >\r\n            <Feather name=\"lock\" size={20} color=\"#9ca3af\" />\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder=\"Mot de passe\"\r\n              secureTextEntry={!showPassword}\r\n              value={password}\r\n              onChangeText={(val) => {\r\n                setPassword(val);\r\n                setPasswordError(!isPasswordValid(val));\r\n              }}\r\n            />\r\n            <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>\r\n              <Feather\r\n                name={showPassword ? \"eye-off\" : \"eye\"}\r\n                size={20}\r\n                color=\"#9ca3af\"\r\n              />\r\n            </TouchableOpacity>\r\n          </View>\r\n\r\n          {passwordError && (\r\n            <Text style={styles.errorText}>\r\n              Le mot de passe doit contenir : 1 minuscule, 1 majuscule, 1\r\n              chiffre et 1 caractère spécial.\r\n            </Text>\r\n          )}\r\n\r\n          {/* Bouton inscription */}\r\n          <TouchableOpacity style={styles.button} onPress={handleRegister}>\r\n            <Text style={styles.buttonText}>S'inscrire</Text>\r\n          </TouchableOpacity>\r\n\r\n          {/* Lien vers login */}\r\n          <View style={{ alignItems: \"center\" }}>\r\n            <Text>\r\n              Déjà un compte ?{\" \"}\r\n              <Text\r\n                style={styles.link}\r\n                onPress={() => navigation.navigate(\"Login\")}\r\n              >\r\n                Se connecter\r\n              </Text>\r\n            </Text>\r\n          </View>\r\n        </View>\r\n        <Footer />\r\n      </ScrollView>\r\n      {/* GLOBAL OVERLAY */}\r\n      {menuOpen && (\r\n        <View\r\n          style={{\r\n            position: \"absolute\",\r\n            top: 0,\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            backgroundColor: \"#fff\",\r\n            zIndex: 9999,\r\n            elevation: 9999,\r\n          }}\r\n        >\r\n          <ScrollView\r\n            contentContainerStyle={{ paddingTop: 90, paddingHorizontal: 20 }}\r\n          >\r\n            <TouchableOpacity\r\n              style={{ position: \"absolute\", top: 50, right: 20, padding: 10 }}\r\n              onPress={() => setMenuOpen(false)}\r\n            >\r\n              <Text style={{ fontSize: 28, color: \"#333\" }}>✕</Text>\r\n            </TouchableOpacity>\r\n\r\n            {[\r\n              { label: \"Accueil\", path: \"/(app)\" },\r\n              { label: \"Domiciliation\", path: \"/(app)/Domiciliation\" },\r\n              { label: \"Services Admin\", path: \"/(app)/ServicesAdmin\" },\r\n              { label: \"Communication\", path: \"/(app)/Communication\" },\r\n              { label: \"Contact\", path: \"/(app)/Contact\" },\r\n            ].map((item, idx) => (\r\n              <TouchableOpacity\r\n                key={idx}\r\n                style={{\r\n                  paddingVertical: 12,\r\n                  borderBottomWidth: 1,\r\n                  borderColor: \"#eee\",\r\n                }}\r\n                onPress={() => {\r\n                  router.push(item.path as any);\r\n                  setMenuOpen(false);\r\n                }}\r\n              >\r\n                <Text style={{ fontSize: 18, color: \"#333\" }}>\r\n                  {item.label}\r\n                </Text>\r\n              </TouchableOpacity>\r\n            ))}\r\n\r\n            <View style={{ marginTop: 30 }}>\r\n              {session ? (\r\n                <>\r\n                  <TouchableOpacity\r\n                    style={{\r\n                      paddingVertical: 12,\r\n                      alignItems: \"center\",\r\n                      borderRadius: 6,\r\n                      backgroundColor: \"#5cb9bc\",\r\n                      marginBottom: 12,\r\n                    }}\r\n                    onPress={() => {\r\n                      router.push(\"/(app)/Dashboard\" as any);\r\n                      setMenuOpen(false);\r\n                    }}\r\n                  >\r\n                    <Text style={{ color: \"#fff\", fontWeight: \"bold\" }}>\r\n                      Dashboard\r\n                    </Text>\r\n                  </TouchableOpacity>\r\n\r\n                  <TouchableOpacity\r\n                    style={{\r\n                      paddingVertical: 12,\r\n                      alignItems: \"center\",\r\n                      borderRadius: 6,\r\n                      backgroundColor: \"#5cb9bc\",\r\n                    }}\r\n                    onPress={async () => {\r\n                      const { error } = await supabase.auth.signOut();\r\n                      if (error) {\r\n                        Alert.alert(\"Erreur\", error.message);\r\n                        return;\r\n                      }\r\n                      Alert.alert(\"Déconnexion réussie\");\r\n                      router.push(\"/(app)/Login\" as any);\r\n                      setMenuOpen(false);\r\n                    }}\r\n                  >\r\n                    <Text style={{ color: \"#fff\", fontWeight: \"bold\" }}>\r\n                      Déconnexion\r\n                    </Text>\r\n                  </TouchableOpacity>\r\n                </>\r\n              ) : (\r\n                <TouchableOpacity\r\n                  style={{\r\n                    paddingVertical: 12,\r\n                    alignItems: \"center\",\r\n                    borderRadius: 6,\r\n                    backgroundColor: \"#fff\",\r\n                    borderWidth: 1,\r\n                    borderColor: \"#5cb9bc\",\r\n                  }}\r\n                  onPress={() => {\r\n                    router.push(\"/(app)/Login\" as any);\r\n                    setMenuOpen(false);\r\n                  }}\r\n                >\r\n                  <Text style={{ color: \"#5cb9bc\", fontWeight: \"bold\" }}>\r\n                    Connexion\r\n                  </Text>\r\n                </TouchableOpacity>\r\n              )}\r\n            </View>\r\n          </ScrollView>\r\n        </View>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#f5f5f5\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"#fff\",\r\n    padding: 20,\r\n    borderRadius: 16,\r\n    shadowColor: \"#000\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n    elevation: 5,\r\n    maxWidth: 500,\r\n    alignSelf: \"center\",\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n    marginBottom: 10,\r\n  },\r\n  subtitle: {\r\n    textAlign: \"center\",\r\n    marginBottom: 20,\r\n    color: \"#6b7280\",\r\n  },\r\n  inputRow: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    borderWidth: 1,\r\n    borderColor: \"#d1d5db\",\r\n    borderRadius: 8,\r\n    backgroundColor: \"#fff\",\r\n    marginBottom: 10,\r\n    paddingHorizontal: 10,\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 10,\r\n  },\r\n  errorText: {\r\n    color: \"red\",\r\n    fontSize: 12,\r\n    marginBottom: 10,\r\n    textAlign: \"center\",\r\n  },\r\n  button: {\r\n    backgroundColor: \"#ec407a\",\r\n    paddingVertical: 12,\r\n    borderRadius: 8,\r\n    alignItems: \"center\",\r\n    marginBottom: 20,\r\n  },\r\n  buttonText: {\r\n    color: \"#fff\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  link: {\r\n    color: \"#00bcd4\",\r\n    textDecorationLine: \"underline\",\r\n  },\r\n});\r\n\r\nexport default Register;\r\n"
        }
    ]
}