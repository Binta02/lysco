{
    "sourceFile": "app/(app)/ResetPassword.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1754403297967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754420748489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,171 @@\n+// import Footer from \"@/src/components/Footer\";\r\n+// import { supabase } from \"@/src/integrations/supabase/client\";\r\n+// import { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\n+// import { useRouter } from \"expo-router\";\r\n+// import React, { useState } from \"react\";\r\n+// import {\r\n+//   Alert,\r\n+//   ScrollView,\r\n+//   StyleSheet,\r\n+//   Text,\r\n+//   TextInput,\r\n+//   TouchableOpacity,\r\n+//   View,\r\n+// } from \"react-native\";\r\n+\r\n+// const ResetPassword = () => {\r\n+//   const [newPassword, setNewPassword] = useState(\"\");\r\n+//   const [showPassword, setShowPassword] = useState(false);\r\n+//   const router = useRouter();\r\n+\r\n+//   const handleResetPassword = async () => {\r\n+//     if (newPassword.length < 8) {\r\n+//       Alert.alert(\r\n+//         \"Erreur\",\r\n+//         \"Le mot de passe doit contenir au moins 8 caractères.\"\r\n+//       );\r\n+//       return;\r\n+//     }\r\n+\r\n+//     try {\r\n+//       const { error } = await supabase.auth.updateUser({\r\n+//         password: newPassword,\r\n+//       });\r\n+\r\n+//       if (error) {\r\n+//         Alert.alert(\"Erreur\", error.message);\r\n+//         return;\r\n+//       }\r\n+\r\n+//       Alert.alert(\"Succès\", \"Votre mot de passe a été modifié avec succès.\");\r\n+//       router.push(\"/(app)/Login\");\r\n+//     } catch (error) {\r\n+//       console.error(\"Password update error:\", error);\r\n+//       Alert.alert(\"Erreur\", \"Une erreur inattendue est survenue.\");\r\n+//     }\r\n+//   };\r\n+\r\n+//   return (\r\n+//     <View style={{ flex: 1, backgroundColor: \"#f9fafb\" }}>\r\n+//       <ScrollView contentContainerStyle={styles.container}>\r\n+//         <View style={styles.card}>\r\n+//           <Text style={styles.title}>Réinitialisation du mot de passe</Text>\r\n+//           <Text style={styles.subtitle}>Entrez votre nouveau mot de passe</Text>\r\n+\r\n+//           <View style={styles.inputContainer}>\r\n+//             <MaterialCommunityIcons\r\n+//               name=\"lock-outline\"\r\n+//               size={20}\r\n+//               color=\"#9ca3af\"\r\n+//               style={styles.icon}\r\n+//             />\r\n+//             <TextInput\r\n+//               style={styles.input}\r\n+//               placeholder=\"Nouveau mot de passe\"\r\n+//               secureTextEntry={!showPassword}\r\n+//               value={newPassword}\r\n+//               onChangeText={setNewPassword}\r\n+//             />\r\n+//             <TouchableOpacity\r\n+//               onPress={() => setShowPassword(!showPassword)}\r\n+//               style={styles.iconRight}\r\n+//             >\r\n+//               <MaterialCommunityIcons\r\n+//                 name={showPassword ? \"eye-off-outline\" : \"eye-outline\"}\r\n+//                 size={20}\r\n+//                 color=\"#9ca3af\"\r\n+//               />\r\n+//             </TouchableOpacity>\r\n+//           </View>\r\n+//           <Text style={styles.hintText}>\r\n+//             Le mot de passe doit contenir au moins 8 caractères.\r\n+//           </Text>\r\n+\r\n+//           <TouchableOpacity style={styles.button} onPress={handleResetPassword}>\r\n+//             <Text style={styles.buttonText}>Réinitialiser le mot de passe</Text>\r\n+//           </TouchableOpacity>\r\n+//         </View>\r\n+//       </ScrollView>\r\n+//       <Footer />\r\n+//     </View>\r\n+//   );\r\n+// };\r\n+\r\n+// export default ResetPassword;\r\n+\r\n+// const styles = StyleSheet.create({\r\n+//   container: {\r\n+//     flexGrow: 1,\r\n+//     justifyContent: \"center\",\r\n+//     padding: 20,\r\n+//   },\r\n+//   card: {\r\n+//     backgroundColor: \"#fff\",\r\n+//     borderRadius: 12,\r\n+//     padding: 20,\r\n+//     shadowColor: \"#000\",\r\n+//     shadowOpacity: 0.1,\r\n+//     shadowOffset: { width: 0, height: 2 },\r\n+//     elevation: 3,\r\n+//   },\r\n+//   title: {\r\n+//     fontSize: 22,\r\n+//     fontWeight: \"bold\",\r\n+//     textAlign: \"center\",\r\n+//     marginBottom: 8,\r\n+//     color: \"#0f172a\",\r\n+//   },\r\n+//   subtitle: {\r\n+//     textAlign: \"center\",\r\n+//     fontSize: 14,\r\n+//     color: \"#6b7280\",\r\n+//     marginBottom: 20,\r\n+//   },\r\n+//   inputContainer: {\r\n+//     flexDirection: \"row\",\r\n+//     alignItems: \"center\",\r\n+//     borderColor: \"#d1d5db\",\r\n+//     borderWidth: 1,\r\n+//     borderRadius: 8,\r\n+//     marginBottom: 12,\r\n+//     paddingHorizontal: 8,\r\n+//   },\r\n+//   input: {\r\n+//     flex: 1,\r\n+//     height: 44,\r\n+//     fontSize: 14,\r\n+//     paddingHorizontal: 8,\r\n+//   },\r\n+//   icon: {\r\n+//     marginRight: 4,\r\n+//   },\r\n+//   iconRight: {\r\n+//     padding: 4,\r\n+//   },\r\n+//   hintText: {\r\n+//     fontSize: 12,\r\n+//     color: \"#6b7280\",\r\n+//     marginBottom: 20,\r\n+//   },\r\n+//   button: {\r\n+//     backgroundColor: \"#5cb9bc\",\r\n+//     paddingVertical: 12,\r\n+//     borderRadius: 8,\r\n+//     alignItems: \"center\",\r\n+//   },\r\n+//   buttonText: {\r\n+//     color: \"#fff\",\r\n+//     fontWeight: \"bold\",\r\n+//   },\r\n+// });\r\n+\r\n import Footer from \"@/src/components/Footer\";\r\n import { supabase } from \"@/src/integrations/supabase/client\";\r\n import { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\n+import * as Linking from \"expo-linking\";\r\n import { useRouter } from \"expo-router\";\r\n-import React, { useState } from \"react\";\r\n+import React, { useEffect, useState } from \"react\";\r\n import {\r\n   Alert,\r\n   ScrollView,\r\n   StyleSheet,\r\n@@ -17,8 +179,33 @@\n   const [newPassword, setNewPassword] = useState(\"\");\r\n   const [showPassword, setShowPassword] = useState(false);\r\n   const router = useRouter();\r\n \r\n+  // ✅ Restaure la session Supabase à partir du lien (token)\r\n+  useEffect(() => {\r\n+    const restoreSession = async () => {\r\n+      const url = await Linking.getInitialURL();\r\n+      if (url) {\r\n+        const parsed = Linking.parse(url);\r\n+        const { access_token, refresh_token } = parsed.queryParams || {};\r\n+\r\n+        if (access_token && refresh_token) {\r\n+          const { error } = await supabase.auth.exchangeCodeForSession({\r\n+            access_token,\r\n+            refresh_token,\r\n+          });\r\n+\r\n+          if (error) {\r\n+            console.error(\"Erreur lors de l'échange de session :\", error);\r\n+            Alert.alert(\"Erreur\", \"Impossible de réactiver votre session.\");\r\n+          }\r\n+        }\r\n+      }\r\n+    };\r\n+\r\n+    restoreSession();\r\n+  }, []);\r\n+\r\n   const handleResetPassword = async () => {\r\n     if (newPassword.length < 8) {\r\n       Alert.alert(\r\n         \"Erreur\",\r\n"
                },
                {
                    "date": 1754420790278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,11 +188,11 @@\n         const parsed = Linking.parse(url);\r\n         const { access_token, refresh_token } = parsed.queryParams || {};\r\n \r\n         if (access_token && refresh_token) {\r\n-          const { error } = await supabase.auth.exchangeCodeForSession({\r\n-            access_token,\r\n-            refresh_token,\r\n+          const { error } = await supabase.auth.setSession({\r\n+            access_token: String(access_token),\r\n+            refresh_token: String(refresh_token),\r\n           });\r\n \r\n           if (error) {\r\n             console.error(\"Erreur lors de l'échange de session :\", error);\r\n"
                },
                {
                    "date": 1754421153452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,173 +1,12 @@\n-// import Footer from \"@/src/components/Footer\";\r\n-// import { supabase } from \"@/src/integrations/supabase/client\";\r\n-// import { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\n-// import { useRouter } from \"expo-router\";\r\n-// import React, { useState } from \"react\";\r\n-// import {\r\n-//   Alert,\r\n-//   ScrollView,\r\n-//   StyleSheet,\r\n-//   Text,\r\n-//   TextInput,\r\n-//   TouchableOpacity,\r\n-//   View,\r\n-// } from \"react-native\";\r\n-\r\n-// const ResetPassword = () => {\r\n-//   const [newPassword, setNewPassword] = useState(\"\");\r\n-//   const [showPassword, setShowPassword] = useState(false);\r\n-//   const router = useRouter();\r\n-\r\n-//   const handleResetPassword = async () => {\r\n-//     if (newPassword.length < 8) {\r\n-//       Alert.alert(\r\n-//         \"Erreur\",\r\n-//         \"Le mot de passe doit contenir au moins 8 caractères.\"\r\n-//       );\r\n-//       return;\r\n-//     }\r\n-\r\n-//     try {\r\n-//       const { error } = await supabase.auth.updateUser({\r\n-//         password: newPassword,\r\n-//       });\r\n-\r\n-//       if (error) {\r\n-//         Alert.alert(\"Erreur\", error.message);\r\n-//         return;\r\n-//       }\r\n-\r\n-//       Alert.alert(\"Succès\", \"Votre mot de passe a été modifié avec succès.\");\r\n-//       router.push(\"/(app)/Login\");\r\n-//     } catch (error) {\r\n-//       console.error(\"Password update error:\", error);\r\n-//       Alert.alert(\"Erreur\", \"Une erreur inattendue est survenue.\");\r\n-//     }\r\n-//   };\r\n-\r\n-//   return (\r\n-//     <View style={{ flex: 1, backgroundColor: \"#f9fafb\" }}>\r\n-//       <ScrollView contentContainerStyle={styles.container}>\r\n-//         <View style={styles.card}>\r\n-//           <Text style={styles.title}>Réinitialisation du mot de passe</Text>\r\n-//           <Text style={styles.subtitle}>Entrez votre nouveau mot de passe</Text>\r\n-\r\n-//           <View style={styles.inputContainer}>\r\n-//             <MaterialCommunityIcons\r\n-//               name=\"lock-outline\"\r\n-//               size={20}\r\n-//               color=\"#9ca3af\"\r\n-//               style={styles.icon}\r\n-//             />\r\n-//             <TextInput\r\n-//               style={styles.input}\r\n-//               placeholder=\"Nouveau mot de passe\"\r\n-//               secureTextEntry={!showPassword}\r\n-//               value={newPassword}\r\n-//               onChangeText={setNewPassword}\r\n-//             />\r\n-//             <TouchableOpacity\r\n-//               onPress={() => setShowPassword(!showPassword)}\r\n-//               style={styles.iconRight}\r\n-//             >\r\n-//               <MaterialCommunityIcons\r\n-//                 name={showPassword ? \"eye-off-outline\" : \"eye-outline\"}\r\n-//                 size={20}\r\n-//                 color=\"#9ca3af\"\r\n-//               />\r\n-//             </TouchableOpacity>\r\n-//           </View>\r\n-//           <Text style={styles.hintText}>\r\n-//             Le mot de passe doit contenir au moins 8 caractères.\r\n-//           </Text>\r\n-\r\n-//           <TouchableOpacity style={styles.button} onPress={handleResetPassword}>\r\n-//             <Text style={styles.buttonText}>Réinitialiser le mot de passe</Text>\r\n-//           </TouchableOpacity>\r\n-//         </View>\r\n-//       </ScrollView>\r\n-//       <Footer />\r\n-//     </View>\r\n-//   );\r\n-// };\r\n-\r\n-// export default ResetPassword;\r\n-\r\n-// const styles = StyleSheet.create({\r\n-//   container: {\r\n-//     flexGrow: 1,\r\n-//     justifyContent: \"center\",\r\n-//     padding: 20,\r\n-//   },\r\n-//   card: {\r\n-//     backgroundColor: \"#fff\",\r\n-//     borderRadius: 12,\r\n-//     padding: 20,\r\n-//     shadowColor: \"#000\",\r\n-//     shadowOpacity: 0.1,\r\n-//     shadowOffset: { width: 0, height: 2 },\r\n-//     elevation: 3,\r\n-//   },\r\n-//   title: {\r\n-//     fontSize: 22,\r\n-//     fontWeight: \"bold\",\r\n-//     textAlign: \"center\",\r\n-//     marginBottom: 8,\r\n-//     color: \"#0f172a\",\r\n-//   },\r\n-//   subtitle: {\r\n-//     textAlign: \"center\",\r\n-//     fontSize: 14,\r\n-//     color: \"#6b7280\",\r\n-//     marginBottom: 20,\r\n-//   },\r\n-//   inputContainer: {\r\n-//     flexDirection: \"row\",\r\n-//     alignItems: \"center\",\r\n-//     borderColor: \"#d1d5db\",\r\n-//     borderWidth: 1,\r\n-//     borderRadius: 8,\r\n-//     marginBottom: 12,\r\n-//     paddingHorizontal: 8,\r\n-//   },\r\n-//   input: {\r\n-//     flex: 1,\r\n-//     height: 44,\r\n-//     fontSize: 14,\r\n-//     paddingHorizontal: 8,\r\n-//   },\r\n-//   icon: {\r\n-//     marginRight: 4,\r\n-//   },\r\n-//   iconRight: {\r\n-//     padding: 4,\r\n-//   },\r\n-//   hintText: {\r\n-//     fontSize: 12,\r\n-//     color: \"#6b7280\",\r\n-//     marginBottom: 20,\r\n-//   },\r\n-//   button: {\r\n-//     backgroundColor: \"#5cb9bc\",\r\n-//     paddingVertical: 12,\r\n-//     borderRadius: 8,\r\n-//     alignItems: \"center\",\r\n-//   },\r\n-//   buttonText: {\r\n-//     color: \"#fff\",\r\n-//     fontWeight: \"bold\",\r\n-//   },\r\n-// });\r\n-\r\n import Footer from \"@/src/components/Footer\";\r\n import { supabase } from \"@/src/integrations/supabase/client\";\r\n import { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\n-import * as Linking from \"expo-linking\";\r\n import { useRouter } from \"expo-router\";\r\n import React, { useEffect, useState } from \"react\";\r\n import {\r\n   Alert,\r\n+  Linking,\r\n   ScrollView,\r\n   StyleSheet,\r\n   Text,\r\n   TextInput,\r\n@@ -179,31 +18,35 @@\n   const [newPassword, setNewPassword] = useState(\"\");\r\n   const [showPassword, setShowPassword] = useState(false);\r\n   const router = useRouter();\r\n \r\n-  // ✅ Restaure la session Supabase à partir du lien (token)\r\n+  // Récupérer access_token et refresh_token du lien (deep link)\r\n   useEffect(() => {\r\n-    const restoreSession = async () => {\r\n-      const url = await Linking.getInitialURL();\r\n-      if (url) {\r\n-        const parsed = Linking.parse(url);\r\n-        const { access_token, refresh_token } = parsed.queryParams || {};\r\n+    const handleDeepLink = async () => {\r\n+      const initialUrl = await Linking.getInitialURL();\r\n+      if (!initialUrl) return;\r\n \r\n+      try {\r\n+        const parsedUrl = new URL(initialUrl);\r\n+        const access_token = parsedUrl.searchParams.get(\"access_token\");\r\n+        const refresh_token = parsedUrl.searchParams.get(\"refresh_token\");\r\n+\r\n         if (access_token && refresh_token) {\r\n           const { error } = await supabase.auth.setSession({\r\n-            access_token: String(access_token),\r\n-            refresh_token: String(refresh_token),\r\n+            access_token,\r\n+            refresh_token,\r\n           });\r\n \r\n           if (error) {\r\n-            console.error(\"Erreur lors de l'échange de session :\", error);\r\n-            Alert.alert(\"Erreur\", \"Impossible de réactiver votre session.\");\r\n+            console.error(\"Erreur de session :\", error.message);\r\n           }\r\n         }\r\n+      } catch (err) {\r\n+        console.error(\"Erreur parsing URL :\", err);\r\n       }\r\n     };\r\n \r\n-    restoreSession();\r\n+    handleDeepLink();\r\n   }, []);\r\n \r\n   const handleResetPassword = async () => {\r\n     if (newPassword.length < 8) {\r\n"
                },
                {
                    "date": 1754486334297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,8 @@\n         \"Le mot de passe doit contenir au moins 8 caractères.\"\r\n       );\r\n       return;\r\n     }\r\n-\r\n     try {\r\n       const { error } = await supabase.auth.updateUser({\r\n         password: newPassword,\r\n       });\r\n"
                },
                {
                    "date": 1754898521366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,195 @@\n+// import Footer from \"@/src/components/Footer\";\r\n+// import { supabase } from \"@/src/integrations/supabase/client\";\r\n+// import { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\n+// import { useRouter } from \"expo-router\";\r\n+// import React, { useEffect, useState } from \"react\";\r\n+// import {\r\n+//   Alert,\r\n+//   Linking,\r\n+//   ScrollView,\r\n+//   StyleSheet,\r\n+//   Text,\r\n+//   TextInput,\r\n+//   TouchableOpacity,\r\n+//   View,\r\n+// } from \"react-native\";\r\n+\r\n+// const ResetPassword = () => {\r\n+//   const [newPassword, setNewPassword] = useState(\"\");\r\n+//   const [showPassword, setShowPassword] = useState(false);\r\n+//   const router = useRouter();\r\n+\r\n+//   // Récupérer access_token et refresh_token du lien (deep link)\r\n+//   useEffect(() => {\r\n+//     const handleDeepLink = async () => {\r\n+//       const initialUrl = await Linking.getInitialURL();\r\n+//       if (!initialUrl) return;\r\n+\r\n+//       try {\r\n+//         const parsedUrl = new URL(initialUrl);\r\n+//         const access_token = parsedUrl.searchParams.get(\"access_token\");\r\n+//         const refresh_token = parsedUrl.searchParams.get(\"refresh_token\");\r\n+\r\n+//         if (access_token && refresh_token) {\r\n+//           const { error } = await supabase.auth.setSession({\r\n+//             access_token,\r\n+//             refresh_token,\r\n+//           });\r\n+\r\n+//           if (error) {\r\n+//             console.error(\"Erreur de session :\", error.message);\r\n+//           }\r\n+//         }\r\n+//       } catch (err) {\r\n+//         console.error(\"Erreur parsing URL :\", err);\r\n+//       }\r\n+//     };\r\n+\r\n+//     handleDeepLink();\r\n+//   }, []);\r\n+\r\n+//   const handleResetPassword = async () => {\r\n+//     if (newPassword.length < 8) {\r\n+//       Alert.alert(\r\n+//         \"Erreur\",\r\n+//         \"Le mot de passe doit contenir au moins 8 caractères.\"\r\n+//       );\r\n+//       return;\r\n+//     }\r\n+//     try {\r\n+//       const { error } = await supabase.auth.updateUser({\r\n+//         password: newPassword,\r\n+//       });\r\n+\r\n+//       if (error) {\r\n+//         Alert.alert(\"Erreur\", error.message);\r\n+//         return;\r\n+//       }\r\n+\r\n+//       Alert.alert(\"Succès\", \"Votre mot de passe a été modifié avec succès.\");\r\n+//       router.push(\"/(app)/Login\");\r\n+//     } catch (error) {\r\n+//       console.error(\"Password update error:\", error);\r\n+//       Alert.alert(\"Erreur\", \"Une erreur inattendue est survenue.\");\r\n+//     }\r\n+//   };\r\n+\r\n+//   return (\r\n+//     <View style={{ flex: 1, backgroundColor: \"#f9fafb\" }}>\r\n+//       <ScrollView contentContainerStyle={styles.container}>\r\n+//         <View style={styles.card}>\r\n+//           <Text style={styles.title}>Réinitialisation du mot de passe</Text>\r\n+//           <Text style={styles.subtitle}>Entrez votre nouveau mot de passe</Text>\r\n+\r\n+//           <View style={styles.inputContainer}>\r\n+//             <MaterialCommunityIcons\r\n+//               name=\"lock-outline\"\r\n+//               size={20}\r\n+//               color=\"#9ca3af\"\r\n+//               style={styles.icon}\r\n+//             />\r\n+//             <TextInput\r\n+//               style={styles.input}\r\n+//               placeholder=\"Nouveau mot de passe\"\r\n+//               secureTextEntry={!showPassword}\r\n+//               value={newPassword}\r\n+//               onChangeText={setNewPassword}\r\n+//             />\r\n+//             <TouchableOpacity\r\n+//               onPress={() => setShowPassword(!showPassword)}\r\n+//               style={styles.iconRight}\r\n+//             >\r\n+//               <MaterialCommunityIcons\r\n+//                 name={showPassword ? \"eye-off-outline\" : \"eye-outline\"}\r\n+//                 size={20}\r\n+//                 color=\"#9ca3af\"\r\n+//               />\r\n+//             </TouchableOpacity>\r\n+//           </View>\r\n+//           <Text style={styles.hintText}>\r\n+//             Le mot de passe doit contenir au moins 8 caractères.\r\n+//           </Text>\r\n+\r\n+//           <TouchableOpacity style={styles.button} onPress={handleResetPassword}>\r\n+//             <Text style={styles.buttonText}>Réinitialiser le mot de passe</Text>\r\n+//           </TouchableOpacity>\r\n+//         </View>\r\n+//       </ScrollView>\r\n+//       <Footer />\r\n+//     </View>\r\n+//   );\r\n+// };\r\n+\r\n+// export default ResetPassword;\r\n+\r\n+// const styles = StyleSheet.create({\r\n+//   container: {\r\n+//     flexGrow: 1,\r\n+//     justifyContent: \"center\",\r\n+//     padding: 20,\r\n+//   },\r\n+//   card: {\r\n+//     backgroundColor: \"#fff\",\r\n+//     borderRadius: 12,\r\n+//     padding: 20,\r\n+//     shadowColor: \"#000\",\r\n+//     shadowOpacity: 0.1,\r\n+//     shadowOffset: { width: 0, height: 2 },\r\n+//     elevation: 3,\r\n+//   },\r\n+//   title: {\r\n+//     fontSize: 22,\r\n+//     fontWeight: \"bold\",\r\n+//     textAlign: \"center\",\r\n+//     marginBottom: 8,\r\n+//     color: \"#0f172a\",\r\n+//   },\r\n+//   subtitle: {\r\n+//     textAlign: \"center\",\r\n+//     fontSize: 14,\r\n+//     color: \"#6b7280\",\r\n+//     marginBottom: 20,\r\n+//   },\r\n+//   inputContainer: {\r\n+//     flexDirection: \"row\",\r\n+//     alignItems: \"center\",\r\n+//     borderColor: \"#d1d5db\",\r\n+//     borderWidth: 1,\r\n+//     borderRadius: 8,\r\n+//     marginBottom: 12,\r\n+//     paddingHorizontal: 8,\r\n+//   },\r\n+//   input: {\r\n+//     flex: 1,\r\n+//     height: 44,\r\n+//     fontSize: 14,\r\n+//     paddingHorizontal: 8,\r\n+//   },\r\n+//   icon: {\r\n+//     marginRight: 4,\r\n+//   },\r\n+//   iconRight: {\r\n+//     padding: 4,\r\n+//   },\r\n+//   hintText: {\r\n+//     fontSize: 12,\r\n+//     color: \"#6b7280\",\r\n+//     marginBottom: 20,\r\n+//   },\r\n+//   button: {\r\n+//     backgroundColor: \"#5cb9bc\",\r\n+//     paddingVertical: 12,\r\n+//     borderRadius: 8,\r\n+//     alignItems: \"center\",\r\n+//   },\r\n+//   buttonText: {\r\n+//     color: \"#fff\",\r\n+//     fontWeight: \"bold\",\r\n+//   },\r\n+// });\r\n+\r\n+\r\n import Footer from \"@/src/components/Footer\";\r\n import { supabase } from \"@/src/integrations/supabase/client\";\r\n import { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\n import { useRouter } from \"expo-router\";\r\n@@ -12,67 +203,114 @@\n   TextInput,\r\n   TouchableOpacity,\r\n   View,\r\n } from \"react-native\";\r\n+import 'react-native-url-polyfill/auto';\r\n \r\n const ResetPassword = () => {\r\n   const [newPassword, setNewPassword] = useState(\"\");\r\n   const [showPassword, setShowPassword] = useState(false);\r\n+  const [hasSession, setHasSession] = useState(false);\r\n   const router = useRouter();\r\n \r\n-  // Récupérer access_token et refresh_token du lien (deep link)\r\n-  useEffect(() => {\r\n-    const handleDeepLink = async () => {\r\n-      const initialUrl = await Linking.getInitialURL();\r\n-      if (!initialUrl) return;\r\n+  // Fonction pour parser correctement l'URL reçue\r\n+  const parseTokens = (url: string) => {\r\n+    const u = new URL(url);\r\n+    let access_token = u.searchParams.get(\"access_token\");\r\n+    let refresh_token = u.searchParams.get(\"refresh_token\");\r\n+    let type = u.searchParams.get(\"type\");\r\n+    let token_hash = u.searchParams.get(\"token_hash\");\r\n \r\n-      try {\r\n-        const parsedUrl = new URL(initialUrl);\r\n-        const access_token = parsedUrl.searchParams.get(\"access_token\");\r\n-        const refresh_token = parsedUrl.searchParams.get(\"refresh_token\");\r\n+    // Si les tokens ne sont pas en query, on regarde dans le hash #\r\n+    if ((!access_token || !refresh_token) && u.hash) {\r\n+      const hashParams = new URLSearchParams(u.hash.slice(1));\r\n+      access_token = access_token || hashParams.get(\"access_token\");\r\n+      refresh_token = refresh_token || hashParams.get(\"refresh_token\");\r\n+      type = type || hashParams.get(\"type\");\r\n+      token_hash = token_hash || hashParams.get(\"token_hash\");\r\n+    }\r\n \r\n-        if (access_token && refresh_token) {\r\n-          const { error } = await supabase.auth.setSession({\r\n-            access_token,\r\n-            refresh_token,\r\n-          });\r\n+    return { access_token, refresh_token, type, token_hash };\r\n+  };\r\n \r\n-          if (error) {\r\n-            console.error(\"Erreur de session :\", error.message);\r\n-          }\r\n-        }\r\n-      } catch (err) {\r\n-        console.error(\"Erreur parsing URL :\", err);\r\n+  const trySetSessionFromUrl = async (url: string | null) => {\r\n+    if (!url) return;\r\n+\r\n+    // Log de l'URL dans Supabase pour debug TestFlight\r\n+    await supabase\r\n+      .from(\"reset_logs\") // ⚠️ Crée cette table dans Supabase (raw_url: text, created_at: timestamp)\r\n+      .insert({ raw_url: url, created_at: new Date().toISOString() });\r\n+\r\n+    const { access_token, refresh_token, type, token_hash } = parseTokens(url);\r\n+\r\n+    if (type !== \"recovery\") {\r\n+      console.log(\"Pas un lien de récupération, on ignore.\");\r\n+      return;\r\n+    }\r\n+\r\n+    if (access_token && refresh_token) {\r\n+      const { data, error } = await supabase.auth.setSession({\r\n+        access_token,\r\n+        refresh_token,\r\n+      });\r\n+      if (!error && data.session) {\r\n+        setHasSession(true);\r\n       }\r\n-    };\r\n+    } else if (token_hash) {\r\n+      // Cas où Supabase envoie token_hash\r\n+      const { data, error } = await supabase.auth.verifyOtp({\r\n+        type: \"recovery\",\r\n+        token_hash,\r\n+      });\r\n+      if (!error && data.session) {\r\n+        setHasSession(true);\r\n+      }\r\n+    }\r\n+  };\r\n \r\n-    handleDeepLink();\r\n+  useEffect(() => {\r\n+    // Cold start\r\n+    Linking.getInitialURL().then((url) => trySetSessionFromUrl(url));\r\n+\r\n+    // App déjà ouverte\r\n+    const sub = Linking.addEventListener(\"url\", ({ url }) => {\r\n+      trySetSessionFromUrl(url);\r\n+    });\r\n+\r\n+    // Vérif session déjà active\r\n+    (async () => {\r\n+      const { data } = await supabase.auth.getSession();\r\n+      if (data.session) {\r\n+        setHasSession(true);\r\n+      }\r\n+    })();\r\n+\r\n+    return () => sub.remove();\r\n   }, []);\r\n \r\n   const handleResetPassword = async () => {\r\n     if (newPassword.length < 8) {\r\n+      Alert.alert(\"Erreur\", \"Le mot de passe doit contenir au moins 8 caractères.\");\r\n+      return;\r\n+    }\r\n+\r\n+    const { data } = await supabase.auth.getSession();\r\n+    if (!data.session) {\r\n       Alert.alert(\r\n-        \"Erreur\",\r\n-        \"Le mot de passe doit contenir au moins 8 caractères.\"\r\n+        \"Lien invalide ou expiré\",\r\n+        \"Veuillez rouvrir le lien de réinitialisation depuis votre email.\"\r\n       );\r\n       return;\r\n     }\r\n-    try {\r\n-      const { error } = await supabase.auth.updateUser({\r\n-        password: newPassword,\r\n-      });\r\n \r\n-      if (error) {\r\n-        Alert.alert(\"Erreur\", error.message);\r\n-        return;\r\n-      }\r\n+    const { error } = await supabase.auth.updateUser({ password: newPassword });\r\n+    if (error) {\r\n+      Alert.alert(\"Erreur\", error.message);\r\n+      return;\r\n+    }\r\n \r\n-      Alert.alert(\"Succès\", \"Votre mot de passe a été modifié avec succès.\");\r\n-      router.push(\"/(app)/Login\");\r\n-    } catch (error) {\r\n-      console.error(\"Password update error:\", error);\r\n-      Alert.alert(\"Erreur\", \"Une erreur inattendue est survenue.\");\r\n-    }\r\n+    Alert.alert(\"Succès\", \"Votre mot de passe a été modifié avec succès.\");\r\n+    router.push(\"/(app)/Login\");\r\n   };\r\n \r\n   return (\r\n     <View style={{ flex: 1, backgroundColor: \"#f9fafb\" }}>\r\n@@ -105,14 +343,21 @@\n                 color=\"#9ca3af\"\r\n               />\r\n             </TouchableOpacity>\r\n           </View>\r\n+\r\n           <Text style={styles.hintText}>\r\n             Le mot de passe doit contenir au moins 8 caractères.\r\n           </Text>\r\n \r\n-          <TouchableOpacity style={styles.button} onPress={handleResetPassword}>\r\n-            <Text style={styles.buttonText}>Réinitialiser le mot de passe</Text>\r\n+          <TouchableOpacity\r\n+            style={[styles.button, !hasSession && { backgroundColor: \"#ccc\" }]}\r\n+            onPress={handleResetPassword}\r\n+            disabled={!hasSession}\r\n+          >\r\n+            <Text style={styles.buttonText}>\r\n+              {hasSession ? \"Réinitialiser le mot de passe\" : \"Ouverture du lien...\"}\r\n+            </Text>\r\n           </TouchableOpacity>\r\n         </View>\r\n       </ScrollView>\r\n       <Footer />\r\n@@ -122,13 +367,9 @@\n \r\n export default ResetPassword;\r\n \r\n const styles = StyleSheet.create({\r\n-  container: {\r\n-    flexGrow: 1,\r\n-    justifyContent: \"center\",\r\n-    padding: 20,\r\n-  },\r\n+  container: { flexGrow: 1, justifyContent: \"center\", padding: 20 },\r\n   card: {\r\n     backgroundColor: \"#fff\",\r\n     borderRadius: 12,\r\n     padding: 20,\r\n@@ -158,32 +399,16 @@\n     borderRadius: 8,\r\n     marginBottom: 12,\r\n     paddingHorizontal: 8,\r\n   },\r\n-  input: {\r\n-    flex: 1,\r\n-    height: 44,\r\n-    fontSize: 14,\r\n-    paddingHorizontal: 8,\r\n-  },\r\n-  icon: {\r\n-    marginRight: 4,\r\n-  },\r\n-  iconRight: {\r\n-    padding: 4,\r\n-  },\r\n-  hintText: {\r\n-    fontSize: 12,\r\n-    color: \"#6b7280\",\r\n-    marginBottom: 20,\r\n-  },\r\n+  input: { flex: 1, height: 44, fontSize: 14, paddingHorizontal: 8 },\r\n+  icon: { marginRight: 4 },\r\n+  iconRight: { padding: 4 },\r\n+  hintText: { fontSize: 12, color: \"#6b7280\", marginBottom: 20 },\r\n   button: {\r\n     backgroundColor: \"#5cb9bc\",\r\n     paddingVertical: 12,\r\n     borderRadius: 8,\r\n     alignItems: \"center\",\r\n   },\r\n-  buttonText: {\r\n-    color: \"#fff\",\r\n-    fontWeight: \"bold\",\r\n-  },\r\n+  buttonText: { color: \"#fff\", fontWeight: \"bold\" },\r\n });\r\n"
                },
                {
                    "date": 1754899610466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,8 +187,9 @@\n //     fontWeight: \"bold\",\r\n //   },\r\n // });\r\n \r\n+import 'react-native-url-polyfill/auto';\r\n import Footer from \"@/src/components/Footer\";\r\n import { supabase } from \"@/src/integrations/supabase/client\";\r\n import { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\n import { useRouter } from \"expo-router\";\r\n@@ -202,50 +203,47 @@\n   TextInput,\r\n   TouchableOpacity,\r\n   View,\r\n } from \"react-native\";\r\n-import \"react-native-url-polyfill/auto\";\r\n \r\n const ResetPassword = () => {\r\n   const [newPassword, setNewPassword] = useState(\"\");\r\n   const [showPassword, setShowPassword] = useState(false);\r\n   const [hasSession, setHasSession] = useState(false);\r\n+  const [email, setEmail] = useState<string | null>(null);\r\n   const router = useRouter();\r\n \r\n-  // Fonction pour parser correctement l'URL reçue\r\n   const parseTokens = (url: string) => {\r\n     const u = new URL(url);\r\n     let access_token = u.searchParams.get(\"access_token\");\r\n     let refresh_token = u.searchParams.get(\"refresh_token\");\r\n     let type = u.searchParams.get(\"type\");\r\n-    let token_hash = u.searchParams.get(\"token_hash\");\r\n+    let email = u.searchParams.get(\"email\");\r\n \r\n-    // Si les tokens ne sont pas en query, on regarde dans le hash #\r\n+    // Vérifie aussi dans le hash (#)\r\n     if ((!access_token || !refresh_token) && u.hash) {\r\n       const hashParams = new URLSearchParams(u.hash.slice(1));\r\n       access_token = access_token || hashParams.get(\"access_token\");\r\n       refresh_token = refresh_token || hashParams.get(\"refresh_token\");\r\n       type = type || hashParams.get(\"type\");\r\n-      token_hash = token_hash || hashParams.get(\"token_hash\");\r\n+      email = email || hashParams.get(\"email\");\r\n     }\r\n \r\n-    return { access_token, refresh_token, type, token_hash };\r\n+    return { access_token, refresh_token, type, email };\r\n   };\r\n \r\n   const trySetSessionFromUrl = async (url: string | null) => {\r\n     if (!url) return;\r\n \r\n-    // Log de l'URL dans Supabase pour debug TestFlight\r\n+    // Debug pour TestFlight : log dans Supabase\r\n     await supabase\r\n-      .from(\"reset_logs\") // ⚠️ Crée cette table dans Supabase (raw_url: text, created_at: timestamp)\r\n+      .from(\"reset_logs\")\r\n       .insert({ raw_url: url, created_at: new Date().toISOString() });\r\n \r\n-    const { access_token, refresh_token, type, token_hash } = parseTokens(url);\r\n+    const { access_token, refresh_token, type, email } = parseTokens(url);\r\n+    if (email) setEmail(email);\r\n \r\n-    if (type !== \"recovery\") {\r\n-      console.log(\"Pas un lien de récupération, on ignore.\");\r\n-      return;\r\n-    }\r\n+    if (type !== \"recovery\") return;\r\n \r\n     if (access_token && refresh_token) {\r\n       const { data, error } = await supabase.auth.setSession({\r\n         access_token,\r\n@@ -253,30 +251,28 @@\n       });\r\n       if (!error && data.session) {\r\n         setHasSession(true);\r\n       }\r\n-    } else if (token_hash) {\r\n-      // Cas où Supabase envoie token_hash\r\n+    } else if (access_token && email) {\r\n+      // Pas de refresh_token → verifyOtp avec email\r\n       const { data, error } = await supabase.auth.verifyOtp({\r\n+        email,\r\n+        token: access_token,\r\n         type: \"recovery\",\r\n-        token_hash,\r\n       });\r\n       if (!error && data.session) {\r\n         setHasSession(true);\r\n       }\r\n     }\r\n   };\r\n \r\n   useEffect(() => {\r\n-    // Cold start\r\n     Linking.getInitialURL().then((url) => trySetSessionFromUrl(url));\r\n \r\n-    // App déjà ouverte\r\n     const sub = Linking.addEventListener(\"url\", ({ url }) => {\r\n       trySetSessionFromUrl(url);\r\n     });\r\n \r\n-    // Vérif session déjà active\r\n     (async () => {\r\n       const { data } = await supabase.auth.getSession();\r\n       if (data.session) {\r\n         setHasSession(true);\r\n@@ -287,20 +283,17 @@\n   }, []);\r\n \r\n   const handleResetPassword = async () => {\r\n     if (newPassword.length < 8) {\r\n-      Alert.alert(\r\n-        \"Erreur\",\r\n-        \"Le mot de passe doit contenir au moins 8 caractères.\"\r\n-      );\r\n+      Alert.alert(\"Erreur\", \"Le mot de passe doit contenir au moins 8 caractères.\");\r\n       return;\r\n     }\r\n \r\n     const { data } = await supabase.auth.getSession();\r\n     if (!data.session) {\r\n       Alert.alert(\r\n         \"Lien invalide ou expiré\",\r\n-        \"Veuillez rouvrir le lien de réinitialisation depuis votre email.\"\r\n+        \"Veuillez rouvrir le lien de réinitialisation depuis l'email.\"\r\n       );\r\n       return;\r\n     }\r\n \r\n@@ -356,11 +349,9 @@\n             onPress={handleResetPassword}\r\n             disabled={!hasSession}\r\n           >\r\n             <Text style={styles.buttonText}>\r\n-              {hasSession\r\n-                ? \"Réinitialiser le mot de passe\"\r\n-                : \"Ouverture du lien...\"}\r\n+              {hasSession ? \"Réinitialiser le mot de passe\" : \"Ouverture du lien...\"}\r\n             </Text>\r\n           </TouchableOpacity>\r\n         </View>\r\n       </ScrollView>\r\n@@ -381,21 +372,10 @@\n     shadowOpacity: 0.1,\r\n     shadowOffset: { width: 0, height: 2 },\r\n     elevation: 3,\r\n   },\r\n-  title: {\r\n-    fontSize: 22,\r\n-    fontWeight: \"bold\",\r\n-    textAlign: \"center\",\r\n-    marginBottom: 8,\r\n-    color: \"#0f172a\",\r\n-  },\r\n-  subtitle: {\r\n-    textAlign: \"center\",\r\n-    fontSize: 14,\r\n-    color: \"#6b7280\",\r\n-    marginBottom: 20,\r\n-  },\r\n+  title: { fontSize: 22, fontWeight: \"bold\", textAlign: \"center\", marginBottom: 8, color: \"#0f172a\" },\r\n+  subtitle: { textAlign: \"center\", fontSize: 14, color: \"#6b7280\", marginBottom: 20 },\r\n   inputContainer: {\r\n     flexDirection: \"row\",\r\n     alignItems: \"center\",\r\n     borderColor: \"#d1d5db\",\r\n@@ -407,12 +387,7 @@\n   input: { flex: 1, height: 44, fontSize: 14, paddingHorizontal: 8 },\r\n   icon: { marginRight: 4 },\r\n   iconRight: { padding: 4 },\r\n   hintText: { fontSize: 12, color: \"#6b7280\", marginBottom: 20 },\r\n-  button: {\r\n-    backgroundColor: \"#5cb9bc\",\r\n-    paddingVertical: 12,\r\n-    borderRadius: 8,\r\n-    alignItems: \"center\",\r\n-  },\r\n+  button: { backgroundColor: \"#5cb9bc\", paddingVertical: 12, borderRadius: 8, alignItems: \"center\" },\r\n   buttonText: { color: \"#fff\", fontWeight: \"bold\" },\r\n });\r\n"
                },
                {
                    "date": 1754901473881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,8 +231,10 @@\n     return { access_token, refresh_token, type, email };\r\n   };\r\n \r\n   const trySetSessionFromUrl = async (url: string | null) => {\r\n+      console.log(\"URL reçue dans trySetSessionFromUrl:\", url); // <== Ajoute ça\r\n+\r\n     if (!url) return;\r\n \r\n     // Debug pour TestFlight : log dans Supabase\r\n     await supabase\r\n"
                }
            ],
            "date": 1754403297967,
            "name": "Commit-0",
            "content": "import Footer from \"@/src/components/Footer\";\r\nimport { supabase } from \"@/src/integrations/supabase/client\";\r\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\nimport { useRouter } from \"expo-router\";\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\n\r\nconst ResetPassword = () => {\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const router = useRouter();\r\n\r\n  const handleResetPassword = async () => {\r\n    if (newPassword.length < 8) {\r\n      Alert.alert(\r\n        \"Erreur\",\r\n        \"Le mot de passe doit contenir au moins 8 caractères.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { error } = await supabase.auth.updateUser({\r\n        password: newPassword,\r\n      });\r\n\r\n      if (error) {\r\n        Alert.alert(\"Erreur\", error.message);\r\n        return;\r\n      }\r\n\r\n      Alert.alert(\"Succès\", \"Votre mot de passe a été modifié avec succès.\");\r\n      router.push(\"/(app)/Login\");\r\n    } catch (error) {\r\n      console.error(\"Password update error:\", error);\r\n      Alert.alert(\"Erreur\", \"Une erreur inattendue est survenue.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1, backgroundColor: \"#f9fafb\" }}>\r\n      <ScrollView contentContainerStyle={styles.container}>\r\n        <View style={styles.card}>\r\n          <Text style={styles.title}>Réinitialisation du mot de passe</Text>\r\n          <Text style={styles.subtitle}>Entrez votre nouveau mot de passe</Text>\r\n\r\n          <View style={styles.inputContainer}>\r\n            <MaterialCommunityIcons\r\n              name=\"lock-outline\"\r\n              size={20}\r\n              color=\"#9ca3af\"\r\n              style={styles.icon}\r\n            />\r\n            <TextInput\r\n              style={styles.input}\r\n              placeholder=\"Nouveau mot de passe\"\r\n              secureTextEntry={!showPassword}\r\n              value={newPassword}\r\n              onChangeText={setNewPassword}\r\n            />\r\n            <TouchableOpacity\r\n              onPress={() => setShowPassword(!showPassword)}\r\n              style={styles.iconRight}\r\n            >\r\n              <MaterialCommunityIcons\r\n                name={showPassword ? \"eye-off-outline\" : \"eye-outline\"}\r\n                size={20}\r\n                color=\"#9ca3af\"\r\n              />\r\n            </TouchableOpacity>\r\n          </View>\r\n          <Text style={styles.hintText}>\r\n            Le mot de passe doit contenir au moins 8 caractères.\r\n          </Text>\r\n\r\n          <TouchableOpacity style={styles.button} onPress={handleResetPassword}>\r\n            <Text style={styles.buttonText}>Réinitialiser le mot de passe</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </ScrollView>\r\n      <Footer />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flexGrow: 1,\r\n    justifyContent: \"center\",\r\n    padding: 20,\r\n  },\r\n  card: {\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: 12,\r\n    padding: 20,\r\n    shadowColor: \"#000\",\r\n    shadowOpacity: 0.1,\r\n    shadowOffset: { width: 0, height: 2 },\r\n    elevation: 3,\r\n  },\r\n  title: {\r\n    fontSize: 22,\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n    marginBottom: 8,\r\n    color: \"#0f172a\",\r\n  },\r\n  subtitle: {\r\n    textAlign: \"center\",\r\n    fontSize: 14,\r\n    color: \"#6b7280\",\r\n    marginBottom: 20,\r\n  },\r\n  inputContainer: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    borderColor: \"#d1d5db\",\r\n    borderWidth: 1,\r\n    borderRadius: 8,\r\n    marginBottom: 12,\r\n    paddingHorizontal: 8,\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    height: 44,\r\n    fontSize: 14,\r\n    paddingHorizontal: 8,\r\n  },\r\n  icon: {\r\n    marginRight: 4,\r\n  },\r\n  iconRight: {\r\n    padding: 4,\r\n  },\r\n  hintText: {\r\n    fontSize: 12,\r\n    color: \"#6b7280\",\r\n    marginBottom: 20,\r\n  },\r\n  button: {\r\n    backgroundColor: \"#5cb9bc\",\r\n    paddingVertical: 12,\r\n    borderRadius: 8,\r\n    alignItems: \"center\",\r\n  },\r\n  buttonText: {\r\n    color: \"#fff\",\r\n    fontWeight: \"bold\",\r\n  },\r\n});\r\n"
        }
    ]
}