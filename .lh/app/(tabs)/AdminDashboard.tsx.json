{
    "sourceFile": "app/(tabs)/AdminDashboard.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752950012228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752950143298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,31 +109,44 @@\n   }, [isAdmin]);\r\n \r\n   const handleUpload = async () => {\r\n     if (!selectedClient) return;\r\n-    const result = await DocumentPicker.getDocumentAsync({});\r\n-    if (result.type !== \"success\") return;\r\n \r\n-    const filePath = `${selectedClient.id}/${result.name}`;\r\n+    const result = await DocumentPicker.getDocumentAsync();\r\n+\r\n+    if (result.canceled || !result.assets || result.assets.length === 0) return;\r\n+\r\n+    const file = result.assets[0];\r\n+    const { name, uri } = file;\r\n+\r\n+    const filePath = `${selectedClient.id}/${name}`;\r\n     const { error: uploadError } = await supabase.storage\r\n       .from(\"documents\")\r\n-      .upload(filePath, result.uri);\r\n+      .upload(filePath, {\r\n+        uri,\r\n+        type: file.mimeType || \"application/octet-stream\",\r\n+        name,\r\n+      });\r\n \r\n-    if (uploadError) return console.error(\"Erreur upload\", uploadError);\r\n+    if (uploadError) {\r\n+      console.error(\"Erreur upload\", uploadError);\r\n+      return;\r\n+    }\r\n \r\n     const { data: publicUrl } = supabase.storage\r\n       .from(\"documents\")\r\n       .getPublicUrl(filePath);\r\n-    const { data: insertedRow } = await supabase\r\n+\r\n+    const { data: insertedRow, error: insertError } = await supabase\r\n       .from(\"user_documents\")\r\n       .insert({\r\n         user_id: selectedClient.id,\r\n-        file_name: result.name,\r\n+        file_name: name,\r\n         file_url: publicUrl.publicUrl,\r\n       })\r\n       .single();\r\n \r\n-    if (insertedRow) {\r\n+    if (!insertError) {\r\n       setDocuments((prev) => [insertedRow, ...prev]);\r\n     }\r\n   };\r\n \r\n"
                },
                {
                    "date": 1752950205082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,39 +115,46 @@\n \r\n     if (result.canceled || !result.assets || result.assets.length === 0) return;\r\n \r\n     const file = result.assets[0];\r\n-    const { name, uri } = file;\r\n+    const { name, uri, mimeType } = file;\r\n \r\n-    const filePath = `${selectedClient.id}/${name}`;\r\n-    const { error: uploadError } = await supabase.storage\r\n-      .from(\"documents\")\r\n-      .upload(filePath, {\r\n-        uri,\r\n-        type: file.mimeType || \"application/octet-stream\",\r\n-        name,\r\n-      });\r\n+    try {\r\n+      // On récupère le fichier depuis le URI sous forme de blob\r\n+      const response = await fetch(uri);\r\n+      const blob = await response.blob();\r\n \r\n-    if (uploadError) {\r\n-      console.error(\"Erreur upload\", uploadError);\r\n-      return;\r\n-    }\r\n+      const filePath = `${selectedClient.id}/${name}`;\r\n \r\n-    const { data: publicUrl } = supabase.storage\r\n-      .from(\"documents\")\r\n-      .getPublicUrl(filePath);\r\n+      const { error: uploadError } = await supabase.storage\r\n+        .from(\"documents\")\r\n+        .upload(filePath, blob, {\r\n+          contentType: mimeType || \"application/octet-stream\",\r\n+        });\r\n \r\n-    const { data: insertedRow, error: insertError } = await supabase\r\n-      .from(\"user_documents\")\r\n-      .insert({\r\n-        user_id: selectedClient.id,\r\n-        file_name: name,\r\n-        file_url: publicUrl.publicUrl,\r\n-      })\r\n-      .single();\r\n+      if (uploadError) {\r\n+        console.error(\"❌ Erreur upload\", uploadError);\r\n+        return;\r\n+      }\r\n \r\n-    if (!insertError) {\r\n-      setDocuments((prev) => [insertedRow, ...prev]);\r\n+      const { data: publicUrl } = supabase.storage\r\n+        .from(\"documents\")\r\n+        .getPublicUrl(filePath);\r\n+\r\n+      const { data: insertedRow, error: insertError } = await supabase\r\n+        .from(\"user_documents\")\r\n+        .insert({\r\n+          user_id: selectedClient.id,\r\n+          file_name: name,\r\n+          file_url: publicUrl.publicUrl,\r\n+        })\r\n+        .single();\r\n+\r\n+      if (!insertError) {\r\n+        setDocuments((prev) => [insertedRow, ...prev]);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error(\"❌ Erreur traitement fichier\", error);\r\n     }\r\n   };\r\n \r\n   const handleDeleteDocument = async (docId: string) => {\r\n"
                },
                {
                    "date": 1752951457474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { supabase } from \"@/src/integrations/supabase/client\";\r\n-import { Picker } from \"@react-native-picker/picker\";\r\n+// import { Picker } from \"@react-native-picker/picker\";\r\n import * as DocumentPicker from \"expo-document-picker\";\r\n import React, { useEffect, useState } from \"react\";\r\n import {\r\n   Alert,\r\n@@ -194,24 +194,37 @@\n       ) : (\r\n         <>\r\n           <View style={styles.section}>\r\n             <Text style={styles.sectionTitle}>Clients</Text>\r\n-            <Picker\r\n-              selectedValue={selectedClient?.id || \"\"}\r\n-              onValueChange={(value) => {\r\n-                const client = clients.find((c) => c.id === value);\r\n-                setSelectedClient(client || null);\r\n-              }}\r\n+            <TouchableOpacity\r\n+              style={styles.uploadButton}\r\n+              onPress={() => setSelectedClient(null)}\r\n             >\r\n-              <Picker.Item label=\"Sélectionner un client\" value=\"\" />\r\n-              {clients.map((client) => (\r\n-                <Picker.Item\r\n-                  key={client.id}\r\n-                  label={`${client.first_name} ${client.last_name} — ${client.email}`}\r\n-                  value={client.id}\r\n-                />\r\n-              ))}\r\n-            </Picker>\r\n+              <Text style={styles.uploadButtonText}>\r\n+                Sélectionner un client\r\n+              </Text>\r\n+            </TouchableOpacity>\r\n+\r\n+            {clients.map((client) => (\r\n+              <TouchableOpacity\r\n+                key={client.id}\r\n+                style={[\r\n+                  styles.clientButton,\r\n+                  selectedClient?.id === client.id &&\r\n+                    styles.clientButtonSelected,\r\n+                ]}\r\n+                onPress={() => setSelectedClient(client)}\r\n+              >\r\n+                <Text\r\n+                  style={{\r\n+                    color:\r\n+                      selectedClient?.id === client.id ? \"#fff\" : \"#374151\",\r\n+                  }}\r\n+                >\r\n+                  {client.first_name} {client.last_name} — {client.email}\r\n+                </Text>\r\n+              </TouchableOpacity>\r\n+            ))}\r\n           </View>\r\n \r\n           {selectedClient && (\r\n             <View style={styles.section}>\r\n"
                },
                {
                    "date": 1752951474648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -408,5 +408,14 @@\n     borderRadius: 6,\r\n     alignItems: \"center\",\r\n   },\r\n   deleteButtonText: { color: \"#fff\", fontWeight: \"bold\" },\r\n+  clientButton: {\r\n+    backgroundColor: \"#e5e7eb\",\r\n+    padding: 10,\r\n+    borderRadius: 8,\r\n+    marginBottom: 8,\r\n+  },\r\n+  clientButtonSelected: {\r\n+    backgroundColor: \"#5cb9bc\",\r\n+  },\r\n });\r\n"
                }
            ],
            "date": 1752950012228,
            "name": "Commit-0",
            "content": "import { supabase } from \"@/src/integrations/supabase/client\";\r\nimport { Picker } from \"@react-native-picker/picker\";\r\nimport * as DocumentPicker from \"expo-document-picker\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  FlatList,\r\n  Linking,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Text,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\n\r\nexport default function AdminDashboard() {\r\n  const [clients, setClients] = useState<any[]>([]);\r\n  const [selectedClient, setSelectedClient] = useState<any | null>(null);\r\n  const [documents, setDocuments] = useState<any[]>([]);\r\n  const [reviews, setReviews] = useState<any[]>([]);\r\n  const [loadingReviews, setLoadingReviews] = useState(true);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchClientsAndCheckAdmin = async () => {\r\n      const { data: userData } = await supabase.auth.getUser();\r\n      if (!userData?.user) return;\r\n\r\n      const currentUserId = userData.user.id;\r\n      const { data: profileData } = await supabase\r\n        .from(\"profiles\")\r\n        .select(\"is_admin\")\r\n        .eq(\"id\", currentUserId)\r\n        .single();\r\n\r\n      if (!profileData?.is_admin) return;\r\n      setIsAdmin(true);\r\n\r\n      const { data: allProfiles } = await supabase\r\n        .from(\"profiles\")\r\n        .select(\"id, email, first_name, last_name\");\r\n\r\n      if (allProfiles) setClients(allProfiles);\r\n    };\r\n    fetchClientsAndCheckAdmin();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchDocuments = async () => {\r\n      if (!selectedClient) return;\r\n      const { data } = await supabase\r\n        .from(\"user_documents\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", selectedClient.id)\r\n        .order(\"uploaded_at\", { ascending: false });\r\n\r\n      if (data) setDocuments(data);\r\n    };\r\n    fetchDocuments();\r\n  }, [selectedClient]);\r\n\r\n  useEffect(() => {\r\n    const fetchAllReviews = async () => {\r\n      if (!isAdmin) return setLoadingReviews(false);\r\n      setLoadingReviews(true);\r\n\r\n      try {\r\n        const { data: reviewsData } = await supabase\r\n          .from(\"reviews\")\r\n          .select(\r\n            \"id, comment, rating, product_id, product_name, created_at, user_id\"\r\n          )\r\n          .order(\"created_at\", { ascending: false });\r\n\r\n        if (!reviewsData) {\r\n          setReviews([]);\r\n          setLoadingReviews(false);\r\n          return;\r\n        }\r\n\r\n        const userIds = Array.from(new Set(reviewsData.map((r) => r.user_id)));\r\n        const { data: profilesData } = await supabase\r\n          .from(\"profiles\")\r\n          .select(\"id, first_name, last_name\")\r\n          .in(\"id\", userIds as string[]);\r\n\r\n        const profileMap: { [key: string]: string } = {};\r\n        if (profilesData) {\r\n          profilesData.forEach((p) => {\r\n            profileMap[p.id] = `${p.first_name || \"\"} ${\r\n              p.last_name || \"\"\r\n            }`.trim();\r\n          });\r\n        }\r\n\r\n        const formatted = reviewsData.map((r) => ({\r\n          ...r,\r\n          user_name: profileMap[r.user_id] || \"Client\",\r\n        }));\r\n\r\n        setReviews(formatted);\r\n      } catch (error) {\r\n        console.error(\"Erreur reviews:\", error);\r\n      } finally {\r\n        setLoadingReviews(false);\r\n      }\r\n    };\r\n    fetchAllReviews();\r\n  }, [isAdmin]);\r\n\r\n  const handleUpload = async () => {\r\n    if (!selectedClient) return;\r\n    const result = await DocumentPicker.getDocumentAsync({});\r\n    if (result.type !== \"success\") return;\r\n\r\n    const filePath = `${selectedClient.id}/${result.name}`;\r\n    const { error: uploadError } = await supabase.storage\r\n      .from(\"documents\")\r\n      .upload(filePath, result.uri);\r\n\r\n    if (uploadError) return console.error(\"Erreur upload\", uploadError);\r\n\r\n    const { data: publicUrl } = supabase.storage\r\n      .from(\"documents\")\r\n      .getPublicUrl(filePath);\r\n    const { data: insertedRow } = await supabase\r\n      .from(\"user_documents\")\r\n      .insert({\r\n        user_id: selectedClient.id,\r\n        file_name: result.name,\r\n        file_url: publicUrl.publicUrl,\r\n      })\r\n      .single();\r\n\r\n    if (insertedRow) {\r\n      setDocuments((prev) => [insertedRow, ...prev]);\r\n    }\r\n  };\r\n\r\n  const handleDeleteDocument = async (docId: string) => {\r\n    const { error } = await supabase\r\n      .from(\"user_documents\")\r\n      .delete()\r\n      .eq(\"id\", docId);\r\n    if (!error) setDocuments((prev) => prev.filter((d) => d.id !== docId));\r\n  };\r\n\r\n  const handleDeleteReview = (reviewId: string) => {\r\n    Alert.alert(\"Confirmation\", \"Supprimer cet avis ?\", [\r\n      { text: \"Annuler\", style: \"cancel\" },\r\n      {\r\n        text: \"Supprimer\",\r\n        style: \"destructive\",\r\n        onPress: async () => {\r\n          const { error } = await supabase\r\n            .from(\"reviews\")\r\n            .delete()\r\n            .eq(\"id\", reviewId);\r\n          if (!error)\r\n            setReviews((prev) => prev.filter((r) => r.id !== reviewId));\r\n        },\r\n      },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <ScrollView style={styles.container}>\r\n      <Text style={styles.mainTitle}>\r\n        Gestion des clients, documents et avis\r\n      </Text>\r\n\r\n      {!isAdmin ? (\r\n        <Text style={styles.warning}>⛔️ Accès réservé aux admins</Text>\r\n      ) : (\r\n        <>\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>Clients</Text>\r\n            <Picker\r\n              selectedValue={selectedClient?.id || \"\"}\r\n              onValueChange={(value) => {\r\n                const client = clients.find((c) => c.id === value);\r\n                setSelectedClient(client || null);\r\n              }}\r\n            >\r\n              <Picker.Item label=\"Sélectionner un client\" value=\"\" />\r\n              {clients.map((client) => (\r\n                <Picker.Item\r\n                  key={client.id}\r\n                  label={`${client.first_name} ${client.last_name} — ${client.email}`}\r\n                  value={client.id}\r\n                />\r\n              ))}\r\n            </Picker>\r\n          </View>\r\n\r\n          {selectedClient && (\r\n            <View style={styles.section}>\r\n              <Text style={styles.sectionTitle}>\r\n                Documents de {selectedClient.first_name}{\" \"}\r\n                {selectedClient.last_name}\r\n              </Text>\r\n\r\n              <TouchableOpacity\r\n                style={styles.uploadButton}\r\n                onPress={handleUpload}\r\n              >\r\n                <Text style={styles.uploadButtonText}>\r\n                  Uploader un document\r\n                </Text>\r\n              </TouchableOpacity>\r\n\r\n              {documents.length === 0 ? (\r\n                <Text style={styles.emptyText}>\r\n                  Aucun document pour ce client.\r\n                </Text>\r\n              ) : (\r\n                documents.map((doc) => (\r\n                  <View key={doc.id} style={styles.docCard}>\r\n                    <View style={{ flex: 1 }}>\r\n                      <Text style={styles.docName}>{doc.file_name}</Text>\r\n                      <Text style={styles.docDate}>\r\n                        {new Date(doc.uploaded_at).toLocaleDateString(\"fr-FR\", {\r\n                          day: \"2-digit\",\r\n                          month: \"long\",\r\n                          year: \"numeric\",\r\n                          hour: \"2-digit\",\r\n                          minute: \"2-digit\",\r\n                        })}\r\n                      </Text>\r\n                      <TouchableOpacity\r\n                        onPress={() => Linking.openURL(doc.file_url)}\r\n                      >\r\n                        <Text style={styles.docLink}>Voir le fichier</Text>\r\n                      </TouchableOpacity>\r\n                    </View>\r\n                    <TouchableOpacity\r\n                      onPress={() =>\r\n                        Alert.alert(\"Confirmation\", \"Supprimer ce document ?\", [\r\n                          { text: \"Annuler\", style: \"cancel\" },\r\n                          {\r\n                            text: \"Supprimer\",\r\n                            style: \"destructive\",\r\n                            onPress: () => handleDeleteDocument(doc.id),\r\n                          },\r\n                        ])\r\n                      }\r\n                    >\r\n                      <Text style={styles.deleteText}>Supprimer</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ))\r\n              )}\r\n            </View>\r\n          )}\r\n\r\n          <View style={styles.section}>\r\n            <Text style={styles.sectionTitle}>\r\n              Avis clients ({loadingReviews ? \"...\" : reviews.length})\r\n            </Text>\r\n\r\n            {loadingReviews ? (\r\n              <Text style={styles.emptyText}>Chargement des avis…</Text>\r\n            ) : reviews.length === 0 ? (\r\n              <Text style={styles.emptyText}>Aucun avis trouvé.</Text>\r\n            ) : (\r\n              <FlatList\r\n                data={reviews}\r\n                keyExtractor={(item) => item.id}\r\n                renderItem={({ item }) => (\r\n                  <View style={styles.reviewCard}>\r\n                    <Text style={styles.reviewDate}>\r\n                      {new Date(item.created_at).toLocaleDateString(\"fr-FR\", {\r\n                        day: \"2-digit\",\r\n                        month: \"long\",\r\n                        year: \"numeric\",\r\n                        hour: \"2-digit\",\r\n                        minute: \"2-digit\",\r\n                      })}\r\n                    </Text>\r\n                    <Text style={styles.reviewLine}>\r\n                      Utilisateur : {item.user_name}\r\n                    </Text>\r\n                    <Text style={styles.reviewLine}>\r\n                      Produit : {item.product_name}\r\n                    </Text>\r\n                    <Text style={styles.reviewLine}>\r\n                      Note : {item.rating} / 5\r\n                    </Text>\r\n                    <Text style={styles.reviewLine}>\r\n                      Commentaire : {item.comment}\r\n                    </Text>\r\n                    <TouchableOpacity\r\n                      style={styles.deleteButton}\r\n                      onPress={() => handleDeleteReview(item.id)}\r\n                    >\r\n                      <Text style={styles.deleteButtonText}>Supprimer</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n              />\r\n            )}\r\n          </View>\r\n        </>\r\n      )}\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: { flex: 1, padding: 16, backgroundColor: \"#f9fafb\" },\r\n  mainTitle: {\r\n    fontSize: 24,\r\n    fontWeight: \"bold\",\r\n    color: \"#1f2937\",\r\n    marginBottom: 16,\r\n  },\r\n  warning: {\r\n    color: \"red\",\r\n    fontSize: 16,\r\n    textAlign: \"center\",\r\n    marginVertical: 20,\r\n  },\r\n  section: {\r\n    backgroundColor: \"#fff\",\r\n    padding: 16,\r\n    borderRadius: 12,\r\n    marginBottom: 20,\r\n  },\r\n  sectionTitle: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n    color: \"#374151\",\r\n    marginBottom: 12,\r\n  },\r\n  uploadButton: {\r\n    backgroundColor: \"#3b82f6\",\r\n    padding: 10,\r\n    borderRadius: 8,\r\n    alignItems: \"center\",\r\n    marginBottom: 12,\r\n  },\r\n  uploadButtonText: { color: \"#fff\", fontWeight: \"bold\" },\r\n  emptyText: { color: \"#6b7280\", fontStyle: \"italic\" },\r\n  docCard: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    backgroundColor: \"#f3f4f6\",\r\n    padding: 12,\r\n    borderRadius: 8,\r\n    marginBottom: 10,\r\n  },\r\n  docName: { fontWeight: \"bold\", color: \"#1f2937\" },\r\n  docDate: { color: \"#6b7280\", fontSize: 12 },\r\n  docLink: { color: \"#3b82f6\", marginTop: 4, fontSize: 12 },\r\n  deleteText: {\r\n    color: \"#dc2626\",\r\n    fontWeight: \"bold\",\r\n    fontSize: 12,\r\n    marginTop: 4,\r\n  },\r\n  reviewCard: {\r\n    backgroundColor: \"#fff\",\r\n    borderWidth: 1,\r\n    borderColor: \"#e5e7eb\",\r\n    borderRadius: 8,\r\n    padding: 12,\r\n    marginBottom: 12,\r\n  },\r\n  reviewDate: { color: \"#6b7280\", fontSize: 12, marginBottom: 4 },\r\n  reviewLine: { fontSize: 14, color: \"#374151\", marginBottom: 2 },\r\n  deleteButton: {\r\n    backgroundColor: \"#ef4444\",\r\n    marginTop: 8,\r\n    padding: 8,\r\n    borderRadius: 6,\r\n    alignItems: \"center\",\r\n  },\r\n  deleteButtonText: { color: \"#fff\", fontWeight: \"bold\" },\r\n});\r\n"
        }
    ]
}