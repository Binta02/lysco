{
    "sourceFile": "app/(tabs)/Checkout.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1752953812846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752953875069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n         }\r\n       }\r\n \r\n       setItems([]); // clearCart simulation\r\n-      router.push(\"/confirmation\");\r\n+      router.push(\"/\");\r\n     } catch (err: any) {\r\n       Alert.alert(\"Erreur\", err.message || \"Une erreur est survenue\");\r\n     } finally {\r\n       setIsProcessing(false);\r\n"
                },
                {
                    "date": 1752953952340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,10 +163,15 @@\n \r\n       // Ex. insertion simple (à compléter selon back)\r\n       for (const item of items) {\r\n         if (item.id.includes(\"domiciliation\")) {\r\n+          if (!userId) {\r\n+            Alert.alert(\"Erreur\", \"Utilisateur non connecté.\");\r\n+            return;\r\n+          }\r\n+\r\n           await supabase.from(\"user_domiciliations\").insert({\r\n-            user_id: userId,\r\n+            user_id: userId, // ici userId est garanti non null\r\n             address: formData.address,\r\n             duration: \"12mois\",\r\n             plan_type: \"entreprise\",\r\n             status: \"active\",\r\n"
                },
                {
                    "date": 1752953980664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,8 +148,14 @@\n     getSession();\r\n   }, []);\r\n \r\n   const handleSubmit = async () => {\r\n+    if (!userId) {\r\n+      Alert.alert(\"Erreur\", \"Utilisateur non connecté.\");\r\n+      setIsProcessing(false);\r\n+      return;\r\n+    }\r\n+\r\n     setIsProcessing(true);\r\n     try {\r\n       const oneTimeItems = items.filter(\r\n         (i) => !subscriptionProductIds.includes(i.id)\r\n"
                },
                {
                    "date": 1752958953245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { supabase } from \"@/integrations/supabase/client\";\r\n-import { useStripe } from \"@stripe/stripe-react-native\";\r\n+import { useConfirmPayment, useStripe } from \"@stripe/stripe-react-native\";\r\n import { useRouter } from \"expo-router\";\r\n import React, { useEffect, useState } from \"react\";\r\n import {\r\n   Alert,\r\n@@ -20,8 +20,22 @@\n   price: number;\r\n   quantity: number;\r\n   period?: string; // Ajout de la propriété optionnelle period\r\n };\r\n+type FormValues = {\r\n+  email: string;\r\n+  firstName: string;\r\n+  lastName: string;\r\n+  companyName: string;\r\n+  businessActivity: string;\r\n+  siretNumber: string;\r\n+  address: string;\r\n+  addressDetails?: string;\r\n+  city: string;\r\n+  postalCode: string;\r\n+  phone?: string;\r\n+  country: string;\r\n+};\r\n \r\n // Form schema (à adapter avec react-hook-form ou manuellement, car zod + react-hook-form Web ne marchent pas direct en RN)\r\n const formSchema = {\r\n   email: \"\",\r\n@@ -147,56 +161,111 @@\n     };\r\n     getSession();\r\n   }, []);\r\n \r\n-  const handleSubmit = async () => {\r\n-    if (!userId) {\r\n-      Alert.alert(\"Erreur\", \"Utilisateur non connecté.\");\r\n-      setIsProcessing(false);\r\n-      return;\r\n-    }\r\n+  const { confirmPayment } = useConfirmPayment();\r\n \r\n+  const handleSubmit = async (data: FormValues) => {\r\n     setIsProcessing(true);\r\n     try {\r\n-      const oneTimeItems = items.filter(\r\n-        (i) => !subscriptionProductIds.includes(i.id)\r\n+      // 1️⃣ Appel backend → récupérer clientSecret\r\n+      const resp = await fetch(\r\n+        \"https://mon-backend-node.vercel.app/api/create-payment-intent\",\r\n+        {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/json\" },\r\n+          body: JSON.stringify({\r\n+            email: data.email,\r\n+            userId,\r\n+            items,\r\n+            total,\r\n+            clientInfo: {\r\n+              firstName: data.firstName,\r\n+              lastName: data.lastName,\r\n+              address: data.address,\r\n+              siretNumber: data.siretNumber,\r\n+            },\r\n+          }),\r\n+        }\r\n       );\r\n-      const subscriptionItems = items.filter((i) =>\r\n-        subscriptionProductIds.includes(i.id)\r\n-      );\r\n \r\n-      // Simulation pour React Native (Stripe RN a un flow différent de Stripe.js)\r\n-      Alert.alert(\"Paiement simulé\", `Total à payer : ${total.toFixed(2)} €`);\r\n+      if (!resp.ok) {\r\n+        const text = await resp.text();\r\n+        throw new Error(\"Backend error: \" + text);\r\n+      }\r\n \r\n-      // Ex. insertion simple (à compléter selon back)\r\n-      for (const item of items) {\r\n-        if (item.id.includes(\"domiciliation\")) {\r\n-          if (!userId) {\r\n-            Alert.alert(\"Erreur\", \"Utilisateur non connecté.\");\r\n-            return;\r\n-          }\r\n+      const { clientSecret } = await resp.json();\r\n \r\n-          await supabase.from(\"user_domiciliations\").insert({\r\n-            user_id: userId, // ici userId est garanti non null\r\n-            address: formData.address,\r\n-            duration: \"12mois\",\r\n-            plan_type: \"entreprise\",\r\n-            status: \"active\",\r\n-          });\r\n-        } else {\r\n-          await supabase.from(\"user_services\").insert({\r\n-            user_id: userId,\r\n-            name: item.title,\r\n-            price: item.price,\r\n-            status: \"active\",\r\n-            category: \"commande\",\r\n-          });\r\n-        }\r\n+      if (!clientSecret) {\r\n+        throw new Error(\"Pas de clientSecret retourné par le backend.\");\r\n       }\r\n \r\n-      setItems([]); // clearCart simulation\r\n+      // 2️⃣ Stripe : confirmer le paiement\r\n+      const { error, paymentIntent } = await confirmPayment(clientSecret, {\r\n+        paymentMethodType: \"Card\",\r\n+        paymentMethodData: {\r\n+          billingDetails: {\r\n+            email: data.email,\r\n+            name: `${data.firstName} ${data.lastName}`,\r\n+          },\r\n+        },\r\n+      });\r\n+\r\n+      if (error) {\r\n+        console.error(\"Erreur Stripe confirmPayment:\", error);\r\n+        Alert.alert(\"Paiement échoué\", error.message || \"Erreur inconnue\");\r\n+        return;\r\n+      }\r\n+\r\n+      console.log(\"✅ Paiement réussi:\", paymentIntent);\r\n+\r\n+      // 3️⃣ Sauvegarde dans Supabase\r\n+      await Promise.all(\r\n+        items.map(async (item) => {\r\n+          if (item.id.includes(\"domiciliation\")) {\r\n+            const duration = item.title.includes(\"1 an\")\r\n+              ? \"12mois\"\r\n+              : item.title.includes(\"6 mois\")\r\n+              ? \"6mois\"\r\n+              : item.title.includes(\"3 mois\")\r\n+              ? \"3mois\"\r\n+              : null;\r\n+            const plan_type = item.title.includes(\"micro\")\r\n+              ? \"micro\"\r\n+              : item.title.includes(\"entreprise\")\r\n+              ? \"entreprise\"\r\n+              : item.title.includes(\"association\")\r\n+              ? \"association\"\r\n+              : null;\r\n+\r\n+            const { error } = await supabase\r\n+              .from(\"user_domiciliations\")\r\n+              .insert({\r\n+                user_id: userId!,\r\n+                address: data.address,\r\n+                duration,\r\n+                plan_type,\r\n+                status: \"active\",\r\n+              });\r\n+            if (error) console.error(\"Erreur domiciliation:\", error);\r\n+          } else {\r\n+            const { error } = await supabase.from(\"user_services\").insert({\r\n+              user_id: userId!,\r\n+              name: item.title,\r\n+              price: item.price,\r\n+              status: \"active\",\r\n+              category: \"commande\",\r\n+            });\r\n+            if (error) console.error(\"Erreur service:\", error);\r\n+          }\r\n+        })\r\n+      );\r\n+\r\n+      clearCart();\r\n+      Alert.alert(\"Paiement réussi\", \"Merci pour votre commande !\");\r\n       router.push(\"/\");\r\n     } catch (err: any) {\r\n+      console.error(\"Erreur handleSubmit:\", err);\r\n       Alert.alert(\"Erreur\", err.message || \"Une erreur est survenue\");\r\n     } finally {\r\n       setIsProcessing(false);\r\n     }\r\n"
                },
                {
                    "date": 1752959056670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { supabase } from \"@/integrations/supabase/client\";\r\n+import { useCart } from \"@/src/components/cart/CartContext\";\r\n import { useConfirmPayment, useStripe } from \"@stripe/stripe-react-native\";\r\n import { useRouter } from \"expo-router\";\r\n import React, { useEffect, useState } from \"react\";\r\n import {\r\n@@ -103,8 +104,9 @@\n \r\n const Checkout = () => {\r\n   const stripe = useStripe();\r\n   const router = useRouter();\r\n+  const { clearCart } = useCart();\r\n \r\n   const [items, setItems] = useState<CartItem[]>([\r\n     // Exemple temporaire\r\n     { id: \"service-colis\", title: \"Service Colis\", price: 50, quantity: 1 },\r\n"
                },
                {
                    "date": 1752959141941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -419,9 +419,9 @@\n             isProcessing\r\n               ? \"Traitement en cours...\"\r\n               : `Payer ${total.toFixed(2)} €`\r\n           }\r\n-          onPress={handleSubmit}\r\n+          onPress={() => handleSubmit(formData)}\r\n           disabled={isProcessing}\r\n         />\r\n       </View>\r\n     </ScrollView>\r\n"
                },
                {
                    "date": 1752960071122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,10 @@\n import { useCart } from \"@/src/components/cart/CartContext\";\r\n import { useConfirmPayment, useStripe } from \"@stripe/stripe-react-native\";\r\n import { useRouter } from \"expo-router\";\r\n import React, { useEffect, useState } from \"react\";\r\n+import { Platform } from \"react-native\";\r\n+\r\n import {\r\n   Alert,\r\n   Button,\r\n   ScrollView,\r\n@@ -163,9 +165,11 @@\n     };\r\n     getSession();\r\n   }, []);\r\n \r\n-  const { confirmPayment } = useConfirmPayment();\r\n+  // const { confirmPayment } = useConfirmPayment();\r\n+  const { confirmPayment } =\r\n+    Platform.OS !== \"web\" ? useConfirmPayment() : { confirmPayment: null };\r\n \r\n   const handleSubmit = async (data: FormValues) => {\r\n     setIsProcessing(true);\r\n     try {\r\n"
                },
                {
                    "date": 1752960209606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,10 @@\n import { useCart } from \"@/src/components/cart/CartContext\";\r\n import { useConfirmPayment, useStripe } from \"@stripe/stripe-react-native\";\r\n import { useRouter } from \"expo-router\";\r\n import React, { useEffect, useState } from \"react\";\r\n-import { Platform } from \"react-native\";\r\n \r\n import {\r\n-  Alert,\r\n   Button,\r\n   ScrollView,\r\n   StyleSheet,\r\n   Text,\r\n@@ -169,8 +167,10 @@\n   // const { confirmPayment } = useConfirmPayment();\r\n   const { confirmPayment } =\r\n     Platform.OS !== \"web\" ? useConfirmPayment() : { confirmPayment: null };\r\n \r\n+  import { Platform, Alert } from \"react-native\";\r\n+\r\n   const handleSubmit = async (data: FormValues) => {\r\n     setIsProcessing(true);\r\n     try {\r\n       // 1️⃣ Appel backend → récupérer clientSecret\r\n@@ -204,27 +204,33 @@\n       if (!clientSecret) {\r\n         throw new Error(\"Pas de clientSecret retourné par le backend.\");\r\n       }\r\n \r\n-      // 2️⃣ Stripe : confirmer le paiement\r\n-      const { error, paymentIntent } = await confirmPayment(clientSecret, {\r\n-        paymentMethodType: \"Card\",\r\n-        paymentMethodData: {\r\n-          billingDetails: {\r\n-            email: data.email,\r\n-            name: `${data.firstName} ${data.lastName}`,\r\n+      // 2️⃣ Stripe ou simulation\r\n+      if (Platform.OS === \"web\") {\r\n+        console.log(\"💻 Simulation de paiement sur le web...\");\r\n+        Alert.alert(\"Simulation\", \"Paiement simulé avec succès sur le Web.\");\r\n+      } else {\r\n+        const { confirmPayment } = useConfirmPayment();\r\n+        const { error, paymentIntent } = await confirmPayment(clientSecret, {\r\n+          paymentMethodType: \"Card\",\r\n+          paymentMethodData: {\r\n+            billingDetails: {\r\n+              email: data.email,\r\n+              name: `${data.firstName} ${data.lastName}`,\r\n+            },\r\n           },\r\n-        },\r\n-      });\r\n+        });\r\n \r\n-      if (error) {\r\n-        console.error(\"Erreur Stripe confirmPayment:\", error);\r\n-        Alert.alert(\"Paiement échoué\", error.message || \"Erreur inconnue\");\r\n-        return;\r\n+        if (error) {\r\n+          console.error(\"Erreur Stripe confirmPayment:\", error);\r\n+          Alert.alert(\"Paiement échoué\", error.message || \"Erreur inconnue\");\r\n+          return;\r\n+        }\r\n+\r\n+        console.log(\"✅ Paiement réussi:\", paymentIntent);\r\n       }\r\n \r\n-      console.log(\"✅ Paiement réussi:\", paymentIntent);\r\n-\r\n       // 3️⃣ Sauvegarde dans Supabase\r\n       await Promise.all(\r\n         items.map(async (item) => {\r\n           if (item.id.includes(\"domiciliation\")) {\r\n"
                },
                {
                    "date": 1752960231002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { useCart } from \"@/src/components/cart/CartContext\";\r\n import { useConfirmPayment, useStripe } from \"@stripe/stripe-react-native\";\r\n import { useRouter } from \"expo-router\";\r\n import React, { useEffect, useState } from \"react\";\r\n+import { Alert, Platform } from \"react-native\";\r\n \r\n import {\r\n   Button,\r\n   ScrollView,\r\n@@ -167,10 +168,8 @@\n   // const { confirmPayment } = useConfirmPayment();\r\n   const { confirmPayment } =\r\n     Platform.OS !== \"web\" ? useConfirmPayment() : { confirmPayment: null };\r\n \r\n-  import { Platform, Alert } from \"react-native\";\r\n-\r\n   const handleSubmit = async (data: FormValues) => {\r\n     setIsProcessing(true);\r\n     try {\r\n       // 1️⃣ Appel backend → récupérer clientSecret\r\n"
                },
                {
                    "date": 1752960368916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,24 @@\n import { supabase } from \"@/integrations/supabase/client\";\r\n import { useCart } from \"@/src/components/cart/CartContext\";\r\n-import { useConfirmPayment, useStripe } from \"@stripe/stripe-react-native\";\r\n+// import { useConfirmPayment, useStripe } from \"@stripe/stripe-react-native\";\r\n import { useRouter } from \"expo-router\";\r\n import React, { useEffect, useState } from \"react\";\r\n-import { Alert, Platform } from \"react-native\";\r\n-\r\n import {\r\n-  Button,\r\n-  ScrollView,\r\n+  Alert, Button, Platform, ScrollView,\r\n   StyleSheet,\r\n   Text,\r\n   TextInput,\r\n-  View,\r\n+  View\r\n } from \"react-native\";\r\n import RNPickerSelect from \"react-native-picker-select\";\r\n+// ⛔️ IMPORTANT : importer Stripe uniquement si pas web\r\n+let useConfirmPayment: any = () => ({ confirmPayment: async () => ({}) });\r\n+let useStripe: any = () => ({});\r\n+if (Platform.OS !== \"web\") {\r\n+  // @ts-ignore\r\n+  ({ useConfirmPayment, useStripe } = require(\"@stripe/stripe-react-native\"));\r\n+}\r\n \r\n // Ajout du type CartItem avec la propriété optionnelle 'period'\r\n type CartItem = {\r\n   id: string;\r\n"
                },
                {
                    "date": 1752961193408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,30 @@\n import { supabase } from \"@/integrations/supabase/client\";\r\n import { useCart } from \"@/src/components/cart/CartContext\";\r\n-// import { useConfirmPayment, useStripe } from \"@stripe/stripe-react-native\";\r\n import { useRouter } from \"expo-router\";\r\n import React, { useEffect, useState } from \"react\";\r\n import {\r\n-  Alert, Button, Platform, ScrollView,\r\n+  Alert,\r\n+  Button,\r\n+  Platform,\r\n+  ScrollView,\r\n   StyleSheet,\r\n   Text,\r\n   TextInput,\r\n-  View\r\n+  View,\r\n } from \"react-native\";\r\n import RNPickerSelect from \"react-native-picker-select\";\r\n-// ⛔️ IMPORTANT : importer Stripe uniquement si pas web\r\n-let useConfirmPayment: any = () => ({ confirmPayment: async () => ({}) });\r\n-let useStripe: any = () => ({});\r\n+\r\n+// ⚠️ Stripe hooks initialisés plus tard\r\n+let useConfirmPayment: any;\r\n+let useStripe: any;\r\n+\r\n if (Platform.OS !== \"web\") {\r\n   // @ts-ignore\r\n-  ({ useConfirmPayment, useStripe } = require(\"@stripe/stripe-react-native\"));\r\n+  const stripe = require(\"@stripe/stripe-react-native\");\r\n+  useConfirmPayment = stripe.useConfirmPayment;\r\n+  useStripe = stripe.useStripe;\r\n }\r\n-\r\n // Ajout du type CartItem avec la propriété optionnelle 'period'\r\n type CartItem = {\r\n   id: string;\r\n   title: string;\r\n@@ -175,46 +180,33 @@\n \r\n   const handleSubmit = async (data: FormValues) => {\r\n     setIsProcessing(true);\r\n     try {\r\n-      // 1️⃣ Appel backend → récupérer clientSecret\r\n-      const resp = await fetch(\r\n-        \"https://mon-backend-node.vercel.app/api/create-payment-intent\",\r\n-        {\r\n-          method: \"POST\",\r\n-          headers: { \"Content-Type\": \"application/json\" },\r\n-          body: JSON.stringify({\r\n-            email: data.email,\r\n-            userId,\r\n-            items,\r\n-            total,\r\n-            clientInfo: {\r\n-              firstName: data.firstName,\r\n-              lastName: data.lastName,\r\n-              address: data.address,\r\n-              siretNumber: data.siretNumber,\r\n-            },\r\n-          }),\r\n-        }\r\n-      );\r\n+      const resp = await fetch(\"https://mon-backend-node.vercel.app/api/create-payment-intent\", {\r\n+        method: \"POST\",\r\n+        headers: { \"Content-Type\": \"application/json\" },\r\n+        body: JSON.stringify({\r\n+          email: data.email,\r\n+          userId,\r\n+          items,\r\n+          total,\r\n+          clientInfo: {\r\n+            firstName: data.firstName,\r\n+            lastName: data.lastName,\r\n+            address: data.address,\r\n+            siretNumber: data.siretNumber,\r\n+          },\r\n+        }),\r\n+      });\r\n \r\n-      if (!resp.ok) {\r\n-        const text = await resp.text();\r\n-        throw new Error(\"Backend error: \" + text);\r\n-      }\r\n-\r\n+      if (!resp.ok) throw new Error(\"Backend error: \" + (await resp.text()));\r\n       const { clientSecret } = await resp.json();\r\n+      if (!clientSecret) throw new Error(\"Pas de clientSecret retourné par le backend.\");\r\n \r\n-      if (!clientSecret) {\r\n-        throw new Error(\"Pas de clientSecret retourné par le backend.\");\r\n-      }\r\n-\r\n-      // 2️⃣ Stripe ou simulation\r\n       if (Platform.OS === \"web\") {\r\n-        console.log(\"💻 Simulation de paiement sur le web...\");\r\n-        Alert.alert(\"Simulation\", \"Paiement simulé avec succès sur le Web.\");\r\n+        console.log(\"💻 Simulation de paiement web réussie\");\r\n+        Alert.alert(\"Simulation Web\", \"Paiement simulé avec succès.\");\r\n       } else {\r\n-        const { confirmPayment } = useConfirmPayment();\r\n         const { error, paymentIntent } = await confirmPayment(clientSecret, {\r\n           paymentMethodType: \"Card\",\r\n           paymentMethodData: {\r\n             billingDetails: {\r\n@@ -224,55 +216,50 @@\n           },\r\n         });\r\n \r\n         if (error) {\r\n-          console.error(\"Erreur Stripe confirmPayment:\", error);\r\n+          console.error(\"Erreur Stripe:\", error);\r\n           Alert.alert(\"Paiement échoué\", error.message || \"Erreur inconnue\");\r\n           return;\r\n         }\r\n \r\n         console.log(\"✅ Paiement réussi:\", paymentIntent);\r\n       }\r\n \r\n-      // 3️⃣ Sauvegarde dans Supabase\r\n       await Promise.all(\r\n         items.map(async (item) => {\r\n-          if (item.id.includes(\"domiciliation\")) {\r\n-            const duration = item.title.includes(\"1 an\")\r\n-              ? \"12mois\"\r\n-              : item.title.includes(\"6 mois\")\r\n-              ? \"6mois\"\r\n-              : item.title.includes(\"3 mois\")\r\n-              ? \"3mois\"\r\n-              : null;\r\n-            const plan_type = item.title.includes(\"micro\")\r\n-              ? \"micro\"\r\n-              : item.title.includes(\"entreprise\")\r\n-              ? \"entreprise\"\r\n-              : item.title.includes(\"association\")\r\n-              ? \"association\"\r\n-              : null;\r\n+          const table = item.id.includes(\"domiciliation\") ? \"user_domiciliations\" : \"user_services\";\r\n+          const payload =\r\n+            table === \"user_domiciliations\"\r\n+              ? {\r\n+                  user_id: userId!,\r\n+                  address: data.address,\r\n+                  duration: item.title.includes(\"1 an\")\r\n+                    ? \"12mois\"\r\n+                    : item.title.includes(\"6 mois\")\r\n+                    ? \"6mois\"\r\n+                    : item.title.includes(\"3 mois\")\r\n+                    ? \"3mois\"\r\n+                    : null,\r\n+                  plan_type: item.title.includes(\"micro\")\r\n+                    ? \"micro\"\r\n+                    : item.title.includes(\"entreprise\")\r\n+                    ? \"entreprise\"\r\n+                    : item.title.includes(\"association\")\r\n+                    ? \"association\"\r\n+                    : null,\r\n+                  status: \"active\",\r\n+                }\r\n+              : {\r\n+                  user_id: userId!,\r\n+                  name: item.title,\r\n+                  price: item.price,\r\n+                  status: \"active\",\r\n+                  category: \"commande\",\r\n+                };\r\n \r\n-            const { error } = await supabase\r\n-              .from(\"user_domiciliations\")\r\n-              .insert({\r\n-                user_id: userId!,\r\n-                address: data.address,\r\n-                duration,\r\n-                plan_type,\r\n-                status: \"active\",\r\n-              });\r\n-            if (error) console.error(\"Erreur domiciliation:\", error);\r\n-          } else {\r\n-            const { error } = await supabase.from(\"user_services\").insert({\r\n-              user_id: userId!,\r\n-              name: item.title,\r\n-              price: item.price,\r\n-              status: \"active\",\r\n-              category: \"commande\",\r\n-            });\r\n-            if (error) console.error(\"Erreur service:\", error);\r\n-          }\r\n+          const { error } = await supabase.from(table).insert(payload);\r\n+          if (error) console.error(`Erreur enregistrement (${table}):`, error);\r\n         })\r\n       );\r\n \r\n       clearCart();\r\n@@ -284,9 +271,9 @@\n     } finally {\r\n       setIsProcessing(false);\r\n     }\r\n   };\r\n-\r\n+  \r\n   return {\r\n     formData,\r\n     setFormData,\r\n     handleSubmit,\r\n"
                },
                {
                    "date": 1753018749139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n import { supabase } from \"@/integrations/supabase/client\";\r\n import { useCart } from \"@/src/components/cart/CartContext\";\r\n+import Footer from \"@/src/components/Footer\";\r\n+import Navbar from \"@/src/components/Navbar\";\r\n import { useRouter } from \"expo-router\";\r\n import React, { useEffect, useState } from \"react\";\r\n import {\r\n   Alert,\r\n@@ -306,132 +308,139 @@\n     setFormData((prev) => ({ ...prev, [name]: value }));\r\n   };\r\n \r\n   return (\r\n-    <ScrollView style={styles.container}>\r\n-      <Text style={styles.title}>Finaliser votre commande</Text>\r\n+    <View style={{ flex: 1, backgroundColor: \"#f9fafb\" }}>\r\n+      <Navbar />\r\n+      <ScrollView\r\n+        style={styles.container}\r\n+        contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n+      >\r\n+        <Text style={styles.title}>Finaliser votre commande</Text>\r\n \r\n-      {/* Informations de facturation */}\r\n-      <View style={styles.section}>\r\n-        <Text style={styles.sectionTitle}>Informations de facturation</Text>\r\n+        {/* Informations de facturation */}\r\n+        <View style={styles.section}>\r\n+          <Text style={styles.sectionTitle}>Informations de facturation</Text>\r\n \r\n-        <TextInput\r\n-          style={styles.input}\r\n-          placeholder=\"E-mail\"\r\n-          value={formData.email}\r\n-          onChangeText={(val) => handleChange(\"email\", val)}\r\n-        />\r\n-        <CountrySelect\r\n-          value={formData.country}\r\n-          onValueChange={(val) => handleChange(\"country\", val)}\r\n-        />\r\n-        <View style={styles.row}>\r\n           <TextInput\r\n-            style={[styles.input, styles.inputHalf]}\r\n-            placeholder=\"Prénom\"\r\n-            value={formData.firstName}\r\n-            onChangeText={(val) => handleChange(\"firstName\", val)}\r\n+            style={styles.input}\r\n+            placeholder=\"E-mail\"\r\n+            value={formData.email}\r\n+            onChangeText={(val) => handleChange(\"email\", val)}\r\n           />\r\n+          <CountrySelect\r\n+            value={formData.country}\r\n+            onValueChange={(val) => handleChange(\"country\", val)}\r\n+          />\r\n+          <View style={styles.row}>\r\n+            <TextInput\r\n+              style={[styles.input, styles.inputHalf]}\r\n+              placeholder=\"Prénom\"\r\n+              value={formData.firstName}\r\n+              onChangeText={(val) => handleChange(\"firstName\", val)}\r\n+            />\r\n+            <TextInput\r\n+              style={[styles.input, styles.inputHalf]}\r\n+              placeholder=\"Nom\"\r\n+              value={formData.lastName}\r\n+              onChangeText={(val) => handleChange(\"lastName\", val)}\r\n+            />\r\n+          </View>\r\n           <TextInput\r\n-            style={[styles.input, styles.inputHalf]}\r\n-            placeholder=\"Nom\"\r\n-            value={formData.lastName}\r\n-            onChangeText={(val) => handleChange(\"lastName\", val)}\r\n+            style={styles.input}\r\n+            placeholder=\"Nom de l'entreprise\"\r\n+            value={formData.companyName}\r\n+            onChangeText={(val) => handleChange(\"companyName\", val)}\r\n           />\r\n-        </View>\r\n-        <TextInput\r\n-          style={styles.input}\r\n-          placeholder=\"Nom de l'entreprise\"\r\n-          value={formData.companyName}\r\n-          onChangeText={(val) => handleChange(\"companyName\", val)}\r\n-        />\r\n-        <TextInput\r\n-          style={styles.input}\r\n-          placeholder=\"Activité de l'entreprise\"\r\n-          value={formData.businessActivity}\r\n-          onChangeText={(val) => handleChange(\"businessActivity\", val)}\r\n-        />\r\n-        <TextInput\r\n-          style={styles.input}\r\n-          placeholder=\"Numéro SIRET\"\r\n-          value={formData.siretNumber}\r\n-          onChangeText={(val) => handleChange(\"siretNumber\", val)}\r\n-        />\r\n-        <TextInput\r\n-          style={styles.input}\r\n-          placeholder=\"Adresse\"\r\n-          value={formData.address}\r\n-          onChangeText={(val) => handleChange(\"address\", val)}\r\n-        />\r\n-        <TextInput\r\n-          style={styles.input}\r\n-          placeholder=\"Complément d'adresse\"\r\n-          value={formData.addressDetails}\r\n-          onChangeText={(val) => handleChange(\"addressDetails\", val)}\r\n-        />\r\n-        <View style={styles.row}>\r\n           <TextInput\r\n-            style={[styles.input, styles.inputHalf]}\r\n-            placeholder=\"Ville\"\r\n-            value={formData.city}\r\n-            onChangeText={(val) => handleChange(\"city\", val)}\r\n+            style={styles.input}\r\n+            placeholder=\"Activité de l'entreprise\"\r\n+            value={formData.businessActivity}\r\n+            onChangeText={(val) => handleChange(\"businessActivity\", val)}\r\n           />\r\n           <TextInput\r\n-            style={[styles.input, styles.inputHalf]}\r\n-            placeholder=\"Code postal\"\r\n-            value={formData.postalCode}\r\n-            onChangeText={(val) => handleChange(\"postalCode\", val)}\r\n+            style={styles.input}\r\n+            placeholder=\"Numéro SIRET\"\r\n+            value={formData.siretNumber}\r\n+            onChangeText={(val) => handleChange(\"siretNumber\", val)}\r\n           />\r\n+          <TextInput\r\n+            style={styles.input}\r\n+            placeholder=\"Adresse\"\r\n+            value={formData.address}\r\n+            onChangeText={(val) => handleChange(\"address\", val)}\r\n+          />\r\n+          <TextInput\r\n+            style={styles.input}\r\n+            placeholder=\"Complément d'adresse\"\r\n+            value={formData.addressDetails}\r\n+            onChangeText={(val) => handleChange(\"addressDetails\", val)}\r\n+          />\r\n+          <View style={styles.row}>\r\n+            <TextInput\r\n+              style={[styles.input, styles.inputHalf]}\r\n+              placeholder=\"Ville\"\r\n+              value={formData.city}\r\n+              onChangeText={(val) => handleChange(\"city\", val)}\r\n+            />\r\n+            <TextInput\r\n+              style={[styles.input, styles.inputHalf]}\r\n+              placeholder=\"Code postal\"\r\n+              value={formData.postalCode}\r\n+              onChangeText={(val) => handleChange(\"postalCode\", val)}\r\n+            />\r\n+          </View>\r\n+          <TextInput\r\n+            style={styles.input}\r\n+            placeholder=\"Téléphone\"\r\n+            value={formData.phone}\r\n+            onChangeText={(val) => handleChange(\"phone\", val)}\r\n+          />\r\n         </View>\r\n-        <TextInput\r\n-          style={styles.input}\r\n-          placeholder=\"Téléphone\"\r\n-          value={formData.phone}\r\n-          onChangeText={(val) => handleChange(\"phone\", val)}\r\n-        />\r\n-      </View>\r\n \r\n-      {/* Résumé commande */}\r\n-      <View style={styles.section}>\r\n-        <Text style={styles.sectionTitle}>Votre commande</Text>\r\n-        {items.map((item) => (\r\n-          <View key={item.id} style={styles.itemRow}>\r\n-            <View>\r\n-              <Text style={styles.itemTitle}>{item.title}</Text>\r\n-              <Text style={styles.itemSub}>Quantité : {item.quantity}</Text>\r\n+        {/* Résumé commande */}\r\n+        <View style={styles.section}>\r\n+          <Text style={styles.sectionTitle}>Votre commande</Text>\r\n+          {items.map((item) => (\r\n+            <View key={item.id} style={styles.itemRow}>\r\n+              <View>\r\n+                <Text style={styles.itemTitle}>{item.title}</Text>\r\n+                <Text style={styles.itemSub}>Quantité : {item.quantity}</Text>\r\n+              </View>\r\n+              <Text style={styles.itemPrice}>\r\n+                {(item.price * item.quantity).toFixed(2)} €\r\n+              </Text>\r\n             </View>\r\n-            <Text style={styles.itemPrice}>\r\n-              {(item.price * item.quantity).toFixed(2)} €\r\n-            </Text>\r\n+          ))}\r\n+          <View style={styles.summaryRow}>\r\n+            <Text>Sous-total</Text>\r\n+            <Text>{subtotal.toFixed(2)} €</Text>\r\n           </View>\r\n-        ))}\r\n-        <View style={styles.summaryRow}>\r\n-          <Text>Sous-total</Text>\r\n-          <Text>{subtotal.toFixed(2)} €</Text>\r\n+          <View style={styles.summaryRow}>\r\n+            <Text>TVA (20%)</Text>\r\n+            <Text>{tax.toFixed(2)} €</Text>\r\n+          </View>\r\n+          <View style={[styles.summaryRow, styles.totalRow]}>\r\n+            <Text style={styles.totalText}>Total</Text>\r\n+            <Text style={styles.totalText}>{total.toFixed(2)} €</Text>\r\n+          </View>\r\n         </View>\r\n-        <View style={styles.summaryRow}>\r\n-          <Text>TVA (20%)</Text>\r\n-          <Text>{tax.toFixed(2)} €</Text>\r\n+\r\n+        {/* Bouton paiement */}\r\n+        <View style={styles.buttonContainer}>\r\n+          <Button\r\n+            title={\r\n+              isProcessing\r\n+                ? \"Traitement en cours...\"\r\n+                : `Payer ${total.toFixed(2)} €`\r\n+            }\r\n+            onPress={() => handleSubmit(formData)}\r\n+            disabled={isProcessing}\r\n+          />\r\n         </View>\r\n-        <View style={[styles.summaryRow, styles.totalRow]}>\r\n-          <Text style={styles.totalText}>Total</Text>\r\n-          <Text style={styles.totalText}>{total.toFixed(2)} €</Text>\r\n-        </View>\r\n-      </View>\r\n-\r\n-      {/* Bouton paiement */}\r\n-      <View style={styles.buttonContainer}>\r\n-        <Button\r\n-          title={\r\n-            isProcessing\r\n-              ? \"Traitement en cours...\"\r\n-              : `Payer ${total.toFixed(2)} €`\r\n-          }\r\n-          onPress={() => handleSubmit(formData)}\r\n-          disabled={isProcessing}\r\n-        />\r\n-      </View>\r\n-    </ScrollView>\r\n+        <Footer />\r\n+      </ScrollView>\r\n+    </View>\r\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n"
                },
                {
                    "date": 1753019658356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import { supabase } from \"@/integrations/supabase/client\";\r\n import { useCart } from \"@/src/components/cart/CartContext\";\r\n import Footer from \"@/src/components/Footer\";\r\n-import Navbar from \"@/src/components/Navbar\";\r\n import { useRouter } from \"expo-router\";\r\n import React, { useEffect, useState } from \"react\";\r\n import {\r\n   Alert,\r\n@@ -309,9 +308,8 @@\n   };\r\n \r\n   return (\r\n     <View style={{ flex: 1, backgroundColor: \"#f9fafb\" }}>\r\n-      <Navbar />\r\n       <ScrollView\r\n         style={styles.container}\r\n         contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n       >\r\n"
                },
                {
                    "date": 1753023895805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,8 +312,9 @@\n       <ScrollView\r\n         style={styles.container}\r\n         contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n       >\r\n+        <View style={{ padding: 16 }}>\r\n         <Text style={styles.title}>Finaliser votre commande</Text>\r\n \r\n         {/* Informations de facturation */}\r\n         <View style={styles.section}>\r\n@@ -434,8 +435,9 @@\n             onPress={() => handleSubmit(formData)}\r\n             disabled={isProcessing}\r\n           />\r\n         </View>\r\n+        </View>\r\n         <Footer />\r\n       </ScrollView>\r\n     </View>\r\n   );\r\n"
                },
                {
                    "date": 1753023912108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -443,9 +443,11 @@\n   );\r\n }\r\n \r\n const styles = StyleSheet.create({\r\n-  container: { padding: 16, backgroundColor: \"#fff\" },\r\n+  container: {\r\n+    flex: 1,\r\n+     backgroundColor: \"#fff\" },\r\n   title: {\r\n     fontSize: 24,\r\n     fontWeight: \"bold\",\r\n     textAlign: \"center\",\r\n"
                },
                {
                    "date": 1753024026662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -442,51 +442,111 @@\n     </View>\r\n   );\r\n }\r\n \r\n+\r\n const styles = StyleSheet.create({\r\n   container: {\r\n     flex: 1,\r\n-    backgroundColor: \"#fff\",\r\n+    backgroundColor: '#f9fafb',\r\n   },\r\n   title: {\r\n-    fontSize: 24,\r\n-    fontWeight: \"bold\",\r\n-    textAlign: \"center\",\r\n-    marginBottom: 20,\r\n+    fontSize: 26,\r\n+    fontWeight: 'bold',\r\n+    textAlign: 'center',\r\n+    color: '#0f172a',\r\n+    marginBottom: 28,\r\n   },\r\n-  section: { marginBottom: 24 },\r\n-  sectionTitle: { fontSize: 18, fontWeight: \"600\", marginBottom: 12 },\r\n+  section: {\r\n+    backgroundColor: '#fff',\r\n+    borderRadius: 16,\r\n+    padding: 16,\r\n+    marginBottom: 24,\r\n+    shadowColor: '#000',\r\n+    shadowOffset: { width: 0, height: 2 },\r\n+    shadowOpacity: 0.06,\r\n+    shadowRadius: 6,\r\n+    elevation: 2,\r\n+  },\r\n+  sectionTitle: {\r\n+    fontSize: 18,\r\n+    fontWeight: '700',\r\n+    color: '#0f172a',\r\n+    marginBottom: 16,\r\n+  },\r\n   input: {\r\n+    backgroundColor: '#f1f5f9',\r\n+    borderColor: '#d1d5db',\r\n     borderWidth: 1,\r\n-    borderColor: \"#ccc\",\r\n-    borderRadius: 8,\r\n-    padding: 10,\r\n+    borderRadius: 12,\r\n+    paddingVertical: 12,\r\n+    paddingHorizontal: 14,\r\n+    fontSize: 14,\r\n+    color: '#0f172a',\r\n     marginBottom: 12,\r\n   },\r\n-  row: { flexDirection: \"row\", justifyContent: \"space-between\" },\r\n-  inputHalf: { width: \"48%\" },\r\n+  row: {\r\n+    flexDirection: 'row',\r\n+    justifyContent: 'space-between',\r\n+    gap: 8,\r\n+  },\r\n+  inputHalf: {\r\n+    flex: 1,\r\n+  },\r\n   itemRow: {\r\n-    flexDirection: \"row\",\r\n-    justifyContent: \"space-between\",\r\n-    marginBottom: 8,\r\n+    flexDirection: 'row',\r\n+    justifyContent: 'space-between',\r\n+    alignItems: 'center',\r\n+    marginBottom: 12,\r\n+    paddingBottom: 8,\r\n     borderBottomWidth: 1,\r\n-    borderColor: \"#eee\",\r\n-    paddingBottom: 8,\r\n+    borderColor: '#e5e7eb',\r\n   },\r\n-  itemTitle: { fontWeight: \"600\" },\r\n-  itemSub: { fontSize: 12, color: \"#666\" },\r\n-  itemPrice: { fontWeight: \"600\" },\r\n+  itemTitle: {\r\n+    fontWeight: '600',\r\n+    fontSize: 14,\r\n+    color: '#0f172a',\r\n+  },\r\n+  itemSub: {\r\n+    fontSize: 12,\r\n+    color: '#6b7280',\r\n+  },\r\n+  itemPrice: {\r\n+    fontWeight: '600',\r\n+    fontSize: 14,\r\n+    color: '#0f172a',\r\n+  },\r\n   summaryRow: {\r\n-    flexDirection: \"row\",\r\n-    justifyContent: \"space-between\",\r\n-    marginTop: 4,\r\n+    flexDirection: 'row',\r\n+    justifyContent: 'space-between',\r\n+    marginTop: 6,\r\n   },\r\n   totalRow: {\r\n-    marginTop: 8,\r\n+    marginTop: 10,\r\n     borderTopWidth: 1,\r\n-    borderColor: \"#000\",\r\n-    paddingTop: 8,\r\n+    borderColor: '#d1d5db',\r\n+    paddingTop: 10,\r\n   },\r\n-  totalText: { fontWeight: \"700\" },\r\n-  buttonContainer: { marginTop: 20 },\r\n+  totalText: {\r\n+    fontWeight: '700',\r\n+    fontSize: 16,\r\n+    color: '#0f172a',\r\n+  },\r\n+  buttonContainer: {\r\n+    marginTop: 20,\r\n+    backgroundColor: '#5cb9bc',\r\n+    borderRadius: 30,\r\n+    alignItems: 'center',\r\n+    paddingVertical: 16,\r\n+    shadowColor: '#000',\r\n+    shadowOffset: { width: 0, height: 2 },\r\n+    shadowOpacity: 0.1,\r\n+    shadowRadius: 6,\r\n+    elevation: 3,\r\n+  },\r\n+  buttonText: {\r\n+    color: '#fff',\r\n+    fontSize: 16,\r\n+    fontWeight: '700',\r\n+  },\r\n });\r\n+\r\n"
                },
                {
                    "date": 1753024090243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -540,8 +540,9 @@\n     shadowOffset: { width: 0, height: 2 },\r\n     shadowOpacity: 0.1,\r\n     shadowRadius: 6,\r\n     elevation: 3,\r\n+    color: \"#fff\",\r\n   },\r\n   buttonText: {\r\n     color: \"#fff\",\r\n     fontSize: 16,\r\n"
                }
            ],
            "date": 1752953812845,
            "name": "Commit-0",
            "content": "import { supabase } from \"@/integrations/supabase/client\";\r\nimport { useStripe } from \"@stripe/stripe-react-native\";\r\nimport { useRouter } from \"expo-router\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  Button,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  View,\r\n} from \"react-native\";\r\nimport RNPickerSelect from \"react-native-picker-select\";\r\n\r\n// Ajout du type CartItem avec la propriété optionnelle 'period'\r\ntype CartItem = {\r\n  id: string;\r\n  title: string;\r\n  price: number;\r\n  quantity: number;\r\n  period?: string; // Ajout de la propriété optionnelle period\r\n};\r\n\r\n// Form schema (à adapter avec react-hook-form ou manuellement, car zod + react-hook-form Web ne marchent pas direct en RN)\r\nconst formSchema = {\r\n  email: \"\",\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  companyName: \"\",\r\n  businessActivity: \"\",\r\n  siretNumber: \"\",\r\n  address: \"\",\r\n  addressDetails: \"\",\r\n  city: \"\",\r\n  postalCode: \"\",\r\n  phone: \"\",\r\n  country: \"France\",\r\n};\r\n\r\nconst CountrySelect = ({\r\n  value,\r\n  onValueChange,\r\n}: {\r\n  value: string;\r\n  onValueChange: (val: string) => void;\r\n}) => {\r\n  const [options, setOptions] = useState<{ value: string; label: string }[]>(\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Comme i18n-iso-countries n'est pas toujours dispo en RN, on peut hardcoder une liste réduite\r\n    const countryArr = [\r\n      { value: \"FR\", label: \"France\" },\r\n      { value: \"BE\", label: \"Belgique\" },\r\n      { value: \"CH\", label: \"Suisse\" },\r\n    ];\r\n    setOptions(countryArr);\r\n  }, []);\r\n\r\n  return (\r\n    <RNPickerSelect\r\n      onValueChange={onValueChange}\r\n      value={value}\r\n      placeholder={{ label: \"Sélectionnez un pays\", value: null }}\r\n      items={options.map((c) => ({ label: c.label, value: c.value }))}\r\n      style={{\r\n        inputIOS: {\r\n          fontSize: 16,\r\n          padding: 12,\r\n          borderWidth: 1,\r\n          borderColor: \"#5cb9bc\",\r\n          borderRadius: 8,\r\n          marginVertical: 8,\r\n        },\r\n        inputAndroid: {\r\n          fontSize: 16,\r\n          padding: 12,\r\n          borderWidth: 1,\r\n          borderColor: \"#5cb9bc\",\r\n          borderRadius: 8,\r\n          marginVertical: 8,\r\n        },\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst Checkout = () => {\r\n  const stripe = useStripe();\r\n  const router = useRouter();\r\n\r\n  const [items, setItems] = useState<CartItem[]>([\r\n    // Exemple temporaire\r\n    { id: \"service-colis\", title: \"Service Colis\", price: 50, quantity: 1 },\r\n  ]);\r\n  const subtotal = items.reduce(\r\n    (sum, item) => sum + item.price * item.quantity,\r\n    0\r\n  );\r\n  const tax = subtotal * 0.2;\r\n  const total = subtotal + tax;\r\n\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [userId, setUserId] = useState<string | null>(null);\r\n\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    companyName: \"\",\r\n    businessActivity: \"\",\r\n    siretNumber: \"\",\r\n    address: \"\",\r\n    addressDetails: \"\",\r\n    city: \"\",\r\n    postalCode: \"\",\r\n    phone: \"\",\r\n    country: \"France\",\r\n  });\r\n\r\n  const subscriptionProductIds = [\r\n    \"domiciliation-mensuel-societe-Abonnement-Mensuel\",\r\n    \"domiciliation-mensuel-societe-Abonnement-6-mois\",\r\n    \"domiciliation-mensuel-auto-entrepreneur-Abonnement-Mensuel\",\r\n    \"domiciliation-mensuel-auto-entreprise-Abonnement-6-mois\",\r\n    \"domiciliation-mensuel-association\",\r\n    \"service-reexpedition\",\r\n    \"service-scan\",\r\n    \"service-colis\",\r\n  ];\r\n\r\n  const getPriceIdFromProductId = (productId: string): string | undefined => {\r\n    const map: Record<string, string> = {\r\n      \"service-colis\": \"price_1RZSUML4PnylHeS6TrrTxJK7\",\r\n      \"service-reexpedition\": \"price_1RZSVDL4PnylHeS6rWzjPwPs\",\r\n      // [... ajoute les autres ici si besoin]\r\n    };\r\n    return map[productId];\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getSession = async () => {\r\n      const { data } = await supabase.auth.getSession();\r\n      setUserId(data?.session?.user.id || null);\r\n    };\r\n    getSession();\r\n  }, []);\r\n\r\n  const handleSubmit = async () => {\r\n    setIsProcessing(true);\r\n    try {\r\n      const oneTimeItems = items.filter(\r\n        (i) => !subscriptionProductIds.includes(i.id)\r\n      );\r\n      const subscriptionItems = items.filter((i) =>\r\n        subscriptionProductIds.includes(i.id)\r\n      );\r\n\r\n      // Simulation pour React Native (Stripe RN a un flow différent de Stripe.js)\r\n      Alert.alert(\"Paiement simulé\", `Total à payer : ${total.toFixed(2)} €`);\r\n\r\n      // Ex. insertion simple (à compléter selon back)\r\n      for (const item of items) {\r\n        if (item.id.includes(\"domiciliation\")) {\r\n          await supabase.from(\"user_domiciliations\").insert({\r\n            user_id: userId,\r\n            address: formData.address,\r\n            duration: \"12mois\",\r\n            plan_type: \"entreprise\",\r\n            status: \"active\",\r\n          });\r\n        } else {\r\n          await supabase.from(\"user_services\").insert({\r\n            user_id: userId,\r\n            name: item.title,\r\n            price: item.price,\r\n            status: \"active\",\r\n            category: \"commande\",\r\n          });\r\n        }\r\n      }\r\n\r\n      setItems([]); // clearCart simulation\r\n      router.push(\"/confirmation\");\r\n    } catch (err: any) {\r\n      Alert.alert(\"Erreur\", err.message || \"Une erreur est survenue\");\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    formData,\r\n    setFormData,\r\n    handleSubmit,\r\n    isProcessing,\r\n    items,\r\n    subtotal,\r\n    tax,\r\n    total,\r\n  };\r\n};\r\nexport default function CheckoutScreen() {\r\n  const {\r\n    formData,\r\n    setFormData,\r\n    handleSubmit,\r\n    isProcessing,\r\n    items,\r\n    subtotal,\r\n    tax,\r\n    total,\r\n  } = Checkout();\r\n\r\n  const handleChange = (name: string, value: string) => {\r\n    setFormData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <ScrollView style={styles.container}>\r\n      <Text style={styles.title}>Finaliser votre commande</Text>\r\n\r\n      {/* Informations de facturation */}\r\n      <View style={styles.section}>\r\n        <Text style={styles.sectionTitle}>Informations de facturation</Text>\r\n\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"E-mail\"\r\n          value={formData.email}\r\n          onChangeText={(val) => handleChange(\"email\", val)}\r\n        />\r\n        <CountrySelect\r\n          value={formData.country}\r\n          onValueChange={(val) => handleChange(\"country\", val)}\r\n        />\r\n        <View style={styles.row}>\r\n          <TextInput\r\n            style={[styles.input, styles.inputHalf]}\r\n            placeholder=\"Prénom\"\r\n            value={formData.firstName}\r\n            onChangeText={(val) => handleChange(\"firstName\", val)}\r\n          />\r\n          <TextInput\r\n            style={[styles.input, styles.inputHalf]}\r\n            placeholder=\"Nom\"\r\n            value={formData.lastName}\r\n            onChangeText={(val) => handleChange(\"lastName\", val)}\r\n          />\r\n        </View>\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Nom de l'entreprise\"\r\n          value={formData.companyName}\r\n          onChangeText={(val) => handleChange(\"companyName\", val)}\r\n        />\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Activité de l'entreprise\"\r\n          value={formData.businessActivity}\r\n          onChangeText={(val) => handleChange(\"businessActivity\", val)}\r\n        />\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Numéro SIRET\"\r\n          value={formData.siretNumber}\r\n          onChangeText={(val) => handleChange(\"siretNumber\", val)}\r\n        />\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Adresse\"\r\n          value={formData.address}\r\n          onChangeText={(val) => handleChange(\"address\", val)}\r\n        />\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Complément d'adresse\"\r\n          value={formData.addressDetails}\r\n          onChangeText={(val) => handleChange(\"addressDetails\", val)}\r\n        />\r\n        <View style={styles.row}>\r\n          <TextInput\r\n            style={[styles.input, styles.inputHalf]}\r\n            placeholder=\"Ville\"\r\n            value={formData.city}\r\n            onChangeText={(val) => handleChange(\"city\", val)}\r\n          />\r\n          <TextInput\r\n            style={[styles.input, styles.inputHalf]}\r\n            placeholder=\"Code postal\"\r\n            value={formData.postalCode}\r\n            onChangeText={(val) => handleChange(\"postalCode\", val)}\r\n          />\r\n        </View>\r\n        <TextInput\r\n          style={styles.input}\r\n          placeholder=\"Téléphone\"\r\n          value={formData.phone}\r\n          onChangeText={(val) => handleChange(\"phone\", val)}\r\n        />\r\n      </View>\r\n\r\n      {/* Résumé commande */}\r\n      <View style={styles.section}>\r\n        <Text style={styles.sectionTitle}>Votre commande</Text>\r\n        {items.map((item) => (\r\n          <View key={item.id} style={styles.itemRow}>\r\n            <View>\r\n              <Text style={styles.itemTitle}>{item.title}</Text>\r\n              <Text style={styles.itemSub}>Quantité : {item.quantity}</Text>\r\n            </View>\r\n            <Text style={styles.itemPrice}>\r\n              {(item.price * item.quantity).toFixed(2)} €\r\n            </Text>\r\n          </View>\r\n        ))}\r\n        <View style={styles.summaryRow}>\r\n          <Text>Sous-total</Text>\r\n          <Text>{subtotal.toFixed(2)} €</Text>\r\n        </View>\r\n        <View style={styles.summaryRow}>\r\n          <Text>TVA (20%)</Text>\r\n          <Text>{tax.toFixed(2)} €</Text>\r\n        </View>\r\n        <View style={[styles.summaryRow, styles.totalRow]}>\r\n          <Text style={styles.totalText}>Total</Text>\r\n          <Text style={styles.totalText}>{total.toFixed(2)} €</Text>\r\n        </View>\r\n      </View>\r\n\r\n      {/* Bouton paiement */}\r\n      <View style={styles.buttonContainer}>\r\n        <Button\r\n          title={\r\n            isProcessing\r\n              ? \"Traitement en cours...\"\r\n              : `Payer ${total.toFixed(2)} €`\r\n          }\r\n          onPress={handleSubmit}\r\n          disabled={isProcessing}\r\n        />\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: { padding: 16, backgroundColor: \"#fff\" },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n    marginBottom: 20,\r\n  },\r\n  section: { marginBottom: 24 },\r\n  sectionTitle: { fontSize: 18, fontWeight: \"600\", marginBottom: 12 },\r\n  input: {\r\n    borderWidth: 1,\r\n    borderColor: \"#ccc\",\r\n    borderRadius: 8,\r\n    padding: 10,\r\n    marginBottom: 12,\r\n  },\r\n  row: { flexDirection: \"row\", justifyContent: \"space-between\" },\r\n  inputHalf: { width: \"48%\" },\r\n  itemRow: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginBottom: 8,\r\n    borderBottomWidth: 1,\r\n    borderColor: \"#eee\",\r\n    paddingBottom: 8,\r\n  },\r\n  itemTitle: { fontWeight: \"600\" },\r\n  itemSub: { fontSize: 12, color: \"#666\" },\r\n  itemPrice: { fontWeight: \"600\" },\r\n  summaryRow: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    marginTop: 4,\r\n  },\r\n  totalRow: {\r\n    marginTop: 8,\r\n    borderTopWidth: 1,\r\n    borderColor: \"#000\",\r\n    paddingTop: 8,\r\n  },\r\n  totalText: { fontWeight: \"700\" },\r\n  buttonContainer: { marginTop: 20 },\r\n});\r\n"
        }
    ]
}