{
    "sourceFile": "app/(tabs)/Dashboard.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1752757276557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752758164667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,8 @@\n // Dashboard.tsx\r\n-import { supabase } from \"@/integrations/supabase/client.js\";\r\n-import ProfileEditForm from \"@/src/components/dashboard/ProfileEditForm.js\";\r\n-import Footer from \"@/src/components/Footer.js\";\r\n-import Navbar from \"@/src/components/Navbar.js\";\r\n-import { Button } from \"@/src/components/ui/button.js\";\r\n-import { useUserData } from \"@/src/hooks/useUserData.js\";\r\n-import type { RootStackParamList } from \"@/src/navigation/types.js\";\r\n-import { humanizeReservationType } from \"@/src/utils/humanize.js\";\r\n import { useNavigation } from \"@react-navigation/native\";\r\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\n+import { Session } from \"@supabase/supabase-js\";\r\n import { format } from \"date-fns\";\r\n import { fr } from \"date-fns/locale\";\r\n import React, { useEffect, useState } from \"react\";\r\n import {\r\n@@ -21,8 +14,16 @@\n   Text,\r\n   TouchableOpacity,\r\n   View,\r\n } from \"react-native\";\r\n+import ProfileEditForm from \"../../src/components/dashboard/ProfileEditForm.js\";\r\n+import Footer from \"../../src/components/Footer.js\";\r\n+import Navbar from \"../../src/components/Navbar.js\";\r\n+import { Button } from \"../../src/components/ui/button.js\";\r\n+import { useUserData } from \"../../src/hooks/useUserData.js\";\r\n+import { supabase } from \"../../src/integrations/supabase/client.js\";\r\n+import type { RootStackParamList } from \"../../src/navigation/types.js\";\r\n+import { humanizeReservationType } from \"../../src/utils/humanize.js\";\r\n \r\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n \r\n const Dashboard = () => {\r\n@@ -36,8 +37,9 @@\n   const [stripeInvoices, setStripeInvoices] = useState<any[]>([]);\r\n   const [isEditingProfile, setIsEditingProfile] = useState(false);\r\n   const [loadingDocuments, setLoadingDocuments] = useState(false);\r\n   const [loadingReservations, setLoadingReservations] = useState(true);\r\n+  const [session, setSession] = useState<Session | null>(null);\r\n \r\n   const {\r\n     profile,\r\n     loading: userDataLoading,\r\n@@ -459,9 +461,9 @@\n \r\n   if (isEditingProfile) {\r\n     return (\r\n       <View className=\"flex flex-col min-h-screen\">\r\n-        <Navbar />\r\n+        <Navbar session={session} />\r\n         <main className=\"flex-1 container mx-auto px-4 py-8\">\r\n           <ProfileEditForm\r\n             profile={profile}\r\n             onUpdate={updateProfile}\r\n"
                },
                {
                    "date": 1752758533528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   Text,\r\n   TouchableOpacity,\r\n   View,\r\n } from \"react-native\";\r\n-import ProfileEditForm from \"../../src/components/dashboard/ProfileEditForm.js\";\r\n+import ProfileEditForm from \"../../src/components/dashboard/ProfileEditForm\";\r\n import Footer from \"../../src/components/Footer.js\";\r\n import Navbar from \"../../src/components/Navbar.js\";\r\n import { Button } from \"../../src/components/ui/button.js\";\r\n import { useUserData } from \"../../src/hooks/useUserData.js\";\r\n"
                },
                {
                    "date": 1752758560342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,15 +15,15 @@\n   TouchableOpacity,\r\n   View,\r\n } from \"react-native\";\r\n import ProfileEditForm from \"../../src/components/dashboard/ProfileEditForm\";\r\n-import Footer from \"../../src/components/Footer.js\";\r\n-import Navbar from \"../../src/components/Navbar.js\";\r\n-import { Button } from \"../../src/components/ui/button.js\";\r\n-import { useUserData } from \"../../src/hooks/useUserData.js\";\r\n-import { supabase } from \"../../src/integrations/supabase/client.js\";\r\n-import type { RootStackParamList } from \"../../src/navigation/types.js\";\r\n-import { humanizeReservationType } from \"../../src/utils/humanize.js\";\r\n+import Footer from \"../../src/components/Footer\";\r\n+import Navbar from \"../../src/components/Navbar\";\r\n+import { Button } from \"../../src/components/ui/button\";\r\n+import { useUserData } from \"../../src/hooks/useUserData\";\r\n+import { supabase } from \"../../src/integrations/supabase/client\";\r\n+import type { RootStackParamList } from \"../../src/navigation/types\";\r\n+import { humanizeReservationType } from \"../../src/utils/humanize\";\r\n \r\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n \r\n const Dashboard = () => {\r\n"
                },
                {
                    "date": 1752759545921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -464,9 +464,18 @@\n       <View className=\"flex flex-col min-h-screen\">\r\n         <Navbar session={session} />\r\n         <main className=\"flex-1 container mx-auto px-4 py-8\">\r\n           <ProfileEditForm\r\n-            profile={profile}\r\n+            profile={\r\n+              profile\r\n+                ? {\r\n+                    first_name: profile.first_name,\r\n+                    last_name: profile.last_name,\r\n+                    company_name: profile.company_name || \"\",\r\n+                    phone: profile.phone || \"\",\r\n+                  }\r\n+                : null\r\n+            }\r\n             onUpdate={updateProfile}\r\n             onCancel={() => setIsEditingProfile(false)}\r\n           />\r\n         </main>\r\n"
                },
                {
                    "date": 1752827016227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -461,9 +461,9 @@\n \r\n   if (isEditingProfile) {\r\n     return (\r\n       <View className=\"flex flex-col min-h-screen\">\r\n-        <Navbar session={session} />\r\n+        <Navbar session={session} onToggleMenu={() => setMenuOpen(!menuOpen)} />\r\n         <main className=\"flex-1 container mx-auto px-4 py-8\">\r\n           <ProfileEditForm\r\n             profile={\r\n               profile\r\n"
                },
                {
                    "date": 1752827058265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,9 @@\n   const [isEditingProfile, setIsEditingProfile] = useState(false);\r\n   const [loadingDocuments, setLoadingDocuments] = useState(false);\r\n   const [loadingReservations, setLoadingReservations] = useState(true);\r\n   const [session, setSession] = useState<Session | null>(null);\r\n+  const [menuOpen, setMenuOpen] = useState(false);\r\n \r\n   const {\r\n     profile,\r\n     loading: userDataLoading,\r\n"
                },
                {
                    "date": 1752827287456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\n import { Session } from \"@supabase/supabase-js\";\r\n import { format } from \"date-fns\";\r\n import { fr } from \"date-fns/locale\";\r\n+import { useRouter } from \"expo-router\";\r\n import React, { useEffect, useState } from \"react\";\r\n import {\r\n   ActivityIndicator,\r\n   Alert,\r\n@@ -39,8 +40,9 @@\n   const [loadingDocuments, setLoadingDocuments] = useState(false);\r\n   const [loadingReservations, setLoadingReservations] = useState(true);\r\n   const [session, setSession] = useState<Session | null>(null);\r\n   const [menuOpen, setMenuOpen] = useState(false);\r\n+  const router = useRouter();\r\n \r\n   const {\r\n     profile,\r\n     loading: userDataLoading,\r\n@@ -480,8 +482,130 @@\n             onCancel={() => setIsEditingProfile(false)}\r\n           />\r\n         </main>\r\n         <Footer />\r\n+        {/* GLOBAL OVERLAY */}\r\n+        {menuOpen && (\r\n+          <View\r\n+            style={{\r\n+              position: \"absolute\",\r\n+              top: 0,\r\n+              bottom: 0,\r\n+              left: 0,\r\n+              right: 0,\r\n+              backgroundColor: \"#fff\",\r\n+              zIndex: 9999,\r\n+              elevation: 9999,\r\n+            }}\r\n+          >\r\n+            <ScrollView\r\n+              contentContainerStyle={{ paddingTop: 60, paddingHorizontal: 20 }}\r\n+            >\r\n+              <TouchableOpacity\r\n+                style={{\r\n+                  position: \"absolute\",\r\n+                  top: 20,\r\n+                  right: 20,\r\n+                  padding: 10,\r\n+                }}\r\n+                onPress={() => setMenuOpen(false)}\r\n+              >\r\n+                <Text style={{ fontSize: 28, color: \"#333\" }}>✕</Text>\r\n+              </TouchableOpacity>\r\n+\r\n+              {[\r\n+                { label: \"Accueil\", path: \"/(tabs)\" },\r\n+                { label: \"Domiciliation\", path: \"/(tabs)/Domiciliation\" },\r\n+                { label: \"Services Admin\", path: \"/(tabs)/ServicesAdmin\" },\r\n+                { label: \"Communication\", path: \"/(tabs)/Communication\" },\r\n+                { label: \"Contact\", path: \"/(tabs)/Contact\" },\r\n+              ].map((item, idx) => (\r\n+                <TouchableOpacity\r\n+                  key={idx}\r\n+                  style={{\r\n+                    paddingVertical: 12,\r\n+                    borderBottomWidth: 1,\r\n+                    borderColor: \"#eee\",\r\n+                  }}\r\n+                  onPress={() => {\r\n+                    router.push(item.path as any);\r\n+                    setMenuOpen(false);\r\n+                  }}\r\n+                >\r\n+                  <Text style={{ fontSize: 18, color: \"#333\" }}>\r\n+                    {item.label}\r\n+                  </Text>\r\n+                </TouchableOpacity>\r\n+              ))}\r\n+\r\n+              <View style={{ marginTop: 30 }}>\r\n+                {session ? (\r\n+                  <>\r\n+                    <TouchableOpacity\r\n+                      style={{\r\n+                        paddingVertical: 12,\r\n+                        alignItems: \"center\",\r\n+                        borderRadius: 6,\r\n+                        backgroundColor: \"#06b6d4\",\r\n+                        marginBottom: 12,\r\n+                      }}\r\n+                      onPress={() => {\r\n+                        router.push(\"/(tabs)/Dashboard\" as any);\r\n+                        setMenuOpen(false);\r\n+                      }}\r\n+                    >\r\n+                      <Text style={{ color: \"#fff\", fontWeight: \"bold\" }}>\r\n+                        Dashboard\r\n+                      </Text>\r\n+                    </TouchableOpacity>\r\n+\r\n+                    <TouchableOpacity\r\n+                      style={{\r\n+                        paddingVertical: 12,\r\n+                        alignItems: \"center\",\r\n+                        borderRadius: 6,\r\n+                        backgroundColor: \"#06b6d4\",\r\n+                      }}\r\n+                      onPress={async () => {\r\n+                        const { error } = await supabase.auth.signOut();\r\n+                        if (error) {\r\n+                          Alert.alert(\"Erreur\", error.message);\r\n+                          return;\r\n+                        }\r\n+                        Alert.alert(\"Déconnexion réussie\");\r\n+                        router.push(\"/(tabs)/Login\" as any);\r\n+                        setMenuOpen(false);\r\n+                      }}\r\n+                    >\r\n+                      <Text style={{ color: \"#fff\", fontWeight: \"bold\" }}>\r\n+                        Déconnexion\r\n+                      </Text>\r\n+                    </TouchableOpacity>\r\n+                  </>\r\n+                ) : (\r\n+                  <TouchableOpacity\r\n+                    style={{\r\n+                      paddingVertical: 12,\r\n+                      alignItems: \"center\",\r\n+                      borderRadius: 6,\r\n+                      backgroundColor: \"#fff\",\r\n+                      borderWidth: 1,\r\n+                      borderColor: \"#06b6d4\",\r\n+                    }}\r\n+                    onPress={() => {\r\n+                      router.push(\"/(tabs)/Login\" as any);\r\n+                      setMenuOpen(false);\r\n+                    }}\r\n+                  >\r\n+                    <Text style={{ color: \"#06b6d4\", fontWeight: \"bold\" }}>\r\n+                      Connexion\r\n+                    </Text>\r\n+                  </TouchableOpacity>\r\n+                )}\r\n+              </View>\r\n+            </ScrollView>\r\n+          </View>\r\n+        )}\r\n       </View>\r\n     );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1752868253262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -609,177 +609,186 @@\n     );\r\n   }\r\n \r\n   return (\r\n-    <ScrollView contentContainerStyle={styles.container}>\r\n-      <Text style={styles.title}>Tableau de bord</Text>\r\n-      <Text style={styles.subtitle}>\r\n-        Bienvenue sur votre espace personnel Lys&Co,{\" \"}\r\n-        {profile?.first_name || profile?.email}\r\n-      </Text>\r\n-\r\n-      {/* Mon Profil */}\r\n-      <View style={styles.card}>\r\n-        <Text style={styles.cardTitle}>Mon Profil</Text>\r\n-        <View style={styles.row}>\r\n-          <View style={styles.column}>\r\n-            <Text style={styles.label}>Nom</Text>\r\n-            <Text style={styles.value}>\r\n-              {profile?.first_name} {profile?.last_name}\r\n-            </Text>\r\n-            <Text style={styles.label}>Email</Text>\r\n-            <Text style={styles.value}>{profile?.email}</Text>\r\n-          </View>\r\n-          <View style={styles.column}>\r\n-            <Text style={styles.label}>Entreprise</Text>\r\n-            <Text style={styles.value}>\r\n-              {profile?.company_name || \"Non renseigné\"}\r\n-            </Text>\r\n-            <Text style={styles.label}>Téléphone</Text>\r\n-            <Text style={styles.value}>\r\n-              {profile?.phone || \"Non renseigné\"}\r\n-            </Text>\r\n-          </View>\r\n-        </View>\r\n-        <TouchableOpacity\r\n-          style={styles.buttonOutline}\r\n-          onPress={() => setIsEditingProfile(true)}\r\n-        >\r\n-          <Text style={styles.buttonOutlineText}>Modifier mon profil</Text>\r\n-        </TouchableOpacity>\r\n-\r\n-        <Text style={styles.dangerTitle}>Suppression de compte</Text>\r\n-        <Text style={styles.smallText}>\r\n-          Cette action est irréversible. Toutes vos données seront supprimées.\r\n+    <View style={{ flex: 1 }}>\r\n+      <Navbar session={session} onToggleMenu={() => setMenuOpen(!menuOpen)} />\r\n+      {/* <ScrollView style={styles.container}> */}\r\n+      <ScrollView\r\n+        style={styles.container}\r\n+        contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n+      >\r\n+        <Text style={styles.title}>Tableau de bord</Text>\r\n+        <Text style={styles.subtitle}>\r\n+          Bienvenue sur votre espace personnel Lys&Co,{\" \"}\r\n+          {profile?.first_name || profile?.email}\r\n         </Text>\r\n-        <TouchableOpacity\r\n-          style={styles.buttonDanger}\r\n-          onPress={handleDeleteAccount}\r\n-        >\r\n-          <Text style={styles.buttonText}>\r\n-            Supprimer définitivement mon compte\r\n-          </Text>\r\n-        </TouchableOpacity>\r\n-      </View>\r\n \r\n-      {/* Documents */}\r\n-      <View style={styles.card}>\r\n-        <Text style={styles.cardTitle}>Mes documents</Text>\r\n-        {loadingDocuments ? (\r\n-          <ActivityIndicator />\r\n-        ) : documents.length === 0 ? (\r\n-          <Text>Aucun document disponible.</Text>\r\n-        ) : (\r\n-          documents.map((doc) => (\r\n-            <View key={doc.id} style={styles.item}>\r\n-              <Text>{doc.file_name}</Text>\r\n-              <Text>{new Date(doc.uploaded_at).toLocaleDateString()}</Text>\r\n-              <TouchableOpacity onPress={() => Linking.openURL(doc.file_url)}>\r\n-                <Text style={styles.link}>Télécharger</Text>\r\n-              </TouchableOpacity>\r\n+        {/* Mon Profil */}\r\n+        <View style={styles.card}>\r\n+          <Text style={styles.cardTitle}>Mon Profil</Text>\r\n+          <View style={styles.row}>\r\n+            <View style={styles.column}>\r\n+              <Text style={styles.label}>Nom</Text>\r\n+              <Text style={styles.value}>\r\n+                {profile?.first_name} {profile?.last_name}\r\n+              </Text>\r\n+              <Text style={styles.label}>Email</Text>\r\n+              <Text style={styles.value}>{profile?.email}</Text>\r\n             </View>\r\n-          ))\r\n-        )}\r\n-      </View>\r\n-\r\n-      {/* Réservations */}\r\n-      <View style={styles.card}>\r\n-        <Text style={styles.cardTitle}>Mes réservations de salles</Text>\r\n-        {loadingReservations ? (\r\n-          <ActivityIndicator />\r\n-        ) : reservations.length === 0 ? (\r\n-          <Text>Aucune réservation trouvée.</Text>\r\n-        ) : (\r\n-          reservations.map((res) => (\r\n-            <View key={res.id} style={styles.item}>\r\n-              <Text>Date: {formatDate(res.reservation_date)}</Text>\r\n-              <Text>\r\n-                Heure:{\" \"}\r\n-                {res.start_time\r\n-                  ? `${res.start_time} - ${res.end_time}`\r\n-                  : \"Journée/Demi-journée\"}\r\n+            <View style={styles.column}>\r\n+              <Text style={styles.label}>Entreprise</Text>\r\n+              <Text style={styles.value}>\r\n+                {profile?.company_name || \"Non renseigné\"}\r\n               </Text>\r\n-              <Text>Type: {humanizeReservationType(res.reservation_type)}</Text>\r\n-              <Text>Statut: {getStatusBadge(res.status)}</Text>\r\n-              {res.status !== \"cancelled\" &&\r\n-                canCancel(res.reservation_date, res.start_time) && (\r\n-                  <TouchableOpacity\r\n-                    style={styles.buttonDanger}\r\n-                    onPress={() =>\r\n-                      handleCancelReservation(\r\n-                        res.id,\r\n-                        res.payment_intent_id,\r\n-                        profile?.email,\r\n-                        res.reservation_date,\r\n-                        res.reservation_type\r\n-                      )\r\n-                    }\r\n-                  >\r\n-                    <Text style={styles.buttonText}>Annuler</Text>\r\n-                  </TouchableOpacity>\r\n-                )}\r\n+              <Text style={styles.label}>Téléphone</Text>\r\n+              <Text style={styles.value}>\r\n+                {profile?.phone || \"Non renseigné\"}\r\n+              </Text>\r\n             </View>\r\n-          ))\r\n-        )}\r\n-      </View>\r\n+          </View>\r\n+          <TouchableOpacity\r\n+            style={styles.buttonOutline}\r\n+            onPress={() => setIsEditingProfile(true)}\r\n+          >\r\n+            <Text style={styles.buttonOutlineText}>Modifier mon profil</Text>\r\n+          </TouchableOpacity>\r\n \r\n-      {/* Abonnements Stripe */}\r\n-      {stripeSubscriptions.length > 0 && (\r\n-        <View style={styles.card}>\r\n-          <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n-          {stripeSubscriptions.map((sub) => (\r\n-            <View key={sub.id} style={styles.item}>\r\n-              <Text>Statut: {getStatusBadge(sub.status)}</Text>\r\n-              <Text>Début: {formatDate(sub.start_date * 1000)}</Text>\r\n-              {sub.cancel_at && (\r\n-                <Text>Fin prévue: {formatDate(sub.cancel_at * 1000)}</Text>\r\n-              )}\r\n-              {sub.items?.data?.map((item: any) => (\r\n-                <Text key={item.id}>\r\n-                  Produit: {item.product_name || \"Nom inconnu\"}\r\n-                </Text>\r\n-              ))}\r\n-            </View>\r\n-          ))}\r\n+          <Text style={styles.dangerTitle}>Suppression de compte</Text>\r\n+          <Text style={styles.smallText}>\r\n+            Cette action est irréversible. Toutes vos données seront supprimées.\r\n+          </Text>\r\n           <TouchableOpacity\r\n-            style={styles.buttonPrimary}\r\n-            onPress={handleOpenStripePortal}\r\n+            style={styles.buttonDanger}\r\n+            onPress={handleDeleteAccount}\r\n           >\r\n-            <Text style={styles.buttonText}>Gérer mes abonnements</Text>\r\n+            <Text style={styles.buttonText}>\r\n+              Supprimer définitivement mon compte\r\n+            </Text>\r\n           </TouchableOpacity>\r\n         </View>\r\n-      )}\r\n \r\n-      {/* Factures Stripe */}\r\n-      {stripeInvoices.length > 0 && (\r\n+        {/* Documents */}\r\n         <View style={styles.card}>\r\n-          <Text style={styles.cardTitle}>Mes factures d'abonnement</Text>\r\n-          {stripeInvoices.map((invoice) => (\r\n-            <View key={invoice.id} style={styles.item}>\r\n-              <Text>\r\n-                Montant payé: {(invoice.amount_paid / 100).toFixed(2)} €\r\n-              </Text>\r\n-              <Text>Date: {formatDate(invoice.created * 1000)}</Text>\r\n-              {invoice.lines?.data?.map((line: any) => (\r\n-                <Text key={line.id}>\r\n-                  Produit: {line.product_name || \"Nom inconnu\"}\r\n+          <Text style={styles.cardTitle}>Mes documents</Text>\r\n+          {loadingDocuments ? (\r\n+            <ActivityIndicator />\r\n+          ) : documents.length === 0 ? (\r\n+            <Text>Aucun document disponible.</Text>\r\n+          ) : (\r\n+            documents.map((doc) => (\r\n+              <View key={doc.id} style={styles.item}>\r\n+                <Text>{doc.file_name}</Text>\r\n+                <Text>{new Date(doc.uploaded_at).toLocaleDateString()}</Text>\r\n+                <TouchableOpacity onPress={() => Linking.openURL(doc.file_url)}>\r\n+                  <Text style={styles.link}>Télécharger</Text>\r\n+                </TouchableOpacity>\r\n+              </View>\r\n+            ))\r\n+          )}\r\n+        </View>\r\n+\r\n+        {/* Réservations */}\r\n+        <View style={styles.card}>\r\n+          <Text style={styles.cardTitle}>Mes réservations de salles</Text>\r\n+          {loadingReservations ? (\r\n+            <ActivityIndicator />\r\n+          ) : reservations.length === 0 ? (\r\n+            <Text>Aucune réservation trouvée.</Text>\r\n+          ) : (\r\n+            reservations.map((res) => (\r\n+              <View key={res.id} style={styles.item}>\r\n+                <Text>Date: {formatDate(res.reservation_date)}</Text>\r\n+                <Text>\r\n+                  Heure:{\" \"}\r\n+                  {res.start_time\r\n+                    ? `${res.start_time} - ${res.end_time}`\r\n+                    : \"Journée/Demi-journée\"}\r\n                 </Text>\r\n-              ))}\r\n-              <TouchableOpacity\r\n-                onPress={() => Linking.openURL(invoice.invoice_pdf)}\r\n-              >\r\n-                <Text style={styles.link}>Télécharger la facture</Text>\r\n-              </TouchableOpacity>\r\n-            </View>\r\n-          ))}\r\n+                <Text>\r\n+                  Type: {humanizeReservationType(res.reservation_type)}\r\n+                </Text>\r\n+                <Text>Statut: {getStatusBadge(res.status)}</Text>\r\n+                {res.status !== \"cancelled\" &&\r\n+                  canCancel(res.reservation_date, res.start_time) && (\r\n+                    <TouchableOpacity\r\n+                      style={styles.buttonDanger}\r\n+                      onPress={() =>\r\n+                        handleCancelReservation(\r\n+                          res.id,\r\n+                          res.payment_intent_id,\r\n+                          profile?.email,\r\n+                          res.reservation_date,\r\n+                          res.reservation_type\r\n+                        )\r\n+                      }\r\n+                    >\r\n+                      <Text style={styles.buttonText}>Annuler</Text>\r\n+                    </TouchableOpacity>\r\n+                  )}\r\n+              </View>\r\n+            ))\r\n+          )}\r\n         </View>\r\n-      )}\r\n-    </ScrollView>\r\n+\r\n+        {/* Abonnements Stripe */}\r\n+        {stripeSubscriptions.length > 0 && (\r\n+          <View style={styles.card}>\r\n+            <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n+            {stripeSubscriptions.map((sub) => (\r\n+              <View key={sub.id} style={styles.item}>\r\n+                <Text>Statut: {getStatusBadge(sub.status)}</Text>\r\n+                <Text>Début: {formatDate(sub.start_date * 1000)}</Text>\r\n+                {sub.cancel_at && (\r\n+                  <Text>Fin prévue: {formatDate(sub.cancel_at * 1000)}</Text>\r\n+                )}\r\n+                {sub.items?.data?.map((item: any) => (\r\n+                  <Text key={item.id}>\r\n+                    Produit: {item.product_name || \"Nom inconnu\"}\r\n+                  </Text>\r\n+                ))}\r\n+              </View>\r\n+            ))}\r\n+            <TouchableOpacity\r\n+              style={styles.buttonPrimary}\r\n+              onPress={handleOpenStripePortal}\r\n+            >\r\n+              <Text style={styles.buttonText}>Gérer mes abonnements</Text>\r\n+            </TouchableOpacity>\r\n+          </View>\r\n+        )}\r\n+\r\n+        {/* Factures Stripe */}\r\n+        {stripeInvoices.length > 0 && (\r\n+          <View style={styles.card}>\r\n+            <Text style={styles.cardTitle}>Mes factures d'abonnement</Text>\r\n+            {stripeInvoices.map((invoice) => (\r\n+              <View key={invoice.id} style={styles.item}>\r\n+                <Text>\r\n+                  Montant payé: {(invoice.amount_paid / 100).toFixed(2)} €\r\n+                </Text>\r\n+                <Text>Date: {formatDate(invoice.created * 1000)}</Text>\r\n+                {invoice.lines?.data?.map((line: any) => (\r\n+                  <Text key={line.id}>\r\n+                    Produit: {line.product_name || \"Nom inconnu\"}\r\n+                  </Text>\r\n+                ))}\r\n+                <TouchableOpacity\r\n+                  onPress={() => Linking.openURL(invoice.invoice_pdf)}\r\n+                >\r\n+                  <Text style={styles.link}>Télécharger la facture</Text>\r\n+                </TouchableOpacity>\r\n+              </View>\r\n+            ))}\r\n+          </View>\r\n+        )}\r\n+      </ScrollView>\r\n+    </View>\r\n   );\r\n };\r\n \r\n const styles = StyleSheet.create({\r\n-  container: { padding: 16 },\r\n+  container: { padding: 16, flex: 1 },\r\n   title: { fontSize: 24, fontWeight: \"bold\", marginBottom: 12 },\r\n   subtitle: { fontSize: 16, marginBottom: 20 },\r\n   card: {\r\n     backgroundColor: \"#fff\",\r\n"
                },
                {
                    "date": 1752868312670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -609,181 +609,175 @@\n     );\r\n   }\r\n \r\n   return (\r\n-    <View style={{ flex: 1 }}>\r\n-      <Navbar session={session} onToggleMenu={() => setMenuOpen(!menuOpen)} />\r\n-      {/* <ScrollView style={styles.container}> */}\r\n-      <ScrollView\r\n-        style={styles.container}\r\n-        contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n-      >\r\n-        <Text style={styles.title}>Tableau de bord</Text>\r\n-        <Text style={styles.subtitle}>\r\n-          Bienvenue sur votre espace personnel Lys&Co,{\" \"}\r\n-          {profile?.first_name || profile?.email}\r\n+    <ScrollView\r\n+      style={styles.container}\r\n+      contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n+    >\r\n+      <Text style={styles.title}>Tableau de bord</Text>\r\n+      <Text style={styles.subtitle}>\r\n+        Bienvenue sur votre espace personnel Lys&Co,{\" \"}\r\n+        {profile?.first_name || profile?.email}\r\n+      </Text>\r\n+\r\n+      {/* Mon Profil */}\r\n+      <View style={styles.card}>\r\n+        <Text style={styles.cardTitle}>Mon Profil</Text>\r\n+        <View style={styles.row}>\r\n+          <View style={styles.column}>\r\n+            <Text style={styles.label}>Nom</Text>\r\n+            <Text style={styles.value}>\r\n+              {profile?.first_name} {profile?.last_name}\r\n+            </Text>\r\n+            <Text style={styles.label}>Email</Text>\r\n+            <Text style={styles.value}>{profile?.email}</Text>\r\n+          </View>\r\n+          <View style={styles.column}>\r\n+            <Text style={styles.label}>Entreprise</Text>\r\n+            <Text style={styles.value}>\r\n+              {profile?.company_name || \"Non renseigné\"}\r\n+            </Text>\r\n+            <Text style={styles.label}>Téléphone</Text>\r\n+            <Text style={styles.value}>\r\n+              {profile?.phone || \"Non renseigné\"}\r\n+            </Text>\r\n+          </View>\r\n+        </View>\r\n+        <TouchableOpacity\r\n+          style={styles.buttonOutline}\r\n+          onPress={() => setIsEditingProfile(true)}\r\n+        >\r\n+          <Text style={styles.buttonOutlineText}>Modifier mon profil</Text>\r\n+        </TouchableOpacity>\r\n+\r\n+        <Text style={styles.dangerTitle}>Suppression de compte</Text>\r\n+        <Text style={styles.smallText}>\r\n+          Cette action est irréversible. Toutes vos données seront supprimées.\r\n         </Text>\r\n+        <TouchableOpacity\r\n+          style={styles.buttonDanger}\r\n+          onPress={handleDeleteAccount}\r\n+        >\r\n+          <Text style={styles.buttonText}>\r\n+            Supprimer définitivement mon compte\r\n+          </Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n \r\n-        {/* Mon Profil */}\r\n-        <View style={styles.card}>\r\n-          <Text style={styles.cardTitle}>Mon Profil</Text>\r\n-          <View style={styles.row}>\r\n-            <View style={styles.column}>\r\n-              <Text style={styles.label}>Nom</Text>\r\n-              <Text style={styles.value}>\r\n-                {profile?.first_name} {profile?.last_name}\r\n-              </Text>\r\n-              <Text style={styles.label}>Email</Text>\r\n-              <Text style={styles.value}>{profile?.email}</Text>\r\n+      {/* Documents */}\r\n+      <View style={styles.card}>\r\n+        <Text style={styles.cardTitle}>Mes documents</Text>\r\n+        {loadingDocuments ? (\r\n+          <ActivityIndicator />\r\n+        ) : documents.length === 0 ? (\r\n+          <Text>Aucun document disponible.</Text>\r\n+        ) : (\r\n+          documents.map((doc) => (\r\n+            <View key={doc.id} style={styles.item}>\r\n+              <Text>{doc.file_name}</Text>\r\n+              <Text>{new Date(doc.uploaded_at).toLocaleDateString()}</Text>\r\n+              <TouchableOpacity onPress={() => Linking.openURL(doc.file_url)}>\r\n+                <Text style={styles.link}>Télécharger</Text>\r\n+              </TouchableOpacity>\r\n             </View>\r\n-            <View style={styles.column}>\r\n-              <Text style={styles.label}>Entreprise</Text>\r\n-              <Text style={styles.value}>\r\n-                {profile?.company_name || \"Non renseigné\"}\r\n+          ))\r\n+        )}\r\n+      </View>\r\n+\r\n+      {/* Réservations */}\r\n+      <View style={styles.card}>\r\n+        <Text style={styles.cardTitle}>Mes réservations de salles</Text>\r\n+        {loadingReservations ? (\r\n+          <ActivityIndicator />\r\n+        ) : reservations.length === 0 ? (\r\n+          <Text>Aucune réservation trouvée.</Text>\r\n+        ) : (\r\n+          reservations.map((res) => (\r\n+            <View key={res.id} style={styles.item}>\r\n+              <Text>Date: {formatDate(res.reservation_date)}</Text>\r\n+              <Text>\r\n+                Heure:{\" \"}\r\n+                {res.start_time\r\n+                  ? `${res.start_time} - ${res.end_time}`\r\n+                  : \"Journée/Demi-journée\"}\r\n               </Text>\r\n-              <Text style={styles.label}>Téléphone</Text>\r\n-              <Text style={styles.value}>\r\n-                {profile?.phone || \"Non renseigné\"}\r\n-              </Text>\r\n+              <Text>Type: {humanizeReservationType(res.reservation_type)}</Text>\r\n+              <Text>Statut: {getStatusBadge(res.status)}</Text>\r\n+              {res.status !== \"cancelled\" &&\r\n+                canCancel(res.reservation_date, res.start_time) && (\r\n+                  <TouchableOpacity\r\n+                    style={styles.buttonDanger}\r\n+                    onPress={() =>\r\n+                      handleCancelReservation(\r\n+                        res.id,\r\n+                        res.payment_intent_id,\r\n+                        profile?.email,\r\n+                        res.reservation_date,\r\n+                        res.reservation_type\r\n+                      )\r\n+                    }\r\n+                  >\r\n+                    <Text style={styles.buttonText}>Annuler</Text>\r\n+                  </TouchableOpacity>\r\n+                )}\r\n             </View>\r\n-          </View>\r\n-          <TouchableOpacity\r\n-            style={styles.buttonOutline}\r\n-            onPress={() => setIsEditingProfile(true)}\r\n-          >\r\n-            <Text style={styles.buttonOutlineText}>Modifier mon profil</Text>\r\n-          </TouchableOpacity>\r\n+          ))\r\n+        )}\r\n+      </View>\r\n \r\n-          <Text style={styles.dangerTitle}>Suppression de compte</Text>\r\n-          <Text style={styles.smallText}>\r\n-            Cette action est irréversible. Toutes vos données seront supprimées.\r\n-          </Text>\r\n+      {/* Abonnements Stripe */}\r\n+      {stripeSubscriptions.length > 0 && (\r\n+        <View style={styles.card}>\r\n+          <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n+          {stripeSubscriptions.map((sub) => (\r\n+            <View key={sub.id} style={styles.item}>\r\n+              <Text>Statut: {getStatusBadge(sub.status)}</Text>\r\n+              <Text>Début: {formatDate(sub.start_date * 1000)}</Text>\r\n+              {sub.cancel_at && (\r\n+                <Text>Fin prévue: {formatDate(sub.cancel_at * 1000)}</Text>\r\n+              )}\r\n+              {sub.items?.data?.map((item: any) => (\r\n+                <Text key={item.id}>\r\n+                  Produit: {item.product_name || \"Nom inconnu\"}\r\n+                </Text>\r\n+              ))}\r\n+            </View>\r\n+          ))}\r\n           <TouchableOpacity\r\n-            style={styles.buttonDanger}\r\n-            onPress={handleDeleteAccount}\r\n+            style={styles.buttonPrimary}\r\n+            onPress={handleOpenStripePortal}\r\n           >\r\n-            <Text style={styles.buttonText}>\r\n-              Supprimer définitivement mon compte\r\n-            </Text>\r\n+            <Text style={styles.buttonText}>Gérer mes abonnements</Text>\r\n           </TouchableOpacity>\r\n         </View>\r\n+      )}\r\n \r\n-        {/* Documents */}\r\n+      {/* Factures Stripe */}\r\n+      {stripeInvoices.length > 0 && (\r\n         <View style={styles.card}>\r\n-          <Text style={styles.cardTitle}>Mes documents</Text>\r\n-          {loadingDocuments ? (\r\n-            <ActivityIndicator />\r\n-          ) : documents.length === 0 ? (\r\n-            <Text>Aucun document disponible.</Text>\r\n-          ) : (\r\n-            documents.map((doc) => (\r\n-              <View key={doc.id} style={styles.item}>\r\n-                <Text>{doc.file_name}</Text>\r\n-                <Text>{new Date(doc.uploaded_at).toLocaleDateString()}</Text>\r\n-                <TouchableOpacity onPress={() => Linking.openURL(doc.file_url)}>\r\n-                  <Text style={styles.link}>Télécharger</Text>\r\n-                </TouchableOpacity>\r\n-              </View>\r\n-            ))\r\n-          )}\r\n-        </View>\r\n-\r\n-        {/* Réservations */}\r\n-        <View style={styles.card}>\r\n-          <Text style={styles.cardTitle}>Mes réservations de salles</Text>\r\n-          {loadingReservations ? (\r\n-            <ActivityIndicator />\r\n-          ) : reservations.length === 0 ? (\r\n-            <Text>Aucune réservation trouvée.</Text>\r\n-          ) : (\r\n-            reservations.map((res) => (\r\n-              <View key={res.id} style={styles.item}>\r\n-                <Text>Date: {formatDate(res.reservation_date)}</Text>\r\n-                <Text>\r\n-                  Heure:{\" \"}\r\n-                  {res.start_time\r\n-                    ? `${res.start_time} - ${res.end_time}`\r\n-                    : \"Journée/Demi-journée\"}\r\n+          <Text style={styles.cardTitle}>Mes factures d'abonnement</Text>\r\n+          {stripeInvoices.map((invoice) => (\r\n+            <View key={invoice.id} style={styles.item}>\r\n+              <Text>\r\n+                Montant payé: {(invoice.amount_paid / 100).toFixed(2)} €\r\n+              </Text>\r\n+              <Text>Date: {formatDate(invoice.created * 1000)}</Text>\r\n+              {invoice.lines?.data?.map((line: any) => (\r\n+                <Text key={line.id}>\r\n+                  Produit: {line.product_name || \"Nom inconnu\"}\r\n                 </Text>\r\n-                <Text>\r\n-                  Type: {humanizeReservationType(res.reservation_type)}\r\n-                </Text>\r\n-                <Text>Statut: {getStatusBadge(res.status)}</Text>\r\n-                {res.status !== \"cancelled\" &&\r\n-                  canCancel(res.reservation_date, res.start_time) && (\r\n-                    <TouchableOpacity\r\n-                      style={styles.buttonDanger}\r\n-                      onPress={() =>\r\n-                        handleCancelReservation(\r\n-                          res.id,\r\n-                          res.payment_intent_id,\r\n-                          profile?.email,\r\n-                          res.reservation_date,\r\n-                          res.reservation_type\r\n-                        )\r\n-                      }\r\n-                    >\r\n-                      <Text style={styles.buttonText}>Annuler</Text>\r\n-                    </TouchableOpacity>\r\n-                  )}\r\n-              </View>\r\n-            ))\r\n-          )}\r\n+              ))}\r\n+              <TouchableOpacity\r\n+                onPress={() => Linking.openURL(invoice.invoice_pdf)}\r\n+              >\r\n+                <Text style={styles.link}>Télécharger la facture</Text>\r\n+              </TouchableOpacity>\r\n+            </View>\r\n+          ))}\r\n         </View>\r\n-\r\n-        {/* Abonnements Stripe */}\r\n-        {stripeSubscriptions.length > 0 && (\r\n-          <View style={styles.card}>\r\n-            <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n-            {stripeSubscriptions.map((sub) => (\r\n-              <View key={sub.id} style={styles.item}>\r\n-                <Text>Statut: {getStatusBadge(sub.status)}</Text>\r\n-                <Text>Début: {formatDate(sub.start_date * 1000)}</Text>\r\n-                {sub.cancel_at && (\r\n-                  <Text>Fin prévue: {formatDate(sub.cancel_at * 1000)}</Text>\r\n-                )}\r\n-                {sub.items?.data?.map((item: any) => (\r\n-                  <Text key={item.id}>\r\n-                    Produit: {item.product_name || \"Nom inconnu\"}\r\n-                  </Text>\r\n-                ))}\r\n-              </View>\r\n-            ))}\r\n-            <TouchableOpacity\r\n-              style={styles.buttonPrimary}\r\n-              onPress={handleOpenStripePortal}\r\n-            >\r\n-              <Text style={styles.buttonText}>Gérer mes abonnements</Text>\r\n-            </TouchableOpacity>\r\n-          </View>\r\n-        )}\r\n-\r\n-        {/* Factures Stripe */}\r\n-        {stripeInvoices.length > 0 && (\r\n-          <View style={styles.card}>\r\n-            <Text style={styles.cardTitle}>Mes factures d'abonnement</Text>\r\n-            {stripeInvoices.map((invoice) => (\r\n-              <View key={invoice.id} style={styles.item}>\r\n-                <Text>\r\n-                  Montant payé: {(invoice.amount_paid / 100).toFixed(2)} €\r\n-                </Text>\r\n-                <Text>Date: {formatDate(invoice.created * 1000)}</Text>\r\n-                {invoice.lines?.data?.map((line: any) => (\r\n-                  <Text key={line.id}>\r\n-                    Produit: {line.product_name || \"Nom inconnu\"}\r\n-                  </Text>\r\n-                ))}\r\n-                <TouchableOpacity\r\n-                  onPress={() => Linking.openURL(invoice.invoice_pdf)}\r\n-                >\r\n-                  <Text style={styles.link}>Télécharger la facture</Text>\r\n-                </TouchableOpacity>\r\n-              </View>\r\n-            ))}\r\n-          </View>\r\n-        )}\r\n-      </ScrollView>\r\n-    </View>\r\n+      )}\r\n+    </ScrollView>\r\n   );\r\n };\r\n \r\n const styles = StyleSheet.create({\r\n"
                },
                {
                    "date": 1752962560284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,42 +242,46 @@\n     Alert.alert(\"Succès\", \"Réservation annulée et remboursée.\");\r\n   };\r\n \r\n   // Vérifier la session utilisateur et rediriger si nécessaire\r\n-  useEffect(() => {\r\n-    const checkUser = async () => {\r\n-      try {\r\n-        const {\r\n-          data: { session },\r\n-        } = await supabase.auth.getSession();\r\n+useEffect(() => {\r\n+  const checkUser = async () => {\r\n+    console.log(\"✅ CheckUser démarré\");\r\n+    try {\r\n+      const { data: { session } } = await supabase.auth.getSession();\r\n+      console.log(\"✅ Session récupérée:\", session);\r\n \r\n-        if (!session) {\r\n-          Alert.alert(\r\n-            \"Accès non autorisé\",\r\n-            \"Veuillez vous connecter pour accéder.\"\r\n-          );\r\n-          navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n-          return;\r\n-        }\r\n-      } catch (error) {\r\n+      if (!session) {\r\n+        Alert.alert(\"Accès non autorisé\", \"Veuillez vous connecter pour accéder.\");\r\n         navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n-      } finally {\r\n-        setLoading(false);\r\n+        setLoading(false); // ✅ assure qu'on sort du loading\r\n+        return;\r\n       }\r\n-    };\r\n \r\n-    checkUser();\r\n+      setSession(session); // ✅ on garde la session si besoin ailleurs\r\n \r\n-    const { data: authListener } = supabase.auth.onAuthStateChange((event) => {\r\n-      if (event === \"SIGNED_OUT\") {\r\n-        navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n-      }\r\n-    });\r\n-    return () => {\r\n-      authListener.subscription.unsubscribe();\r\n-    };\r\n-  }, [navigation]);\r\n+    } catch (error) {\r\n+      console.error(\"❌ Erreur checkUser:\", error);\r\n+      navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n \r\n+  checkUser();\r\n+\r\n+  const { data: authListener } = supabase.auth.onAuthStateChange((event) => {\r\n+    if (event === \"SIGNED_OUT\") {\r\n+      console.log(\"🔄 SIGNED_OUT détecté, redirection Login\");\r\n+      navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n+    }\r\n+  });\r\n+  return () => {\r\n+    authListener.subscription.unsubscribe();\r\n+  };\r\n+}, [navigation]);\r\n+\r\n+\r\n   // Récupérer les abonnements et factures Stripe\r\n   useEffect(() => {\r\n     if (!profile?.id) return;\r\n     const fetchStripeData = async () => {\r\n"
                },
                {
                    "date": 1752962636367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -443,16 +443,18 @@\n         );\r\n     }\r\n   };\r\n \r\n-  if (loading || userDataLoading) {\r\n-    return (\r\n-      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n-        <ActivityIndicator size=\"large\" color=\"#00bcd4\" />\r\n-      </View>\r\n-    );\r\n-  }\r\n+if (loading || userDataLoading) {\r\n+  console.log(\"⌛ Affichage ActivityIndicator (loading ou userDataLoading)\");\r\n+  return (\r\n+    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n+      <ActivityIndicator size=\"large\" color=\"#00bcd4\" />\r\n+    </View>\r\n+  );\r\n+}\r\n \r\n+\r\n   if (error) {\r\n     return (\r\n       <View className=\"flex flex-col items-center justify-center h-screen\">\r\n         <Text className=\"text-red-500 text-xl mb-4\">\r\n"
                },
                {
                    "date": 1752963454679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,11 @@\n-// Dashboard.tsx\r\n import { useNavigation } from \"@react-navigation/native\";\r\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\n import { Session } from \"@supabase/supabase-js\";\r\n import { format } from \"date-fns\";\r\n import { fr } from \"date-fns/locale\";\r\n import { useRouter } from \"expo-router\";\r\n-import React, { useEffect, useState } from \"react\";\r\n+import React, { useEffect, useState, useCallback } from \"react\";\r\n import {\r\n   ActivityIndicator,\r\n   Alert,\r\n   Linking,\r\n@@ -14,8 +13,9 @@\n   StyleSheet,\r\n   Text,\r\n   TouchableOpacity,\r\n   View,\r\n+  SafeAreaView,\r\n } from \"react-native\";\r\n import ProfileEditForm from \"../../src/components/dashboard/ProfileEditForm\";\r\n import Footer from \"../../src/components/Footer\";\r\n import Navbar from \"../../src/components/Navbar\";\r\n@@ -28,11 +28,10 @@\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n \r\n const Dashboard = () => {\r\n   const navigation = useNavigation<NavigationProp>();\r\n-  const [loading, setLoading] = useState(true);\r\n+  const router = useRouter();\r\n   const [isAdmin, setIsAdmin] = useState<boolean | null>(null);\r\n-  const [setProfile] = useState<any>(null);\r\n   const [documents, setDocuments] = useState<any[]>([]);\r\n   const [reservations, setReservations] = useState<any[]>([]);\r\n   const [stripeSubscriptions, setStripeSubscriptions] = useState<any[]>([]);\r\n   const [stripeInvoices, setStripeInvoices] = useState<any[]>([]);\r\n@@ -40,103 +39,218 @@\n   const [loadingDocuments, setLoadingDocuments] = useState(false);\r\n   const [loadingReservations, setLoadingReservations] = useState(true);\r\n   const [session, setSession] = useState<Session | null>(null);\r\n   const [menuOpen, setMenuOpen] = useState(false);\r\n-  const router = useRouter();\r\n+  const [initialLoadComplete, setInitialLoadComplete] = useState(false);\r\n \r\n   const {\r\n     profile,\r\n     loading: userDataLoading,\r\n-    error,\r\n+    error: userDataError,\r\n     updateProfile,\r\n   } = useUserData();\r\n \r\n-  // Charger le profil utilisateur\r\n+  const renderMenuOverlay = useCallback(() => {\r\n+    if (!menuOpen) return null;\r\n+\r\n+    const menuItems = [\r\n+      { label: \"Accueil\", path: \"/(tabs)\" },\r\n+      { label: \"Domiciliation\", path: \"/(tabs)/Domiciliation\" },\r\n+      { label: \"Services Admin\", path: \"/(tabs)/ServicesAdmin\" },\r\n+      { label: \"Communication\", path: \"/(tabs)/Communication\" },\r\n+      { label: \"Contact\", path: \"/(tabs)/Contact\" },\r\n+    ];\r\n+\r\n+    return (\r\n+      <View style={styles.menuOverlay}>\r\n+        <ScrollView contentContainerStyle={styles.menuContent}>\r\n+          <TouchableOpacity\r\n+            style={styles.menuCloseButton}\r\n+            onPress={() => setMenuOpen(false)}\r\n+          >\r\n+            <Text style={styles.menuCloseIcon}>✕</Text>\r\n+          </TouchableOpacity>\r\n+\r\n+          {menuItems.map((item, idx) => (\r\n+            <TouchableOpacity\r\n+              key={idx}\r\n+              style={styles.menuItem}\r\n+              onPress={() => {\r\n+                router.push(item.path as any);\r\n+                setMenuOpen(false);\r\n+              }}\r\n+            >\r\n+              <Text style={styles.menuItemText}>{item.label}</Text>\r\n+            </TouchableOpacity>\r\n+          ))}\r\n+\r\n+          <View style={styles.menuAuthSection}>\r\n+            {session ? (\r\n+              <>\r\n+                <TouchableOpacity\r\n+                  style={[styles.menuButton, { backgroundColor: \"#06b6d4\" }]}\r\n+                  onPress={() => {\r\n+                    router.push(\"/(tabs)/Dashboard\" as any);\r\n+                    setMenuOpen(false);\r\n+                  }}\r\n+                >\r\n+                  <Text style={styles.menuButtonText}>Dashboard</Text>\r\n+                </TouchableOpacity>\r\n+\r\n+                <TouchableOpacity\r\n+                  style={[styles.menuButton, { backgroundColor: \"#06b6d4\" }]}\r\n+                  onPress={async () => {\r\n+                    const { error } = await supabase.auth.signOut();\r\n+                    if (error) Alert.alert(\"Erreur\", error.message);\r\n+                    router.push(\"/(tabs)/Login\" as any);\r\n+                    setMenuOpen(false);\r\n+                  }}\r\n+                >\r\n+                  <Text style={styles.menuButtonText}>Déconnexion</Text>\r\n+                </TouchableOpacity>\r\n+              </>\r\n+            ) : (\r\n+              <TouchableOpacity\r\n+                style={[styles.menuButton, { backgroundColor: \"#fff\", borderColor: \"#06b6d4\" }]}\r\n+                onPress={() => {\r\n+                  router.push(\"/(tabs)/Login\" as any);\r\n+                  setMenuOpen(false);\r\n+                }}\r\n+              >\r\n+                <Text style={[styles.menuButtonText, { color: \"#06b6d4\" }]}>Connexion</Text>\r\n+              </TouchableOpacity>\r\n+            )}\r\n+          </View>\r\n+        </ScrollView>\r\n+      </View>\r\n+    );\r\n+  }, [menuOpen, session, router]);\r\n+\r\n+  // Vérification de la session et chargement initial\r\n   useEffect(() => {\r\n-    const fetchProfile = async () => {\r\n-      const {\r\n-        data: { user },\r\n-      } = await supabase.auth.getUser();\r\n+    const checkSessionAndLoadData = async () => {\r\n+      try {\r\n+        const { data: { session } } = await supabase.auth.getSession();\r\n+        \r\n+        if (!session) {\r\n+          navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n+          return;\r\n+        }\r\n \r\n-      if (!user) {\r\n-        setIsAdmin(false);\r\n-        setLoading(false);\r\n-        return;\r\n+        setSession(session);\r\n+        await loadInitialData(session.user.id);\r\n+      } catch (error) {\r\n+        console.error(\"Initial load error:\", error);\r\n+        navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n+      } finally {\r\n+        setInitialLoadComplete(true);\r\n       }\r\n+    };\r\n \r\n-      const { data, error } = await supabase\r\n+    checkSessionAndLoadData();\r\n+\r\n+    const authListener = supabase.auth.onAuthStateChange((event) => {\r\n+      if (event === \"SIGNED_OUT\") {\r\n+        navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n+      }\r\n+    });\r\n+\r\n+    return () => {\r\n+      authListener.data.subscription.unsubscribe();\r\n+    };\r\n+  }, [navigation]);\r\n+\r\n+  const loadInitialData = async (userId: string) => {\r\n+    try {\r\n+      // Charger le profil\r\n+      const { data: profileData, error: profileError } = await supabase\r\n         .from(\"profiles\")\r\n         .select(\"*\")\r\n-        .eq(\"id\", user.id)\r\n+        .eq(\"id\", userId)\r\n         .single();\r\n \r\n-      if (error) {\r\n-        console.error(\"Erreur récupération profil:\", error.message);\r\n-      } else {\r\n-        setProfile(data);\r\n-        setIsAdmin(data?.is_admin ?? false);\r\n-      }\r\n-      setLoading(false);\r\n-    };\r\n+      if (profileError) throw profileError;\r\n \r\n-    fetchProfile();\r\n-  }, []);\r\n+      setIsAdmin(profileData?.is_admin ?? false);\r\n \r\n-  // Charger les documents\r\n-  useEffect(() => {\r\n-    const fetchDocuments = async () => {\r\n-      if (!profile?.id || isAdmin) return;\r\n+      // Charger les données en parallèle\r\n+      await Promise.all([\r\n+        loadDocuments(userId),\r\n+        loadReservations(userId),\r\n+        profileData?.stripe_customer_id ? loadStripeData(profileData.stripe_customer_id) : Promise.resolve(),\r\n+      ]);\r\n+    } catch (error) {\r\n+      console.error(\"Error loading initial data:\", error);\r\n+      throw error;\r\n+    }\r\n+  };\r\n+\r\n+  const loadDocuments = async (userId: string) => {\r\n+    if (isAdmin) return;\r\n+    \r\n+    setLoadingDocuments(true);\r\n+    try {\r\n       const { data, error } = await supabase\r\n         .from(\"user_documents\")\r\n         .select(\"*\")\r\n-        .eq(\"user_id\", profile.id)\r\n+        .eq(\"user_id\", userId)\r\n         .order(\"uploaded_at\", { ascending: false });\r\n \r\n-      if (error) {\r\n-        console.error(\"Erreur chargement documents:\", error);\r\n-      } else {\r\n-        setDocuments(data || []);\r\n-      }\r\n-    };\r\n+      if (error) throw error;\r\n+      setDocuments(data || []);\r\n+    } finally {\r\n+      setLoadingDocuments(false);\r\n+    }\r\n+  };\r\n \r\n-    fetchDocuments();\r\n-  }, [profile, isAdmin]);\r\n-\r\n-  // Charger les réservations\r\n-  useEffect(() => {\r\n-    const fetchReservations = async () => {\r\n-      if (!profile?.id) return;\r\n+  const loadReservations = async (userId: string) => {\r\n+    setLoadingReservations(true);\r\n+    try {\r\n       const { data, error } = await supabase\r\n         .from(\"reservations\")\r\n         .select(\"*\")\r\n-        .eq(\"user_id\", profile.id)\r\n+        .eq(\"user_id\", userId)\r\n         .order(\"reservation_date\", { ascending: false });\r\n \r\n-      if (error) {\r\n-        console.error(\"Erreur chargement reservations:\", error);\r\n-      } else {\r\n-        setReservations(data || []);\r\n-      }\r\n-    };\r\n+      if (error) throw error;\r\n+      setReservations(data || []);\r\n+    } finally {\r\n+      setLoadingReservations(false);\r\n+    }\r\n+  };\r\n \r\n-    fetchReservations();\r\n-  }, [profile]);\r\n+  const loadStripeData = async (stripeCustomerId: string) => {\r\n+    try {\r\n+      const res = await fetch(\r\n+        \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n+        {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/json\" },\r\n+          body: JSON.stringify({ stripeCustomerId }),\r\n+        }\r\n+      );\r\n+      \r\n+      if (!res.ok) throw new Error(\"Failed to fetch Stripe data\");\r\n+      \r\n+      const stripeData = await res.json();\r\n+      setStripeSubscriptions(stripeData.subscriptions || []);\r\n+      setStripeInvoices(stripeData.invoices || []);\r\n+    } catch (error) {\r\n+      console.error(\"Error loading Stripe data:\", error);\r\n+    }\r\n+  };\r\n \r\n-  // Supprimer le compte\r\n-  const handleDeleteAccount = async () => {\r\n+  const handleDeleteAccount = useCallback(async () => {\r\n+    if (!profile?.id || !profile?.email) return;\r\n+\r\n     Alert.alert(\r\n       \"Confirmation\",\r\n       \"Voulez-vous vraiment désactiver votre compte ?\",\r\n       [\r\n+        { text: \"Annuler\", style: \"cancel\" },\r\n         {\r\n-          text: \"Annuler\",\r\n-          style: \"cancel\",\r\n-        },\r\n-        {\r\n           text: \"Confirmer\",\r\n           onPress: async () => {\r\n-            if (!profile?.id || !profile?.email) return;\r\n-\r\n             try {\r\n               const res = await fetch(\r\n                 \"https://mon-backend-node.vercel.app/api/disable-account\",\r\n                 {\r\n@@ -144,207 +258,109 @@\n                   headers: { \"Content-Type\": \"application/json\" },\r\n                   body: JSON.stringify({\r\n                     id: profile.id,\r\n                     email: profile.email,\r\n-                    first_name: profile.first_name,\r\n-                    last_name: profile.last_name,\r\n-                    frontendUrl: process.env.EXPO_PUBLIC_APP_URL,\r\n+                    first_name: profile.first_name || undefined,\r\n+                    last_name: profile.last_name || undefined,\r\n+                    frontendUrl: process.env.EXPO_PUBLIC_APP_URL || undefined,\r\n                   }),\r\n                 }\r\n               );\r\n \r\n               if (!res.ok) {\r\n-                Alert.alert(\"Erreur\", \"Problème lors de la désactivation.\");\r\n-                return;\r\n+                throw new Error(\"Failed to disable account\");\r\n               }\r\n \r\n-              Alert.alert(\"Succès\", \"Votre compte a été désactivé.\");\r\n               await supabase.auth.signOut();\r\n               navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n             } catch (err) {\r\n               console.error(err);\r\n-              Alert.alert(\"Erreur\", \"Impossible de contacter le serveur.\");\r\n+              Alert.alert(\"Erreur\", \"Une erreur est survenue\");\r\n             }\r\n           },\r\n         },\r\n       ]\r\n     );\r\n-  };\r\n+  }, [profile, navigation]);\r\n \r\n-  if (loading) {\r\n-    return (\r\n-      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n-        <ActivityIndicator size=\"large\" color=\"#00bcd4\" />\r\n-      </View>\r\n-    );\r\n-  }\r\n-\r\n-  const canCancel = (reservationDate: string, startTime: string) => {\r\n+  const canCancel = useCallback((reservationDate: string, startTime: string) => {\r\n     const dateTime = new Date(`${reservationDate}T${startTime || \"09:00:00\"}`);\r\n     const now = new Date();\r\n     const diff = dateTime.getTime() - now.getTime();\r\n     return diff > 48 * 60 * 60 * 1000; // 48h en ms\r\n-  };\r\n+  }, []);\r\n \r\n-  const handleCancelReservation = async (\r\n+  const handleCancelReservation = useCallback(async (\r\n     id: string,\r\n     paymentIntentId?: string,\r\n     userEmail?: string,\r\n     reservationDate?: string,\r\n     reservationType?: string\r\n   ) => {\r\n-    if (!window.confirm(\"Confirmer l'annulation de cette réservation ?\")) {\r\n-      return;\r\n-    }\r\n+    Alert.alert(\r\n+      \"Confirmation\",\r\n+      \"Voulez-vous vraiment annuler cette réservation ?\",\r\n+      [\r\n+        { text: \"Non\", style: \"cancel\" },\r\n+        {\r\n+          text: \"Oui\",\r\n+          onPress: async () => {\r\n+            try {\r\n+              // Partie remboursement Stripe\r\n+              if (paymentIntentId && userEmail) {\r\n+                const res = await fetch(\r\n+                  \"https://mon-backend-node.vercel.app/api/refund-stripe-payment\",\r\n+                  {\r\n+                    method: \"POST\",\r\n+                    headers: { \"Content-Type\": \"application/json\" },\r\n+                    body: JSON.stringify({\r\n+                      paymentIntentId,\r\n+                      userEmail,\r\n+                      reservationDate,\r\n+                      reservationType,\r\n+                    }),\r\n+                  }\r\n+                );\r\n+                \r\n+                if (!res.ok) {\r\n+                  throw new Error(\"Refund failed\");\r\n+                }\r\n+              }\r\n \r\n-    // Partie remboursement Stripe + envoi mails\r\n-    if (paymentIntentId && userEmail) {\r\n-      try {\r\n-        const res = await fetch(\r\n-          \"https://mon-backend-node.vercel.app/api/refund-stripe-payment\",\r\n-          {\r\n-            method: \"POST\",\r\n-            headers: { \"Content-Type\": \"application/json\" },\r\n-            body: JSON.stringify({\r\n-              paymentIntentId,\r\n-              userEmail,\r\n-              reservationDate,\r\n-              reservationType,\r\n-            }),\r\n-          }\r\n-        );\r\n-        const data = await res.json();\r\n-        if (!res.ok || !data.success) {\r\n-          Alert.alert(\r\n-            \"Erreur\",\r\n-            \"Le remboursement ou l'envoi de mails a échoué.\"\r\n-          );\r\n-          return;\r\n-        }\r\n-      } catch (err) {\r\n-        Alert.alert(\r\n-          \"Erreur\",\r\n-          \"Erreur lors du remboursement ou de l'envoi de mails.\"\r\n-        );\r\n+              // Suppression en base\r\n+              const { error } = await supabase\r\n+                .from(\"reservations\")\r\n+                .delete()\r\n+                .eq(\"id\", id);\r\n \r\n-        return;\r\n-      }\r\n-    }\r\n+              if (error) throw error;\r\n \r\n-    // Suppression en base de données\r\n-    const { error } = await supabase.from(\"reservations\").delete().eq(\"id\", id);\r\n-    if (error) {\r\n-      Alert.alert(\"Erreur\", \"Impossible de supprimer la réservation.\");\r\n+              setReservations(prev => prev.filter(r => r.id !== id));\r\n+              Alert.alert(\"Succès\", \"Réservation annulée\");\r\n+            } catch (error) {\r\n+              console.error(\"Cancel error:\", error);\r\n+              Alert.alert(\"Erreur\", \"Une erreur est survenue\");\r\n+            }\r\n+          },\r\n+        },\r\n+      ]\r\n+    );\r\n+  }, []);\r\n \r\n-      return;\r\n-    }\r\n+  const handleOpenStripePortal = useCallback(async () => {\r\n+    if (!profile?.id) return;\r\n \r\n-    setReservations((prev) => prev.filter((r) => r.id !== id));\r\n-    Alert.alert(\"Succès\", \"Réservation annulée et remboursée.\");\r\n-  };\r\n-\r\n-  // Vérifier la session utilisateur et rediriger si nécessaire\r\n-  useEffect(() => {\r\n-    const checkUser = async () => {\r\n-      console.log(\"✅ CheckUser démarré\");\r\n-      try {\r\n-        const {\r\n-          data: { session },\r\n-        } = await supabase.auth.getSession();\r\n-        console.log(\"✅ Session récupérée:\", session);\r\n-\r\n-        if (!session) {\r\n-          Alert.alert(\r\n-            \"Accès non autorisé\",\r\n-            \"Veuillez vous connecter pour accéder.\"\r\n-          );\r\n-          navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n-          setLoading(false); // ✅ assure qu'on sort du loading\r\n-          return;\r\n-        }\r\n-\r\n-        setSession(session); // ✅ on garde la session si besoin ailleurs\r\n-      } catch (error) {\r\n-        console.error(\"❌ Erreur checkUser:\", error);\r\n-        navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    checkUser();\r\n-\r\n-    const { data: authListener } = supabase.auth.onAuthStateChange((event) => {\r\n-      if (event === \"SIGNED_OUT\") {\r\n-        console.log(\"🔄 SIGNED_OUT détecté, redirection Login\");\r\n-        navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n-      }\r\n-    });\r\n-    return () => {\r\n-      authListener.subscription.unsubscribe();\r\n-    };\r\n-  }, [navigation]);\r\n-\r\n-  // Récupérer les abonnements et factures Stripe\r\n-  useEffect(() => {\r\n-    if (!profile?.id) return;\r\n-    const fetchStripeData = async () => {\r\n+    try {\r\n       const { data: profileData, error: profileError } = await supabase\r\n         .from(\"profiles\")\r\n         .select(\"stripe_customer_id\")\r\n         .eq(\"id\", profile.id)\r\n-        .maybeSingle();\r\n+        .single();\r\n \r\n-      if (profileError) {\r\n-        console.error(\r\n-          \"❌ Erreur Supabase lors de la récupération du profil :\",\r\n-          profileError\r\n-        );\r\n-        return;\r\n+      if (profileError || !profileData?.stripe_customer_id) {\r\n+        throw new Error(\"No Stripe customer ID\");\r\n       }\r\n \r\n-      if (!profileData?.stripe_customer_id) {\r\n-        return;\r\n-      }\r\n-\r\n-      try {\r\n-        const res = await fetch(\r\n-          \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n-          {\r\n-            method: \"POST\",\r\n-            headers: { \"Content-Type\": \"application/json\" },\r\n-            body: JSON.stringify({\r\n-              stripeCustomerId: profileData.stripe_customer_id,\r\n-            }),\r\n-          }\r\n-        );\r\n-        const stripeData = await res.json();\r\n-        setStripeSubscriptions(stripeData.subscriptions || []);\r\n-        setStripeInvoices(stripeData.invoices || []);\r\n-      } catch (error) {\r\n-        console.error(\"❌ Erreur lors de l'appel à Stripe :\", error);\r\n-      }\r\n-    };\r\n-\r\n-    fetchStripeData();\r\n-  }, [profile]);\r\n-\r\n-  const handleOpenStripePortal = async () => {\r\n-    if (!profile?.id) return;\r\n-\r\n-    const { data: profileData, error: profileError } = await supabase\r\n-      .from(\"profiles\")\r\n-      .select(\"stripe_customer_id\")\r\n-      .eq(\"id\", profile.id)\r\n-      .maybeSingle();\r\n-\r\n-    if (profileError) {\r\n-      console.error(\"Erreur lors de la récupération du profil :\", profileError);\r\n-      return;\r\n-    }\r\n-    if (!profileData?.stripe_customer_id) return;\r\n-\r\n-    try {\r\n       const res = await fetch(\r\n         \"https://mon-backend-node.vercel.app/api/create-stripe-portal-session\",\r\n         {\r\n           method: \"POST\",\r\n@@ -353,486 +369,412 @@\n             stripeCustomerId: profileData.stripe_customer_id,\r\n           }),\r\n         }\r\n       );\r\n+\r\n       const data = await res.json();\r\n       if (!data.url) {\r\n-        Alert.alert(\"Erreur\", \"Impossible d'obtenir l'URL du portail Stripe.\");\r\n+        throw new Error(\"No portal URL\");\r\n+      }\r\n \r\n-        return;\r\n-      }\r\n-      window.location.href = data.url;\r\n+      await Linking.openURL(data.url);\r\n     } catch (error) {\r\n-      alert(\"Une erreur est survenue avec le portail client.\");\r\n+      console.error(\"Stripe portal error:\", error);\r\n+      Alert.alert(\"Erreur\", \"Impossible d'ouvrir le portail Stripe\");\r\n     }\r\n-  };\r\n+  }, [profile]);\r\n \r\n-  const formatDate = (dateInput: string | number): string => {\r\n+  const formatDate = useCallback((dateInput: string | number): string => {\r\n     try {\r\n       const date = new Date(dateInput);\r\n       return format(date, \"dd/MM/yyyy\", { locale: fr });\r\n     } catch {\r\n       return String(dateInput);\r\n     }\r\n-  };\r\n+  }, []);\r\n \r\n-  const getStatusBadge = (status: string) => {\r\n-    switch (status) {\r\n-      case \"active\":\r\n-        return (\r\n-          <Text\r\n-            style={{\r\n-              backgroundColor: \"green\",\r\n-              color: \"white\",\r\n-              paddingVertical: 4,\r\n-              paddingHorizontal: 8,\r\n-              borderRadius: 4,\r\n-              overflow: \"hidden\",\r\n-              fontSize: 12,\r\n-            }}\r\n-          >\r\n-            Actif\r\n-          </Text>\r\n-        );\r\n-      case \"option\":\r\n-        return (\r\n-          <Text\r\n-            style={{\r\n-              backgroundColor: \"orange\",\r\n-              color: \"white\",\r\n-              paddingVertical: 4,\r\n-              paddingHorizontal: 8,\r\n-              borderRadius: 4,\r\n-              overflow: \"hidden\",\r\n-              fontSize: 12,\r\n-            }}\r\n-          >\r\n-            En option\r\n-          </Text>\r\n-        );\r\n-      case \"pending\":\r\n-        return (\r\n-          <Text\r\n-            style={{\r\n-              backgroundColor: \"blue\",\r\n-              color: \"white\",\r\n-              paddingVertical: 4,\r\n-              paddingHorizontal: 8,\r\n-              borderRadius: 4,\r\n-              overflow: \"hidden\",\r\n-              fontSize: 12,\r\n-            }}\r\n-          >\r\n-            En attente\r\n-          </Text>\r\n-        );\r\n-      default:\r\n-        return (\r\n-          <Text\r\n-            style={{\r\n-              backgroundColor: \"gray\",\r\n-              color: \"white\",\r\n-              paddingVertical: 4,\r\n-              paddingHorizontal: 8,\r\n-              borderRadius: 4,\r\n-              overflow: \"hidden\",\r\n-              fontSize: 12,\r\n-            }}\r\n-          >\r\n-            {status}\r\n-          </Text>\r\n-        );\r\n-    }\r\n-  };\r\n+  const getStatusBadge = useCallback((status: string) => {\r\n+    const statusStyles = {\r\n+      active: { backgroundColor: \"green\", text: \"Actif\" },\r\n+      option: { backgroundColor: \"orange\", text: \"En option\" },\r\n+      pending: { backgroundColor: \"blue\", text: \"En attente\" },\r\n+      default: { backgroundColor: \"gray\", text: status },\r\n+    };\r\n \r\n-  if (loading || userDataLoading) {\r\n-    console.log(\"⌛ Affichage ActivityIndicator (loading ou userDataLoading)\");\r\n+    const style = statusStyles[status as keyof typeof statusStyles] || statusStyles.default;\r\n+\r\n     return (\r\n-      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n+      <Text style={{\r\n+        backgroundColor: style.backgroundColor,\r\n+        color: \"white\",\r\n+        paddingVertical: 4,\r\n+        paddingHorizontal: 8,\r\n+        borderRadius: 4,\r\n+        overflow: \"hidden\",\r\n+        fontSize: 12,\r\n+      }}>\r\n+        {style.text}\r\n+      </Text>\r\n+    );\r\n+  }, []);\r\n+\r\n+  if (!initialLoadComplete || userDataLoading) {\r\n+    return (\r\n+      <SafeAreaView style={{ flex: 1, justifyContent: \"center\" }}>\r\n         <ActivityIndicator size=\"large\" color=\"#00bcd4\" />\r\n-      </View>\r\n+      </SafeAreaView>\r\n     );\r\n   }\r\n \r\n-  if (error) {\r\n+  if (userDataError) {\r\n     return (\r\n-      <View className=\"flex flex-col items-center justify-center h-screen\">\r\n-        <Text className=\"text-red-500 text-xl mb-4\">\r\n+      <SafeAreaView style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n+        <Text style={{ color: \"red\", fontSize: 18, marginBottom: 20 }}>\r\n           Une erreur est survenue lors du chargement de vos données\r\n         </Text>\r\n-        <Button\r\n-          onPress={() =>\r\n-            navigation.navigate(\"Login\", { redirect: \"Dashboard\" })\r\n-          }\r\n-        >\r\n+        <Button onPress={() => navigation.navigate(\"Login\", { redirect: \"Dashboard\" })}>\r\n           Retourner à l'accueil\r\n         </Button>\r\n-      </View>\r\n+      </SafeAreaView>\r\n     );\r\n   }\r\n \r\n   if (isEditingProfile) {\r\n     return (\r\n-      <View className=\"flex flex-col min-h-screen\">\r\n+      <SafeAreaView style={{ flex: 1 }}>\r\n         <Navbar session={session} onToggleMenu={() => setMenuOpen(!menuOpen)} />\r\n-        <main className=\"flex-1 container mx-auto px-4 py-8\">\r\n+        <ScrollView contentContainerStyle={{ padding: 16 }}>\r\n           <ProfileEditForm\r\n             profile={\r\n               profile\r\n                 ? {\r\n-                    first_name: profile.first_name,\r\n-                    last_name: profile.last_name,\r\n+                    first_name: profile.first_name || \"\",\r\n+                    last_name: profile.last_name || \"\",\r\n                     company_name: profile.company_name || \"\",\r\n                     phone: profile.phone || \"\",\r\n                   }\r\n                 : null\r\n             }\r\n             onUpdate={updateProfile}\r\n             onCancel={() => setIsEditingProfile(false)}\r\n           />\r\n-        </main>\r\n+        </ScrollView>\r\n         <Footer />\r\n-        {/* GLOBAL OVERLAY */}\r\n-        {menuOpen && (\r\n-          <View\r\n-            style={{\r\n-              position: \"absolute\",\r\n-              top: 0,\r\n-              bottom: 0,\r\n-              left: 0,\r\n-              right: 0,\r\n-              backgroundColor: \"#fff\",\r\n-              zIndex: 9999,\r\n-              elevation: 9999,\r\n-            }}\r\n-          >\r\n-            <ScrollView\r\n-              contentContainerStyle={{ paddingTop: 60, paddingHorizontal: 20 }}\r\n-            >\r\n-              <TouchableOpacity\r\n-                style={{\r\n-                  position: \"absolute\",\r\n-                  top: 20,\r\n-                  right: 20,\r\n-                  padding: 10,\r\n-                }}\r\n-                onPress={() => setMenuOpen(false)}\r\n-              >\r\n-                <Text style={{ fontSize: 28, color: \"#333\" }}>✕</Text>\r\n-              </TouchableOpacity>\r\n-\r\n-              {[\r\n-                { label: \"Accueil\", path: \"/(tabs)\" },\r\n-                { label: \"Domiciliation\", path: \"/(tabs)/Domiciliation\" },\r\n-                { label: \"Services Admin\", path: \"/(tabs)/ServicesAdmin\" },\r\n-                { label: \"Communication\", path: \"/(tabs)/Communication\" },\r\n-                { label: \"Contact\", path: \"/(tabs)/Contact\" },\r\n-              ].map((item, idx) => (\r\n-                <TouchableOpacity\r\n-                  key={idx}\r\n-                  style={{\r\n-                    paddingVertical: 12,\r\n-                    borderBottomWidth: 1,\r\n-                    borderColor: \"#eee\",\r\n-                  }}\r\n-                  onPress={() => {\r\n-                    router.push(item.path as any);\r\n-                    setMenuOpen(false);\r\n-                  }}\r\n-                >\r\n-                  <Text style={{ fontSize: 18, color: \"#333\" }}>\r\n-                    {item.label}\r\n-                  </Text>\r\n-                </TouchableOpacity>\r\n-              ))}\r\n-\r\n-              <View style={{ marginTop: 30 }}>\r\n-                {session ? (\r\n-                  <>\r\n-                    <TouchableOpacity\r\n-                      style={{\r\n-                        paddingVertical: 12,\r\n-                        alignItems: \"center\",\r\n-                        borderRadius: 6,\r\n-                        backgroundColor: \"#06b6d4\",\r\n-                        marginBottom: 12,\r\n-                      }}\r\n-                      onPress={() => {\r\n-                        router.push(\"/(tabs)/Dashboard\" as any);\r\n-                        setMenuOpen(false);\r\n-                      }}\r\n-                    >\r\n-                      <Text style={{ color: \"#fff\", fontWeight: \"bold\" }}>\r\n-                        Dashboard\r\n-                      </Text>\r\n-                    </TouchableOpacity>\r\n-\r\n-                    <TouchableOpacity\r\n-                      style={{\r\n-                        paddingVertical: 12,\r\n-                        alignItems: \"center\",\r\n-                        borderRadius: 6,\r\n-                        backgroundColor: \"#06b6d4\",\r\n-                      }}\r\n-                      onPress={async () => {\r\n-                        const { error } = await supabase.auth.signOut();\r\n-                        if (error) {\r\n-                          Alert.alert(\"Erreur\", error.message);\r\n-                          return;\r\n-                        }\r\n-                        Alert.alert(\"Déconnexion réussie\");\r\n-                        router.push(\"/(tabs)/Login\" as any);\r\n-                        setMenuOpen(false);\r\n-                      }}\r\n-                    >\r\n-                      <Text style={{ color: \"#fff\", fontWeight: \"bold\" }}>\r\n-                        Déconnexion\r\n-                      </Text>\r\n-                    </TouchableOpacity>\r\n-                  </>\r\n-                ) : (\r\n-                  <TouchableOpacity\r\n-                    style={{\r\n-                      paddingVertical: 12,\r\n-                      alignItems: \"center\",\r\n-                      borderRadius: 6,\r\n-                      backgroundColor: \"#fff\",\r\n-                      borderWidth: 1,\r\n-                      borderColor: \"#06b6d4\",\r\n-                    }}\r\n-                    onPress={() => {\r\n-                      router.push(\"/(tabs)/Login\" as any);\r\n-                      setMenuOpen(false);\r\n-                    }}\r\n-                  >\r\n-                    <Text style={{ color: \"#06b6d4\", fontWeight: \"bold\" }}>\r\n-                      Connexion\r\n-                    </Text>\r\n-                  </TouchableOpacity>\r\n-                )}\r\n-              </View>\r\n-            </ScrollView>\r\n-          </View>\r\n-        )}\r\n-      </View>\r\n+        {renderMenuOverlay()}\r\n+      </SafeAreaView>\r\n     );\r\n   }\r\n \r\n   return (\r\n-    <ScrollView\r\n-      style={styles.container}\r\n-      contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n-    >\r\n-      <Text style={styles.title}>Tableau de bord</Text>\r\n-      <Text style={styles.subtitle}>\r\n-        Bienvenue sur votre espace personnel Lys&Co,{\" \"}\r\n-        {profile?.first_name || profile?.email}\r\n-      </Text>\r\n-\r\n-      {/* Mon Profil */}\r\n-      <View style={styles.card}>\r\n-        <Text style={styles.cardTitle}>Mon Profil</Text>\r\n-        <View style={styles.row}>\r\n-          <View style={styles.column}>\r\n-            <Text style={styles.label}>Nom</Text>\r\n-            <Text style={styles.value}>\r\n-              {profile?.first_name} {profile?.last_name}\r\n-            </Text>\r\n-            <Text style={styles.label}>Email</Text>\r\n-            <Text style={styles.value}>{profile?.email}</Text>\r\n-          </View>\r\n-          <View style={styles.column}>\r\n-            <Text style={styles.label}>Entreprise</Text>\r\n-            <Text style={styles.value}>\r\n-              {profile?.company_name || \"Non renseigné\"}\r\n-            </Text>\r\n-            <Text style={styles.label}>Téléphone</Text>\r\n-            <Text style={styles.value}>\r\n-              {profile?.phone || \"Non renseigné\"}\r\n-            </Text>\r\n-          </View>\r\n-        </View>\r\n-        <TouchableOpacity\r\n-          style={styles.buttonOutline}\r\n-          onPress={() => setIsEditingProfile(true)}\r\n-        >\r\n-          <Text style={styles.buttonOutlineText}>Modifier mon profil</Text>\r\n-        </TouchableOpacity>\r\n-\r\n-        <Text style={styles.dangerTitle}>Suppression de compte</Text>\r\n-        <Text style={styles.smallText}>\r\n-          Cette action est irréversible. Toutes vos données seront supprimées.\r\n+    <SafeAreaView style={{ flex: 1 }}>\r\n+      <Navbar session={session} onToggleMenu={() => setMenuOpen(!menuOpen)} />\r\n+      <ScrollView contentContainerStyle={styles.container}>\r\n+        <Text style={styles.title}>Tableau de bord</Text>\r\n+        <Text style={styles.subtitle}>\r\n+          Bienvenue sur votre espace personnel Lys&Co,{\" \"}\r\n+          {profile?.first_name || profile?.email}\r\n         </Text>\r\n-        <TouchableOpacity\r\n-          style={styles.buttonDanger}\r\n-          onPress={handleDeleteAccount}\r\n-        >\r\n-          <Text style={styles.buttonText}>\r\n-            Supprimer définitivement mon compte\r\n-          </Text>\r\n-        </TouchableOpacity>\r\n-      </View>\r\n \r\n-      {/* Documents */}\r\n-      <View style={styles.card}>\r\n-        <Text style={styles.cardTitle}>Mes documents</Text>\r\n-        {loadingDocuments ? (\r\n-          <ActivityIndicator />\r\n-        ) : documents.length === 0 ? (\r\n-          <Text>Aucun document disponible.</Text>\r\n-        ) : (\r\n-          documents.map((doc) => (\r\n-            <View key={doc.id} style={styles.item}>\r\n-              <Text>{doc.file_name}</Text>\r\n-              <Text>{new Date(doc.uploaded_at).toLocaleDateString()}</Text>\r\n-              <TouchableOpacity onPress={() => Linking.openURL(doc.file_url)}>\r\n-                <Text style={styles.link}>Télécharger</Text>\r\n-              </TouchableOpacity>\r\n+        {/* Mon Profil */}\r\n+        <View style={styles.card}>\r\n+          <Text style={styles.cardTitle}>Mon Profil</Text>\r\n+          <View style={styles.row}>\r\n+            <View style={styles.column}>\r\n+              <Text style={styles.label}>Nom</Text>\r\n+              <Text style={styles.value}>\r\n+                {profile?.first_name} {profile?.last_name}\r\n+              </Text>\r\n+              <Text style={styles.label}>Email</Text>\r\n+              <Text style={styles.value}>{profile?.email}</Text>\r\n             </View>\r\n-          ))\r\n-        )}\r\n-      </View>\r\n-\r\n-      {/* Réservations */}\r\n-      <View style={styles.card}>\r\n-        <Text style={styles.cardTitle}>Mes réservations de salles</Text>\r\n-        {loadingReservations ? (\r\n-          <ActivityIndicator />\r\n-        ) : reservations.length === 0 ? (\r\n-          <Text>Aucune réservation trouvée.</Text>\r\n-        ) : (\r\n-          reservations.map((res) => (\r\n-            <View key={res.id} style={styles.item}>\r\n-              <Text>Date: {formatDate(res.reservation_date)}</Text>\r\n-              <Text>\r\n-                Heure:{\" \"}\r\n-                {res.start_time\r\n-                  ? `${res.start_time} - ${res.end_time}`\r\n-                  : \"Journée/Demi-journée\"}\r\n+            <View style={styles.column}>\r\n+              <Text style={styles.label}>Entreprise</Text>\r\n+              <Text style={styles.value}>\r\n+                {profile?.company_name || \"Non renseigné\"}\r\n               </Text>\r\n-              <Text>Type: {humanizeReservationType(res.reservation_type)}</Text>\r\n-              <Text>Statut: {getStatusBadge(res.status)}</Text>\r\n-              {res.status !== \"cancelled\" &&\r\n-                canCancel(res.reservation_date, res.start_time) && (\r\n-                  <TouchableOpacity\r\n-                    style={styles.buttonDanger}\r\n-                    onPress={() =>\r\n-                      handleCancelReservation(\r\n-                        res.id,\r\n-                        res.payment_intent_id,\r\n-                        profile?.email,\r\n-                        res.reservation_date,\r\n-                        res.reservation_type\r\n-                      )\r\n-                    }\r\n-                  >\r\n-                    <Text style={styles.buttonText}>Annuler</Text>\r\n-                  </TouchableOpacity>\r\n-                )}\r\n+              <Text style={styles.label}>Téléphone</Text>\r\n+              <Text style={styles.value}>\r\n+                {profile?.phone || \"Non renseigné\"}\r\n+              </Text>\r\n             </View>\r\n-          ))\r\n-        )}\r\n-      </View>\r\n+          </View>\r\n+          <TouchableOpacity\r\n+            style={styles.buttonOutline}\r\n+            onPress={() => setIsEditingProfile(true)}\r\n+          >\r\n+            <Text style={styles.buttonOutlineText}>Modifier mon profil</Text>\r\n+          </TouchableOpacity>\r\n \r\n-      {/* Abonnements Stripe */}\r\n-      {stripeSubscriptions.length > 0 && (\r\n-        <View style={styles.card}>\r\n-          <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n-          {stripeSubscriptions.map((sub) => (\r\n-            <View key={sub.id} style={styles.item}>\r\n-              <Text>Statut: {getStatusBadge(sub.status)}</Text>\r\n-              <Text>Début: {formatDate(sub.start_date * 1000)}</Text>\r\n-              {sub.cancel_at && (\r\n-                <Text>Fin prévue: {formatDate(sub.cancel_at * 1000)}</Text>\r\n-              )}\r\n-              {sub.items?.data?.map((item: any) => (\r\n-                <Text key={item.id}>\r\n-                  Produit: {item.product_name || \"Nom inconnu\"}\r\n-                </Text>\r\n-              ))}\r\n-            </View>\r\n-          ))}\r\n+          <Text style={styles.dangerTitle}>Suppression de compte</Text>\r\n+          <Text style={styles.smallText}>\r\n+            Cette action est irréversible. Toutes vos données seront supprimées.\r\n+          </Text>\r\n           <TouchableOpacity\r\n-            style={styles.buttonPrimary}\r\n-            onPress={handleOpenStripePortal}\r\n+            style={styles.buttonDanger}\r\n+            onPress={handleDeleteAccount}\r\n           >\r\n-            <Text style={styles.buttonText}>Gérer mes abonnements</Text>\r\n+            <Text style={styles.buttonText}>\r\n+              Supprimer définitivement mon compte\r\n+            </Text>\r\n           </TouchableOpacity>\r\n         </View>\r\n-      )}\r\n \r\n-      {/* Factures Stripe */}\r\n-      {stripeInvoices.length > 0 && (\r\n+        {/* Documents */}\r\n         <View style={styles.card}>\r\n-          <Text style={styles.cardTitle}>Mes factures d'abonnement</Text>\r\n-          {stripeInvoices.map((invoice) => (\r\n-            <View key={invoice.id} style={styles.item}>\r\n-              <Text>\r\n-                Montant payé: {(invoice.amount_paid / 100).toFixed(2)} €\r\n-              </Text>\r\n-              <Text>Date: {formatDate(invoice.created * 1000)}</Text>\r\n-              {invoice.lines?.data?.map((line: any) => (\r\n-                <Text key={line.id}>\r\n-                  Produit: {line.product_name || \"Nom inconnu\"}\r\n+          <Text style={styles.cardTitle}>Mes documents</Text>\r\n+          {loadingDocuments ? (\r\n+            <ActivityIndicator />\r\n+          ) : documents.length === 0 ? (\r\n+            <Text>Aucun document disponible.</Text>\r\n+          ) : (\r\n+            documents.map((doc) => (\r\n+              <View key={doc.id} style={styles.item}>\r\n+                <Text>{doc.file_name}</Text>\r\n+                <Text>{new Date(doc.uploaded_at).toLocaleDateString()}</Text>\r\n+                <TouchableOpacity onPress={() => Linking.openURL(doc.file_url)}>\r\n+                  <Text style={styles.link}>Télécharger</Text>\r\n+                </TouchableOpacity>\r\n+              </View>\r\n+            ))\r\n+          )}\r\n+        </View>\r\n+\r\n+        {/* Réservations */}\r\n+        <View style={styles.card}>\r\n+          <Text style={styles.cardTitle}>Mes réservations de salles</Text>\r\n+          {loadingReservations ? (\r\n+            <ActivityIndicator />\r\n+          ) : reservations.length === 0 ? (\r\n+            <Text>Aucune réservation trouvée.</Text>\r\n+          ) : (\r\n+            reservations.map((res) => (\r\n+              <View key={res.id} style={styles.item}>\r\n+                <Text>Date: {formatDate(res.reservation_date)}</Text>\r\n+                <Text>\r\n+                  Heure:{\" \"}\r\n+                  {res.start_time\r\n+                    ? `${res.start_time} - ${res.end_time}`\r\n+                    : \"Journée/Demi-journée\"}\r\n                 </Text>\r\n-              ))}\r\n-              <TouchableOpacity\r\n-                onPress={() => Linking.openURL(invoice.invoice_pdf)}\r\n-              >\r\n-                <Text style={styles.link}>Télécharger la facture</Text>\r\n-              </TouchableOpacity>\r\n-            </View>\r\n-          ))}\r\n+                <Text>Type: {humanizeReservationType(res.reservation_type)}</Text>\r\n+                <Text>Statut: {getStatusBadge(res.status)}</Text>\r\n+                {res.status !== \"cancelled\" &&\r\n+                  canCancel(res.reservation_date, res.start_time) && (\r\n+                    <TouchableOpacity\r\n+                      style={styles.buttonDanger}\r\n+                      onPress={() =>\r\n+                        handleCancelReservation(\r\n+                          res.id,\r\n+                          res.payment_intent_id,\r\n+                          profile?.email,\r\n+                          res.reservation_date,\r\n+                          res.reservation_type\r\n+                        )\r\n+                      }\r\n+                    >\r\n+                      <Text style={styles.buttonText}>Annuler</Text>\r\n+                    </TouchableOpacity>\r\n+                  )}\r\n+              </View>\r\n+            ))\r\n+          )}\r\n         </View>\r\n-      )}\r\n-    </ScrollView>\r\n+\r\n+        {/* Abonnements Stripe */}\r\n+        {stripeSubscriptions.length > 0 && (\r\n+          <View style={styles.card}>\r\n+            <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n+            {stripeSubscriptions.map((sub) => (\r\n+              <View key={sub.id} style={styles.item}>\r\n+                <Text>Statut: {getStatusBadge(sub.status)}</Text>\r\n+                <Text>Début: {formatDate(sub.start_date * 1000)}</Text>\r\n+                {sub.cancel_at && (\r\n+                  <Text>Fin prévue: {formatDate(sub.cancel_at * 1000)}</Text>\r\n+                )}\r\n+                {sub.items?.data?.map((item: any) => (\r\n+                  <Text key={item.id}>\r\n+                    Produit: {item.product_name || \"Nom inconnu\"}\r\n+                  </Text>\r\n+                ))}\r\n+              </View>\r\n+            ))}\r\n+            <TouchableOpacity\r\n+              style={styles.buttonPrimary}\r\n+              onPress={handleOpenStripePortal}\r\n+            >\r\n+              <Text style={styles.buttonText}>Gérer mes abonnements</Text>\r\n+            </TouchableOpacity>\r\n+          </View>\r\n+        )}\r\n+\r\n+        {/* Factures Stripe */}\r\n+        {stripeInvoices.length > 0 && (\r\n+          <View style={styles.card}>\r\n+            <Text style={styles.cardTitle}>Mes factures d'abonnement</Text>\r\n+            {stripeInvoices.map((invoice) => (\r\n+              <View key={invoice.id} style={styles.item}>\r\n+                <Text>\r\n+                  Montant payé: {(invoice.amount_paid / 100).toFixed(2)} €\r\n+                </Text>\r\n+                <Text>Date: {formatDate(invoice.created * 1000)}</Text>\r\n+                {invoice.lines?.data?.map((line: any) => (\r\n+                  <Text key={line.id}>\r\n+                    Produit: {line.product_name || \"Nom inconnu\"}\r\n+                  </Text>\r\n+                ))}\r\n+                <TouchableOpacity\r\n+                  onPress={() => Linking.openURL(invoice.invoice_pdf)}\r\n+                >\r\n+                  <Text style={styles.link}>Télécharger la facture</Text>\r\n+                </TouchableOpacity>\r\n+              </View>\r\n+            ))}\r\n+          </View>\r\n+        )}\r\n+      </ScrollView>\r\n+      <Footer />\r\n+      {renderMenuOverlay()}\r\n+    </SafeAreaView>\r\n   );\r\n };\r\n \r\n const styles = StyleSheet.create({\r\n-  container: { padding: 16, flex: 1 },\r\n-  title: { fontSize: 24, fontWeight: \"bold\", marginBottom: 12 },\r\n-  subtitle: { fontSize: 16, marginBottom: 20 },\r\n+  container: { \r\n+    padding: 16,\r\n+    paddingBottom: 32,\r\n+  },\r\n+  title: { \r\n+    fontSize: 24, \r\n+    fontWeight: \"bold\", \r\n+    marginBottom: 12 \r\n+  },\r\n+  subtitle: { \r\n+    fontSize: 16, \r\n+    marginBottom: 20 \r\n+  },\r\n   card: {\r\n     backgroundColor: \"#fff\",\r\n     borderRadius: 8,\r\n     padding: 16,\r\n     marginBottom: 16,\r\n+    shadowColor: \"#000\",\r\n+    shadowOffset: { width: 0, height: 2 },\r\n+    shadowOpacity: 0.1,\r\n+    shadowRadius: 4,\r\n     elevation: 2,\r\n   },\r\n-  cardTitle: { fontSize: 18, fontWeight: \"bold\", marginBottom: 12 },\r\n-  row: { flexDirection: \"row\", justifyContent: \"space-between\" },\r\n-  column: { flex: 1 },\r\n-  label: { fontSize: 14, color: \"#666\" },\r\n-  value: { fontSize: 16, fontWeight: \"500\", marginBottom: 8 },\r\n+  cardTitle: { \r\n+    fontSize: 18, \r\n+    fontWeight: \"bold\", \r\n+    marginBottom: 12 \r\n+  },\r\n+  row: { \r\n+    flexDirection: \"row\", \r\n+    justifyContent: \"space-between\" \r\n+  },\r\n+  column: { \r\n+    flex: 1 \r\n+  },\r\n+  label: { \r\n+    fontSize: 14, \r\n+    color: \"#666\" \r\n+  },\r\n+  value: { \r\n+    fontSize: 16, \r\n+    fontWeight: \"500\", \r\n+    marginBottom: 8 \r\n+  },\r\n   buttonPrimary: {\r\n     backgroundColor: \"#4f46e5\",\r\n-    padding: 10,\r\n+    padding: 12,\r\n     borderRadius: 6,\r\n     marginTop: 8,\r\n+    alignItems: \"center\",\r\n   },\r\n   buttonOutline: {\r\n     borderColor: \"#4f46e5\",\r\n     borderWidth: 1,\r\n-    padding: 10,\r\n+    padding: 12,\r\n     borderRadius: 6,\r\n     marginTop: 8,\r\n+    alignItems: \"center\",\r\n   },\r\n   buttonDanger: {\r\n     backgroundColor: \"#dc2626\",\r\n-    padding: 10,\r\n+    padding: 12,\r\n     borderRadius: 6,\r\n     marginTop: 8,\r\n+    alignItems: \"center\",\r\n   },\r\n-  buttonText: { color: \"#fff\", textAlign: \"center\", fontWeight: \"bold\" },\r\n+  buttonText: { \r\n+    color: \"#fff\", \r\n+    fontWeight: \"bold\" \r\n+  },\r\n   buttonOutlineText: {\r\n     color: \"#4f46e5\",\r\n-    textAlign: \"center\",\r\n     fontWeight: \"bold\",\r\n   },\r\n-  item: { marginBottom: 12 },\r\n-  link: { color: \"#2563eb\", textDecorationLine: \"underline\" },\r\n-  dangerTitle: { color: \"#dc2626\", fontWeight: \"bold\", marginTop: 12 },\r\n-  smallText: { fontSize: 12, color: \"#666\", marginBottom: 8 },\r\n+  item: { \r\n+    marginBottom: 12 \r\n+  },\r\n+  link: { \r\n+    color: \"#2563eb\", \r\n+    textDecorationLine: \"underline\" \r\n+  },\r\n+  dangerTitle: { \r\n+    color: \"#dc2626\", \r\n+    fontWeight: \"bold\", \r\n+    marginTop: 12 \r\n+  },\r\n+  smallText: { \r\n+    fontSize: 12, \r\n+    color: \"#666\", \r\n+    marginBottom: 8 \r\n+  },\r\n+  menuOverlay: {\r\n+    position: \"absolute\",\r\n+    top: 0,\r\n+    bottom: 0,\r\n+    left: 0,\r\n+    right: 0,\r\n+    backgroundColor: \"#fff\",\r\n+    zIndex: 9999,\r\n+  },\r\n+  menuContent: {\r\n+    paddingTop: 60,\r\n+    paddingHorizontal: 20,\r\n+  },\r\n+  menuCloseButton: {\r\n+    position: \"absolute\",\r\n+    top: 20,\r\n+    right: 20,\r\n+    padding: 10,\r\n+  },\r\n+  menuCloseIcon: {\r\n+    fontSize: 28,\r\n+    color: \"#333\",\r\n+  },\r\n+  menuItem: {\r\n+    paddingVertical: 12,\r\n+    borderBottomWidth: 1,\r\n+    borderColor: \"#eee\",\r\n+  },\r\n+  menuItemText: {\r\n+    fontSize: 18,\r\n+    color: \"#333\",\r\n+  },\r\n+  menuAuthSection: {\r\n+    marginTop: 30,\r\n+  },\r\n+  menuButton: {\r\n+    paddingVertical: 12,\r\n+    alignItems: \"center\",\r\n+    borderRadius: 6,\r\n+    marginBottom: 12,\r\n+    borderWidth: 1,\r\n+  },\r\n+  menuButtonText: {\r\n+    fontWeight: \"bold\",\r\n+  },\r\n });\r\n \r\n-export default Dashboard;\r\n+export default Dashboard;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752963741966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -452,15 +452,11 @@\n       >\r\n         <Text style={{ color: \"red\", fontSize: 18, marginBottom: 20 }}>\r\n           Une erreur est survenue lors du chargement de vos données\r\n         </Text>\r\n-        <Button\r\n-          onPress={() =>\r\n-            navigation.navigate(\"Login\", { redirect: \"Dashboard\" })\r\n-          }\r\n-        >\r\n-          Retourner à l'accueil\r\n-        </Button>\r\n+        <Button onPress={() => router.push(\"/login?redirect=Dashboard\")}>\r\n+  Retourner à l'accueil\r\n+</Button>\r\n       </SafeAreaView>\r\n     );\r\n   }\r\n \r\n"
                }
            ],
            "date": 1752757276557,
            "name": "Commit-0",
            "content": "// Dashboard.tsx\r\nimport { supabase } from \"@/integrations/supabase/client.js\";\r\nimport ProfileEditForm from \"@/src/components/dashboard/ProfileEditForm.js\";\r\nimport Footer from \"@/src/components/Footer.js\";\r\nimport Navbar from \"@/src/components/Navbar.js\";\r\nimport { Button } from \"@/src/components/ui/button.js\";\r\nimport { useUserData } from \"@/src/hooks/useUserData.js\";\r\nimport type { RootStackParamList } from \"@/src/navigation/types.js\";\r\nimport { humanizeReservationType } from \"@/src/utils/humanize.js\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\nimport { format } from \"date-fns\";\r\nimport { fr } from \"date-fns/locale\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ActivityIndicator,\r\n  Alert,\r\n  Linking,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Text,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\n\r\ntype NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n\r\nconst Dashboard = () => {\r\n  const navigation = useNavigation<NavigationProp>();\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAdmin, setIsAdmin] = useState<boolean | null>(null);\r\n  const [setProfile] = useState<any>(null);\r\n  const [documents, setDocuments] = useState<any[]>([]);\r\n  const [reservations, setReservations] = useState<any[]>([]);\r\n  const [stripeSubscriptions, setStripeSubscriptions] = useState<any[]>([]);\r\n  const [stripeInvoices, setStripeInvoices] = useState<any[]>([]);\r\n  const [isEditingProfile, setIsEditingProfile] = useState(false);\r\n  const [loadingDocuments, setLoadingDocuments] = useState(false);\r\n  const [loadingReservations, setLoadingReservations] = useState(true);\r\n\r\n  const {\r\n    profile,\r\n    loading: userDataLoading,\r\n    error,\r\n    updateProfile,\r\n  } = useUserData();\r\n\r\n  // Charger le profil utilisateur\r\n  useEffect(() => {\r\n    const fetchProfile = async () => {\r\n      const {\r\n        data: { user },\r\n      } = await supabase.auth.getUser();\r\n\r\n      if (!user) {\r\n        setIsAdmin(false);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const { data, error } = await supabase\r\n        .from(\"profiles\")\r\n        .select(\"*\")\r\n        .eq(\"id\", user.id)\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error(\"Erreur récupération profil:\", error.message);\r\n      } else {\r\n        setProfile(data);\r\n        setIsAdmin(data?.is_admin ?? false);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchProfile();\r\n  }, []);\r\n\r\n  // Charger les documents\r\n  useEffect(() => {\r\n    const fetchDocuments = async () => {\r\n      if (!profile?.id || isAdmin) return;\r\n      const { data, error } = await supabase\r\n        .from(\"user_documents\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", profile.id)\r\n        .order(\"uploaded_at\", { ascending: false });\r\n\r\n      if (error) {\r\n        console.error(\"Erreur chargement documents:\", error);\r\n      } else {\r\n        setDocuments(data || []);\r\n      }\r\n    };\r\n\r\n    fetchDocuments();\r\n  }, [profile, isAdmin]);\r\n\r\n  // Charger les réservations\r\n  useEffect(() => {\r\n    const fetchReservations = async () => {\r\n      if (!profile?.id) return;\r\n      const { data, error } = await supabase\r\n        .from(\"reservations\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", profile.id)\r\n        .order(\"reservation_date\", { ascending: false });\r\n\r\n      if (error) {\r\n        console.error(\"Erreur chargement reservations:\", error);\r\n      } else {\r\n        setReservations(data || []);\r\n      }\r\n    };\r\n\r\n    fetchReservations();\r\n  }, [profile]);\r\n\r\n  // Supprimer le compte\r\n  const handleDeleteAccount = async () => {\r\n    Alert.alert(\r\n      \"Confirmation\",\r\n      \"Voulez-vous vraiment désactiver votre compte ?\",\r\n      [\r\n        {\r\n          text: \"Annuler\",\r\n          style: \"cancel\",\r\n        },\r\n        {\r\n          text: \"Confirmer\",\r\n          onPress: async () => {\r\n            if (!profile?.id || !profile?.email) return;\r\n\r\n            try {\r\n              const res = await fetch(\r\n                \"https://mon-backend-node.vercel.app/api/disable-account\",\r\n                {\r\n                  method: \"POST\",\r\n                  headers: { \"Content-Type\": \"application/json\" },\r\n                  body: JSON.stringify({\r\n                    id: profile.id,\r\n                    email: profile.email,\r\n                    first_name: profile.first_name,\r\n                    last_name: profile.last_name,\r\n                    frontendUrl: process.env.EXPO_PUBLIC_APP_URL,\r\n                  }),\r\n                }\r\n              );\r\n\r\n              if (!res.ok) {\r\n                Alert.alert(\"Erreur\", \"Problème lors de la désactivation.\");\r\n                return;\r\n              }\r\n\r\n              Alert.alert(\"Succès\", \"Votre compte a été désactivé.\");\r\n              await supabase.auth.signOut();\r\n              navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n            } catch (err) {\r\n              console.error(err);\r\n              Alert.alert(\"Erreur\", \"Impossible de contacter le serveur.\");\r\n            }\r\n          },\r\n        },\r\n      ]\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n        <ActivityIndicator size=\"large\" color=\"#00bcd4\" />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  const canCancel = (reservationDate: string, startTime: string) => {\r\n    const dateTime = new Date(`${reservationDate}T${startTime || \"09:00:00\"}`);\r\n    const now = new Date();\r\n    const diff = dateTime.getTime() - now.getTime();\r\n    return diff > 48 * 60 * 60 * 1000; // 48h en ms\r\n  };\r\n\r\n  const handleCancelReservation = async (\r\n    id: string,\r\n    paymentIntentId?: string,\r\n    userEmail?: string,\r\n    reservationDate?: string,\r\n    reservationType?: string\r\n  ) => {\r\n    if (!window.confirm(\"Confirmer l'annulation de cette réservation ?\")) {\r\n      return;\r\n    }\r\n\r\n    // Partie remboursement Stripe + envoi mails\r\n    if (paymentIntentId && userEmail) {\r\n      try {\r\n        const res = await fetch(\r\n          \"https://mon-backend-node.vercel.app/api/refund-stripe-payment\",\r\n          {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n              paymentIntentId,\r\n              userEmail,\r\n              reservationDate,\r\n              reservationType,\r\n            }),\r\n          }\r\n        );\r\n        const data = await res.json();\r\n        if (!res.ok || !data.success) {\r\n          Alert.alert(\r\n            \"Erreur\",\r\n            \"Le remboursement ou l'envoi de mails a échoué.\"\r\n          );\r\n          return;\r\n        }\r\n      } catch (err) {\r\n        Alert.alert(\r\n          \"Erreur\",\r\n          \"Erreur lors du remboursement ou de l'envoi de mails.\"\r\n        );\r\n\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Suppression en base de données\r\n    const { error } = await supabase.from(\"reservations\").delete().eq(\"id\", id);\r\n    if (error) {\r\n      Alert.alert(\"Erreur\", \"Impossible de supprimer la réservation.\");\r\n\r\n      return;\r\n    }\r\n\r\n    setReservations((prev) => prev.filter((r) => r.id !== id));\r\n    Alert.alert(\"Succès\", \"Réservation annulée et remboursée.\");\r\n  };\r\n\r\n  // Vérifier la session utilisateur et rediriger si nécessaire\r\n  useEffect(() => {\r\n    const checkUser = async () => {\r\n      try {\r\n        const {\r\n          data: { session },\r\n        } = await supabase.auth.getSession();\r\n\r\n        if (!session) {\r\n          Alert.alert(\r\n            \"Accès non autorisé\",\r\n            \"Veuillez vous connecter pour accéder.\"\r\n          );\r\n          navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n          return;\r\n        }\r\n      } catch (error) {\r\n        navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkUser();\r\n\r\n    const { data: authListener } = supabase.auth.onAuthStateChange((event) => {\r\n      if (event === \"SIGNED_OUT\") {\r\n        navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n      }\r\n    });\r\n    return () => {\r\n      authListener.subscription.unsubscribe();\r\n    };\r\n  }, [navigation]);\r\n\r\n  // Récupérer les abonnements et factures Stripe\r\n  useEffect(() => {\r\n    if (!profile?.id) return;\r\n    const fetchStripeData = async () => {\r\n      const { data: profileData, error: profileError } = await supabase\r\n        .from(\"profiles\")\r\n        .select(\"stripe_customer_id\")\r\n        .eq(\"id\", profile.id)\r\n        .maybeSingle();\r\n\r\n      if (profileError) {\r\n        console.error(\r\n          \"❌ Erreur Supabase lors de la récupération du profil :\",\r\n          profileError\r\n        );\r\n        return;\r\n      }\r\n\r\n      if (!profileData?.stripe_customer_id) {\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const res = await fetch(\r\n          \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n          {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n              stripeCustomerId: profileData.stripe_customer_id,\r\n            }),\r\n          }\r\n        );\r\n        const stripeData = await res.json();\r\n        setStripeSubscriptions(stripeData.subscriptions || []);\r\n        setStripeInvoices(stripeData.invoices || []);\r\n      } catch (error) {\r\n        console.error(\"❌ Erreur lors de l'appel à Stripe :\", error);\r\n      }\r\n    };\r\n\r\n    fetchStripeData();\r\n  }, [profile]);\r\n\r\n  const handleOpenStripePortal = async () => {\r\n    if (!profile?.id) return;\r\n\r\n    const { data: profileData, error: profileError } = await supabase\r\n      .from(\"profiles\")\r\n      .select(\"stripe_customer_id\")\r\n      .eq(\"id\", profile.id)\r\n      .maybeSingle();\r\n\r\n    if (profileError) {\r\n      console.error(\"Erreur lors de la récupération du profil :\", profileError);\r\n      return;\r\n    }\r\n    if (!profileData?.stripe_customer_id) return;\r\n\r\n    try {\r\n      const res = await fetch(\r\n        \"https://mon-backend-node.vercel.app/api/create-stripe-portal-session\",\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            stripeCustomerId: profileData.stripe_customer_id,\r\n          }),\r\n        }\r\n      );\r\n      const data = await res.json();\r\n      if (!data.url) {\r\n        Alert.alert(\"Erreur\", \"Impossible d'obtenir l'URL du portail Stripe.\");\r\n\r\n        return;\r\n      }\r\n      window.location.href = data.url;\r\n    } catch (error) {\r\n      alert(\"Une erreur est survenue avec le portail client.\");\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateInput: string | number): string => {\r\n    try {\r\n      const date = new Date(dateInput);\r\n      return format(date, \"dd/MM/yyyy\", { locale: fr });\r\n    } catch {\r\n      return String(dateInput);\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    switch (status) {\r\n      case \"active\":\r\n        return (\r\n          <Text\r\n            style={{\r\n              backgroundColor: \"green\",\r\n              color: \"white\",\r\n              paddingVertical: 4,\r\n              paddingHorizontal: 8,\r\n              borderRadius: 4,\r\n              overflow: \"hidden\",\r\n              fontSize: 12,\r\n            }}\r\n          >\r\n            Actif\r\n          </Text>\r\n        );\r\n      case \"option\":\r\n        return (\r\n          <Text\r\n            style={{\r\n              backgroundColor: \"orange\",\r\n              color: \"white\",\r\n              paddingVertical: 4,\r\n              paddingHorizontal: 8,\r\n              borderRadius: 4,\r\n              overflow: \"hidden\",\r\n              fontSize: 12,\r\n            }}\r\n          >\r\n            En option\r\n          </Text>\r\n        );\r\n      case \"pending\":\r\n        return (\r\n          <Text\r\n            style={{\r\n              backgroundColor: \"blue\",\r\n              color: \"white\",\r\n              paddingVertical: 4,\r\n              paddingHorizontal: 8,\r\n              borderRadius: 4,\r\n              overflow: \"hidden\",\r\n              fontSize: 12,\r\n            }}\r\n          >\r\n            En attente\r\n          </Text>\r\n        );\r\n      default:\r\n        return (\r\n          <Text\r\n            style={{\r\n              backgroundColor: \"gray\",\r\n              color: \"white\",\r\n              paddingVertical: 4,\r\n              paddingHorizontal: 8,\r\n              borderRadius: 4,\r\n              overflow: \"hidden\",\r\n              fontSize: 12,\r\n            }}\r\n          >\r\n            {status}\r\n          </Text>\r\n        );\r\n    }\r\n  };\r\n\r\n  if (loading || userDataLoading) {\r\n    return (\r\n      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n        <ActivityIndicator size=\"large\" color=\"#00bcd4\" />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <View className=\"flex flex-col items-center justify-center h-screen\">\r\n        <Text className=\"text-red-500 text-xl mb-4\">\r\n          Une erreur est survenue lors du chargement de vos données\r\n        </Text>\r\n        <Button\r\n          onPress={() =>\r\n            navigation.navigate(\"Login\", { redirect: \"Dashboard\" })\r\n          }\r\n        >\r\n          Retourner à l'accueil\r\n        </Button>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (isEditingProfile) {\r\n    return (\r\n      <View className=\"flex flex-col min-h-screen\">\r\n        <Navbar />\r\n        <main className=\"flex-1 container mx-auto px-4 py-8\">\r\n          <ProfileEditForm\r\n            profile={profile}\r\n            onUpdate={updateProfile}\r\n            onCancel={() => setIsEditingProfile(false)}\r\n          />\r\n        </main>\r\n        <Footer />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ScrollView contentContainerStyle={styles.container}>\r\n      <Text style={styles.title}>Tableau de bord</Text>\r\n      <Text style={styles.subtitle}>\r\n        Bienvenue sur votre espace personnel Lys&Co,{\" \"}\r\n        {profile?.first_name || profile?.email}\r\n      </Text>\r\n\r\n      {/* Mon Profil */}\r\n      <View style={styles.card}>\r\n        <Text style={styles.cardTitle}>Mon Profil</Text>\r\n        <View style={styles.row}>\r\n          <View style={styles.column}>\r\n            <Text style={styles.label}>Nom</Text>\r\n            <Text style={styles.value}>\r\n              {profile?.first_name} {profile?.last_name}\r\n            </Text>\r\n            <Text style={styles.label}>Email</Text>\r\n            <Text style={styles.value}>{profile?.email}</Text>\r\n          </View>\r\n          <View style={styles.column}>\r\n            <Text style={styles.label}>Entreprise</Text>\r\n            <Text style={styles.value}>\r\n              {profile?.company_name || \"Non renseigné\"}\r\n            </Text>\r\n            <Text style={styles.label}>Téléphone</Text>\r\n            <Text style={styles.value}>\r\n              {profile?.phone || \"Non renseigné\"}\r\n            </Text>\r\n          </View>\r\n        </View>\r\n        <TouchableOpacity\r\n          style={styles.buttonOutline}\r\n          onPress={() => setIsEditingProfile(true)}\r\n        >\r\n          <Text style={styles.buttonOutlineText}>Modifier mon profil</Text>\r\n        </TouchableOpacity>\r\n\r\n        <Text style={styles.dangerTitle}>Suppression de compte</Text>\r\n        <Text style={styles.smallText}>\r\n          Cette action est irréversible. Toutes vos données seront supprimées.\r\n        </Text>\r\n        <TouchableOpacity\r\n          style={styles.buttonDanger}\r\n          onPress={handleDeleteAccount}\r\n        >\r\n          <Text style={styles.buttonText}>\r\n            Supprimer définitivement mon compte\r\n          </Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n\r\n      {/* Documents */}\r\n      <View style={styles.card}>\r\n        <Text style={styles.cardTitle}>Mes documents</Text>\r\n        {loadingDocuments ? (\r\n          <ActivityIndicator />\r\n        ) : documents.length === 0 ? (\r\n          <Text>Aucun document disponible.</Text>\r\n        ) : (\r\n          documents.map((doc) => (\r\n            <View key={doc.id} style={styles.item}>\r\n              <Text>{doc.file_name}</Text>\r\n              <Text>{new Date(doc.uploaded_at).toLocaleDateString()}</Text>\r\n              <TouchableOpacity onPress={() => Linking.openURL(doc.file_url)}>\r\n                <Text style={styles.link}>Télécharger</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n          ))\r\n        )}\r\n      </View>\r\n\r\n      {/* Réservations */}\r\n      <View style={styles.card}>\r\n        <Text style={styles.cardTitle}>Mes réservations de salles</Text>\r\n        {loadingReservations ? (\r\n          <ActivityIndicator />\r\n        ) : reservations.length === 0 ? (\r\n          <Text>Aucune réservation trouvée.</Text>\r\n        ) : (\r\n          reservations.map((res) => (\r\n            <View key={res.id} style={styles.item}>\r\n              <Text>Date: {formatDate(res.reservation_date)}</Text>\r\n              <Text>\r\n                Heure:{\" \"}\r\n                {res.start_time\r\n                  ? `${res.start_time} - ${res.end_time}`\r\n                  : \"Journée/Demi-journée\"}\r\n              </Text>\r\n              <Text>Type: {humanizeReservationType(res.reservation_type)}</Text>\r\n              <Text>Statut: {getStatusBadge(res.status)}</Text>\r\n              {res.status !== \"cancelled\" &&\r\n                canCancel(res.reservation_date, res.start_time) && (\r\n                  <TouchableOpacity\r\n                    style={styles.buttonDanger}\r\n                    onPress={() =>\r\n                      handleCancelReservation(\r\n                        res.id,\r\n                        res.payment_intent_id,\r\n                        profile?.email,\r\n                        res.reservation_date,\r\n                        res.reservation_type\r\n                      )\r\n                    }\r\n                  >\r\n                    <Text style={styles.buttonText}>Annuler</Text>\r\n                  </TouchableOpacity>\r\n                )}\r\n            </View>\r\n          ))\r\n        )}\r\n      </View>\r\n\r\n      {/* Abonnements Stripe */}\r\n      {stripeSubscriptions.length > 0 && (\r\n        <View style={styles.card}>\r\n          <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n          {stripeSubscriptions.map((sub) => (\r\n            <View key={sub.id} style={styles.item}>\r\n              <Text>Statut: {getStatusBadge(sub.status)}</Text>\r\n              <Text>Début: {formatDate(sub.start_date * 1000)}</Text>\r\n              {sub.cancel_at && (\r\n                <Text>Fin prévue: {formatDate(sub.cancel_at * 1000)}</Text>\r\n              )}\r\n              {sub.items?.data?.map((item: any) => (\r\n                <Text key={item.id}>\r\n                  Produit: {item.product_name || \"Nom inconnu\"}\r\n                </Text>\r\n              ))}\r\n            </View>\r\n          ))}\r\n          <TouchableOpacity\r\n            style={styles.buttonPrimary}\r\n            onPress={handleOpenStripePortal}\r\n          >\r\n            <Text style={styles.buttonText}>Gérer mes abonnements</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      )}\r\n\r\n      {/* Factures Stripe */}\r\n      {stripeInvoices.length > 0 && (\r\n        <View style={styles.card}>\r\n          <Text style={styles.cardTitle}>Mes factures d'abonnement</Text>\r\n          {stripeInvoices.map((invoice) => (\r\n            <View key={invoice.id} style={styles.item}>\r\n              <Text>\r\n                Montant payé: {(invoice.amount_paid / 100).toFixed(2)} €\r\n              </Text>\r\n              <Text>Date: {formatDate(invoice.created * 1000)}</Text>\r\n              {invoice.lines?.data?.map((line: any) => (\r\n                <Text key={line.id}>\r\n                  Produit: {line.product_name || \"Nom inconnu\"}\r\n                </Text>\r\n              ))}\r\n              <TouchableOpacity\r\n                onPress={() => Linking.openURL(invoice.invoice_pdf)}\r\n              >\r\n                <Text style={styles.link}>Télécharger la facture</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n          ))}\r\n        </View>\r\n      )}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: { padding: 16 },\r\n  title: { fontSize: 24, fontWeight: \"bold\", marginBottom: 12 },\r\n  subtitle: { fontSize: 16, marginBottom: 20 },\r\n  card: {\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: 8,\r\n    padding: 16,\r\n    marginBottom: 16,\r\n    elevation: 2,\r\n  },\r\n  cardTitle: { fontSize: 18, fontWeight: \"bold\", marginBottom: 12 },\r\n  row: { flexDirection: \"row\", justifyContent: \"space-between\" },\r\n  column: { flex: 1 },\r\n  label: { fontSize: 14, color: \"#666\" },\r\n  value: { fontSize: 16, fontWeight: \"500\", marginBottom: 8 },\r\n  buttonPrimary: {\r\n    backgroundColor: \"#4f46e5\",\r\n    padding: 10,\r\n    borderRadius: 6,\r\n    marginTop: 8,\r\n  },\r\n  buttonOutline: {\r\n    borderColor: \"#4f46e5\",\r\n    borderWidth: 1,\r\n    padding: 10,\r\n    borderRadius: 6,\r\n    marginTop: 8,\r\n  },\r\n  buttonDanger: {\r\n    backgroundColor: \"#dc2626\",\r\n    padding: 10,\r\n    borderRadius: 6,\r\n    marginTop: 8,\r\n  },\r\n  buttonText: { color: \"#fff\", textAlign: \"center\", fontWeight: \"bold\" },\r\n  buttonOutlineText: {\r\n    color: \"#4f46e5\",\r\n    textAlign: \"center\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  item: { marginBottom: 12 },\r\n  link: { color: \"#2563eb\", textDecorationLine: \"underline\" },\r\n  dangerTitle: { color: \"#dc2626\", fontWeight: \"bold\", marginTop: 12 },\r\n  smallText: { fontSize: 12, color: \"#666\", marginBottom: 8 },\r\n});\r\n\r\nexport default Dashboard;\r\n"
        }
    ]
}