{
    "sourceFile": "app/(tabs)/DemandeDevis.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1752954468896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752954922428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,39 @@\n-import { zodResolver } from \"@hookform/resolvers/zod\";\r\n+import { yupResolver } from \"@hookform/resolvers/yup\";\r\n import { Picker } from \"@react-native-picker/picker\";\r\n import React from \"react\";\r\n import { Controller, useForm } from \"react-hook-form\";\r\n import { Alert, Button, ScrollView, Text, TextInput, View } from \"react-native\";\r\n-import { z } from \"zod\";\r\n+import * as yup from \"yup\";\r\n \r\n-const formSchema = z.object({\r\n-  firstName: z\r\n+// Schéma de validation (yup fonctionne mieux avec React Native que zod)\r\n+const formSchema = yup.object().shape({\r\n+  firstName: yup\r\n     .string()\r\n-    .min(2, { message: \"Le prénom doit contenir au moins 2 caractères\" }),\r\n-  lastName: z\r\n+    .min(2, \"Le prénom doit contenir au moins 2 caractères\"),\r\n+  lastName: yup.string().min(2, \"Le nom doit contenir au moins 2 caractères\"),\r\n+  email: yup.string().email(\"Adresse email invalide\"),\r\n+  phone: yup.string().min(10, \"Numéro de téléphone invalide\"),\r\n+  company: yup.string(),\r\n+  serviceType: yup\r\n     .string()\r\n-    .min(2, { message: \"Le nom doit contenir au moins 2 caractères\" }),\r\n-  email: z.string().email({ message: \"Adresse email invalide\" }),\r\n-  phone: z.string().min(10, { message: \"Numéro de téléphone invalide\" }),\r\n-  company: z.string().optional(),\r\n-  serviceType: z\r\n+    .required(\"Veuillez sélectionner un type de service\"),\r\n+  budget: yup.string(),\r\n+  message: yup\r\n     .string()\r\n-    .min(1, { message: \"Veuillez sélectionner un type de service\" }),\r\n-  budget: z.string().optional(),\r\n-  message: z\r\n-    .string()\r\n-    .min(10, {\r\n-      message: \"Veuillez décrire votre besoin en au moins 10 caractères\",\r\n-    }),\r\n+    .min(10, \"Veuillez décrire votre besoin en au moins 10 caractères\"),\r\n });\r\n \r\n-type FormValues = z.infer<typeof formSchema>;\r\n+type FormValues = yup.InferType<typeof formSchema>;\r\n \r\n const DemandeDevis = () => {\r\n   const {\r\n     control,\r\n     handleSubmit,\r\n     reset,\r\n     formState: { isSubmitting, errors },\r\n   } = useForm<FormValues>({\r\n-    resolver: zodResolver(formSchema),\r\n+    resolver: yupResolver(formSchema),\r\n     defaultValues: {\r\n       firstName: \"\",\r\n       lastName: \"\",\r\n       email: \"\",\r\n@@ -94,104 +91,51 @@\n         Demande de devis\r\n       </Text>\r\n \r\n       {/* Prénom */}\r\n-      <Controller\r\n+      <FormInput\r\n         control={control}\r\n         name=\"firstName\"\r\n-        render={({ field: { onChange, value } }) => (\r\n-          <View style={{ marginBottom: 12 }}>\r\n-            <Text>Prénom</Text>\r\n-            <TextInput\r\n-              placeholder=\"Votre prénom\"\r\n-              value={value}\r\n-              onChangeText={onChange}\r\n-              style={{ borderWidth: 1, padding: 8, borderRadius: 8 }}\r\n-            />\r\n-            {errors.firstName && (\r\n-              <Text style={{ color: \"red\" }}>{errors.firstName.message}</Text>\r\n-            )}\r\n-          </View>\r\n-        )}\r\n+        placeholder=\"Votre prénom\"\r\n+        label=\"Prénom\"\r\n+        error={errors.firstName?.message}\r\n       />\r\n \r\n       {/* Nom */}\r\n-      <Controller\r\n+      <FormInput\r\n         control={control}\r\n         name=\"lastName\"\r\n-        render={({ field: { onChange, value } }) => (\r\n-          <View style={{ marginBottom: 12 }}>\r\n-            <Text>Nom</Text>\r\n-            <TextInput\r\n-              placeholder=\"Votre nom\"\r\n-              value={value}\r\n-              onChangeText={onChange}\r\n-              style={{ borderWidth: 1, padding: 8, borderRadius: 8 }}\r\n-            />\r\n-            {errors.lastName && (\r\n-              <Text style={{ color: \"red\" }}>{errors.lastName.message}</Text>\r\n-            )}\r\n-          </View>\r\n-        )}\r\n+        placeholder=\"Votre nom\"\r\n+        label=\"Nom\"\r\n+        error={errors.lastName?.message}\r\n       />\r\n \r\n       {/* Email */}\r\n-      <Controller\r\n+      <FormInput\r\n         control={control}\r\n         name=\"email\"\r\n-        render={({ field: { onChange, value } }) => (\r\n-          <View style={{ marginBottom: 12 }}>\r\n-            <Text>Email</Text>\r\n-            <TextInput\r\n-              placeholder=\"votre@email.com\"\r\n-              value={value}\r\n-              onChangeText={onChange}\r\n-              keyboardType=\"email-address\"\r\n-              style={{ borderWidth: 1, padding: 8, borderRadius: 8 }}\r\n-            />\r\n-            {errors.email && (\r\n-              <Text style={{ color: \"red\" }}>{errors.email.message}</Text>\r\n-            )}\r\n-          </View>\r\n-        )}\r\n+        placeholder=\"votre@email.com\"\r\n+        label=\"Email\"\r\n+        keyboardType=\"email-address\"\r\n+        error={errors.email?.message}\r\n       />\r\n \r\n       {/* Téléphone */}\r\n-      <Controller\r\n+      <FormInput\r\n         control={control}\r\n         name=\"phone\"\r\n-        render={({ field: { onChange, value } }) => (\r\n-          <View style={{ marginBottom: 12 }}>\r\n-            <Text>Téléphone</Text>\r\n-            <TextInput\r\n-              placeholder=\"Votre numéro de téléphone\"\r\n-              value={value}\r\n-              onChangeText={onChange}\r\n-              keyboardType=\"phone-pad\"\r\n-              style={{ borderWidth: 1, padding: 8, borderRadius: 8 }}\r\n-            />\r\n-            {errors.phone && (\r\n-              <Text style={{ color: \"red\" }}>{errors.phone.message}</Text>\r\n-            )}\r\n-          </View>\r\n-        )}\r\n+        placeholder=\"Votre numéro de téléphone\"\r\n+        label=\"Téléphone\"\r\n+        keyboardType=\"phone-pad\"\r\n+        error={errors.phone?.message}\r\n       />\r\n \r\n       {/* Entreprise */}\r\n-      <Controller\r\n+      <FormInput\r\n         control={control}\r\n         name=\"company\"\r\n-        render={({ field: { onChange, value } }) => (\r\n-          <View style={{ marginBottom: 12 }}>\r\n-            <Text>Entreprise (optionnel)</Text>\r\n-            <TextInput\r\n-              placeholder=\"Nom de votre entreprise\"\r\n-              value={value}\r\n-              onChangeText={onChange}\r\n-              style={{ borderWidth: 1, padding: 8, borderRadius: 8 }}\r\n-            />\r\n-          </View>\r\n-        )}\r\n+        placeholder=\"Nom de votre entreprise\"\r\n+        label=\"Entreprise (optionnel)\"\r\n       />\r\n \r\n       {/* Type de service */}\r\n       <Controller\r\n@@ -201,9 +145,9 @@\n           <View style={{ marginBottom: 12 }}>\r\n             <Text>Type de service</Text>\r\n             <Picker\r\n               selectedValue={value}\r\n-              onValueChange={(val) => onChange(val)}\r\n+              onValueChange={onChange}\r\n               style={{ borderWidth: 1, borderRadius: 8 }}\r\n             >\r\n               <Picker.Item label=\"Sélectionnez un service\" value=\"\" />\r\n               <Picker.Item label=\"Domiciliation\" value=\"domiciliation\" />\r\n@@ -214,30 +158,21 @@\n               />\r\n               <Picker.Item label=\"Autre\" value=\"autre\" />\r\n             </Picker>\r\n             {errors.serviceType && (\r\n-              <Text style={{ color: \"red\" }}>{errors.serviceType.message}</Text>\r\n+              <Text style={{ color: \"red\" }}>{errors.serviceType}</Text>\r\n             )}\r\n           </View>\r\n         )}\r\n       />\r\n \r\n       {/* Budget */}\r\n-      <Controller\r\n+      <FormInput\r\n         control={control}\r\n         name=\"budget\"\r\n-        render={({ field: { onChange, value } }) => (\r\n-          <View style={{ marginBottom: 12 }}>\r\n-            <Text>Budget approximatif (optionnel)</Text>\r\n-            <TextInput\r\n-              placeholder=\"Votre budget en €\"\r\n-              value={value}\r\n-              onChangeText={onChange}\r\n-              keyboardType=\"numeric\"\r\n-              style={{ borderWidth: 1, padding: 8, borderRadius: 8 }}\r\n-            />\r\n-          </View>\r\n-        )}\r\n+        placeholder=\"Votre budget en €\"\r\n+        label=\"Budget approximatif (optionnel)\"\r\n+        keyboardType=\"numeric\"\r\n       />\r\n \r\n       {/* Message */}\r\n       <Controller\r\n@@ -260,9 +195,9 @@\n                 textAlignVertical: \"top\",\r\n               }}\r\n             />\r\n             {errors.message && (\r\n-              <Text style={{ color: \"red\" }}>{errors.message.message}</Text>\r\n+              <Text style={{ color: \"red\" }}>{errors.message}</Text>\r\n             )}\r\n           </View>\r\n         )}\r\n       />\r\n@@ -276,5 +211,32 @@\n     </ScrollView>\r\n   );\r\n };\r\n \r\n+const FormInput = ({\r\n+  control,\r\n+  name,\r\n+  placeholder,\r\n+  label,\r\n+  keyboardType,\r\n+  error,\r\n+}) => (\r\n+  <Controller\r\n+    control={control}\r\n+    name={name}\r\n+    render={({ field: { onChange, value } }) => (\r\n+      <View style={{ marginBottom: 12 }}>\r\n+        <Text>{label}</Text>\r\n+        <TextInput\r\n+          placeholder={placeholder}\r\n+          value={value}\r\n+          onChangeText={onChange}\r\n+          keyboardType={keyboardType}\r\n+          style={{ borderWidth: 1, padding: 8, borderRadius: 8 }}\r\n+        />\r\n+        {error && <Text style={{ color: \"red\" }}>{error}</Text>}\r\n+      </View>\r\n+    )}\r\n+  />\r\n+);\r\n+\r\n export default DemandeDevis;\r\n"
                },
                {
                    "date": 1752955187420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,27 +4,41 @@\n import { Controller, useForm } from \"react-hook-form\";\r\n import { Alert, Button, ScrollView, Text, TextInput, View } from \"react-native\";\r\n import * as yup from \"yup\";\r\n \r\n-// Schéma de validation (yup fonctionne mieux avec React Native que zod)\r\n-const formSchema = yup.object().shape({\r\n+// Schéma de validation\r\n+const formSchema = yup.object({\r\n   firstName: yup\r\n     .string()\r\n-    .min(2, \"Le prénom doit contenir au moins 2 caractères\"),\r\n-  lastName: yup.string().min(2, \"Le nom doit contenir au moins 2 caractères\"),\r\n-  email: yup.string().email(\"Adresse email invalide\"),\r\n-  phone: yup.string().min(10, \"Numéro de téléphone invalide\"),\r\n+    .min(2, \"Le prénom doit contenir au moins 2 caractères\")\r\n+    .required(),\r\n+  lastName: yup\r\n+    .string()\r\n+    .min(2, \"Le nom doit contenir au moins 2 caractères\")\r\n+    .required(),\r\n+  email: yup.string().email(\"Adresse email invalide\").required(),\r\n+  phone: yup.string().min(10, \"Numéro de téléphone invalide\").required(),\r\n   company: yup.string(),\r\n   serviceType: yup\r\n     .string()\r\n     .required(\"Veuillez sélectionner un type de service\"),\r\n   budget: yup.string(),\r\n   message: yup\r\n     .string()\r\n-    .min(10, \"Veuillez décrire votre besoin en au moins 10 caractères\"),\r\n+    .min(10, \"Veuillez décrire votre besoin en au moins 10 caractères\")\r\n+    .required(),\r\n });\r\n \r\n-type FormValues = yup.InferType<typeof formSchema>;\r\n+type FormValues = {\r\n+  firstName: string;\r\n+  lastName: string;\r\n+  email: string;\r\n+  phone: string;\r\n+  company: string;\r\n+  serviceType: string;\r\n+  budget: string;\r\n+  message: string;\r\n+};\r\n \r\n const DemandeDevis = () => {\r\n   const {\r\n     control,\r\n@@ -157,10 +171,10 @@\n                 value=\"administratif\"\r\n               />\r\n               <Picker.Item label=\"Autre\" value=\"autre\" />\r\n             </Picker>\r\n-            {errors.serviceType && (\r\n-              <Text style={{ color: \"red\" }}>{errors.serviceType}</Text>\r\n+            {errors.serviceType?.message && (\r\n+              <Text style={{ color: \"red\" }}>{errors.serviceType.message}</Text>\r\n             )}\r\n           </View>\r\n         )}\r\n       />\r\n@@ -194,10 +208,10 @@\n                 minHeight: 100,\r\n                 textAlignVertical: \"top\",\r\n               }}\r\n             />\r\n-            {errors.message && (\r\n-              <Text style={{ color: \"red\" }}>{errors.message}</Text>\r\n+            {errors.message?.message && (\r\n+              <Text style={{ color: \"red\" }}>{errors.message.message}</Text>\r\n             )}\r\n           </View>\r\n         )}\r\n       />\r\n@@ -216,10 +230,17 @@\n   control,\r\n   name,\r\n   placeholder,\r\n   label,\r\n-  keyboardType,\r\n+  keyboardType = \"default\",\r\n   error,\r\n+}: {\r\n+  control: any;\r\n+  name: any;\r\n+  placeholder: string;\r\n+  label: string;\r\n+  keyboardType?: \"default\" | \"email-address\" | \"phone-pad\" | \"numeric\";\r\n+  error?: string;\r\n }) => (\r\n   <Controller\r\n     control={control}\r\n     name={name}\r\n"
                },
                {
                    "date": 1752955295931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,11 @@\n   firstName: string;\r\n   lastName: string;\r\n   email: string;\r\n   phone: string;\r\n-  company: string;\r\n+  company?: string;\r\n   serviceType: string;\r\n-  budget: string;\r\n+  budget?: string;\r\n   message: string;\r\n };\r\n \r\n const DemandeDevis = () => {\r\n"
                },
                {
                    "date": 1752955353150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,27 +6,16 @@\n import * as yup from \"yup\";\r\n \r\n // Schéma de validation\r\n const formSchema = yup.object({\r\n-  firstName: yup\r\n-    .string()\r\n-    .min(2, \"Le prénom doit contenir au moins 2 caractères\")\r\n-    .required(),\r\n-  lastName: yup\r\n-    .string()\r\n-    .min(2, \"Le nom doit contenir au moins 2 caractères\")\r\n-    .required(),\r\n-  email: yup.string().email(\"Adresse email invalide\").required(),\r\n-  phone: yup.string().min(10, \"Numéro de téléphone invalide\").required(),\r\n-  company: yup.string(),\r\n-  serviceType: yup\r\n-    .string()\r\n-    .required(\"Veuillez sélectionner un type de service\"),\r\n-  budget: yup.string(),\r\n-  message: yup\r\n-    .string()\r\n-    .min(10, \"Veuillez décrire votre besoin en au moins 10 caractères\")\r\n-    .required(),\r\n+  firstName: yup.string().min(2, \"...\").required(),\r\n+  lastName: yup.string().min(2, \"...\").required(),\r\n+  email: yup.string().email(\"...\").required(),\r\n+  phone: yup.string().min(10, \"...\").required(),\r\n+  company: yup.string().default(\"\"),\r\n+  serviceType: yup.string().required(\"...\"),\r\n+  budget: yup.string().default(\"\"),\r\n+  message: yup.string().min(10, \"...\").required(),\r\n });\r\n \r\n type FormValues = {\r\n   firstName: string;\r\n"
                },
                {
                    "date": 1752955512045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   firstName: string;\r\n   lastName: string;\r\n   email: string;\r\n   phone: string;\r\n-  company?: string;\r\n+  company: string;\r\n   serviceType: string;\r\n   budget?: string;\r\n   message: string;\r\n };\r\n"
                },
                {
                    "date": 1752955550059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   email: string;\r\n   phone: string;\r\n   company: string;\r\n   serviceType: string;\r\n-  budget?: string;\r\n+  budget: string;\r\n   message: string;\r\n };\r\n \r\n const DemandeDevis = () => {\r\n"
                },
                {
                    "date": 1753018839708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,13 @@\n+import Footer from \"@/src/components/Footer\";\r\n import { yupResolver } from \"@hookform/resolvers/yup\";\r\n import { Picker } from \"@react-native-picker/picker\";\r\n import React from \"react\";\r\n import { Controller, useForm } from \"react-hook-form\";\r\n import { Alert, Button, ScrollView, Text, TextInput, View } from \"react-native\";\r\n import * as yup from \"yup\";\r\n+import { StyleSheet } from \"react-native\";\r\n+import Navbar from \"@/src/components/Navbar\";\r\n \r\n // Schéma de validation\r\n const formSchema = yup.object({\r\n   firstName: yup.string().min(2, \"...\").required(),\r\n@@ -81,9 +84,14 @@\n     }\r\n   };\r\n \r\n   return (\r\n-    <ScrollView contentContainerStyle={{ padding: 20 }}>\r\n+    <View style={{ flex: 1, backgroundColor: \"#f9fafb\" }}>\r\n+      <Navbar />\r\n+      <ScrollView\r\n+        style={styles.container}\r\n+        contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n+      >\r\n       <Text\r\n         style={{\r\n           fontSize: 28,\r\n           fontWeight: \"bold\",\r\n@@ -210,9 +218,11 @@\n         title={isSubmitting ? \"Envoi en cours...\" : \"Demander un devis\"}\r\n         onPress={handleSubmit(onSubmit)}\r\n         disabled={isSubmitting}\r\n       />\r\n+      <Footer />\r\n     </ScrollView>\r\n+    </View>\r\n   );\r\n };\r\n \r\n const FormInput = ({\r\n@@ -248,5 +258,10 @@\n     )}\r\n   />\r\n );\r\n \r\n+const styles = StyleSheet.create({\r\n+  container: {\r\n+    flex: 1,\r\n+  },\r\n+});\r\n export default DemandeDevis;\r\n"
                },
                {
                    "date": 1753019699035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import Footer from \"@/src/components/Footer\";\r\n-import Navbar from \"@/src/components/Navbar\";\r\n import { yupResolver } from \"@hookform/resolvers/yup\";\r\n import { Picker } from \"@react-native-picker/picker\";\r\n import React from \"react\";\r\n import { Controller, useForm } from \"react-hook-form\";\r\n@@ -92,9 +91,8 @@\n   };\r\n \r\n   return (\r\n     <View style={{ flex: 1, backgroundColor: \"#f9fafb\" }}>\r\n-      <Navbar />\r\n       <ScrollView\r\n         style={styles.container}\r\n         contentContainerStyle={{ flexGrow: 1, justifyContent: \"space-between\" }}\r\n       >\r\n"
                },
                {
                    "date": 1753023410543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,10 +265,78 @@\n     )}\r\n   />\r\n );\r\n \r\n+\r\n const styles = StyleSheet.create({\r\n   container: {\r\n-    flex: 1,\r\n+        flex: 1,\r\n+\r\n   },\r\n+  title: {\r\n+    fontSize: 26,\r\n+    fontWeight: 'bold',\r\n+    textAlign: 'center',\r\n+    color: '#0f172a',\r\n+    marginBottom: 24,\r\n+  },\r\n+  fieldContainer: {\r\n+    marginBottom: 16,\r\n+  },\r\n+  label: {\r\n+    fontSize: 14,\r\n+    fontWeight: '600',\r\n+    color: '#0f172a',\r\n+    marginBottom: 4,\r\n+  },\r\n+  input: {\r\n+    backgroundColor: '#fff',\r\n+    borderColor: '#d1d5db',\r\n+    borderWidth: 1,\r\n+    borderRadius: 8,\r\n+    paddingVertical: 10,\r\n+    paddingHorizontal: 12,\r\n+    fontSize: 14,\r\n+    color: '#0f172a',\r\n+  },\r\n+  picker: {\r\n+    backgroundColor: '#fff',\r\n+    borderColor: '#d1d5db',\r\n+    borderWidth: 1,\r\n+    borderRadius: 8,\r\n+  },\r\n+  errorText: {\r\n+    color: '#f9429e',\r\n+    fontSize: 12,\r\n+    marginTop: 4,\r\n+  },\r\n+  textArea: {\r\n+    backgroundColor: '#fff',\r\n+    borderColor: '#d1d5db',\r\n+    borderWidth: 1,\r\n+    borderRadius: 8,\r\n+    padding: 12,\r\n+    fontSize: 14,\r\n+    color: '#0f172a',\r\n+    minHeight: 100,\r\n+    textAlignVertical: 'top',\r\n+  },\r\n+  submitButton: {\r\n+    backgroundColor: '#5cb9bc',\r\n+    paddingVertical: 14,\r\n+    borderRadius: 30,\r\n+    alignItems: 'center',\r\n+    marginTop: 20,\r\n+    shadowColor: '#000',\r\n+    shadowOffset: { width: 0, height: 2 },\r\n+    shadowOpacity: 0.1,\r\n+    shadowRadius: 4,\r\n+    elevation: 3,\r\n+  },\r\n+  submitButtonText: {\r\n+    color: '#fff',\r\n+    fontSize: 16,\r\n+    fontWeight: '600',\r\n+  },\r\n });\r\n+\r\n export default DemandeDevis;\r\n"
                }
            ],
            "date": 1752954468895,
            "name": "Commit-0",
            "content": "import { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { Picker } from \"@react-native-picker/picker\";\r\nimport React from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { Alert, Button, ScrollView, Text, TextInput, View } from \"react-native\";\r\nimport { z } from \"zod\";\r\n\r\nconst formSchema = z.object({\r\n  firstName: z\r\n    .string()\r\n    .min(2, { message: \"Le prénom doit contenir au moins 2 caractères\" }),\r\n  lastName: z\r\n    .string()\r\n    .min(2, { message: \"Le nom doit contenir au moins 2 caractères\" }),\r\n  email: z.string().email({ message: \"Adresse email invalide\" }),\r\n  phone: z.string().min(10, { message: \"Numéro de téléphone invalide\" }),\r\n  company: z.string().optional(),\r\n  serviceType: z\r\n    .string()\r\n    .min(1, { message: \"Veuillez sélectionner un type de service\" }),\r\n  budget: z.string().optional(),\r\n  message: z\r\n    .string()\r\n    .min(10, {\r\n      message: \"Veuillez décrire votre besoin en au moins 10 caractères\",\r\n    }),\r\n});\r\n\r\ntype FormValues = z.infer<typeof formSchema>;\r\n\r\nconst DemandeDevis = () => {\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { isSubmitting, errors },\r\n  } = useForm<FormValues>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      company: \"\",\r\n      serviceType: \"\",\r\n      budget: \"\",\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = async (data: FormValues) => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://mon-backend-node.vercel.app/api/send-contact\",\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(data),\r\n        }\r\n      );\r\n      const result = await response.json();\r\n\r\n      if (result.status === \"success\") {\r\n        Alert.alert(\r\n          \"Demande envoyée\",\r\n          \"Votre demande de devis a été envoyée avec succès. Nous vous contacterons bientôt.\"\r\n        );\r\n        reset();\r\n      } else {\r\n        Alert.alert(\r\n          \"Erreur\",\r\n          \"Une erreur est survenue lors de l'envoi. Veuillez réessayer plus tard.\"\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erreur:\", error);\r\n      Alert.alert(\r\n        \"Erreur de connexion\",\r\n        \"Impossible de se connecter au serveur. Veuillez vérifier votre connexion.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ScrollView contentContainerStyle={{ padding: 20 }}>\r\n      <Text\r\n        style={{\r\n          fontSize: 28,\r\n          fontWeight: \"bold\",\r\n          marginBottom: 20,\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        Demande de devis\r\n      </Text>\r\n\r\n      {/* Prénom */}\r\n      <Controller\r\n        control={control}\r\n        name=\"firstName\"\r\n        render={({ field: { onChange, value } }) => (\r\n          <View style={{ marginBottom: 12 }}>\r\n            <Text>Prénom</Text>\r\n            <TextInput\r\n              placeholder=\"Votre prénom\"\r\n              value={value}\r\n              onChangeText={onChange}\r\n              style={{ borderWidth: 1, padding: 8, borderRadius: 8 }}\r\n            />\r\n            {errors.firstName && (\r\n              <Text style={{ color: \"red\" }}>{errors.firstName.message}</Text>\r\n            )}\r\n          </View>\r\n        )}\r\n      />\r\n\r\n      {/* Nom */}\r\n      <Controller\r\n        control={control}\r\n        name=\"lastName\"\r\n        render={({ field: { onChange, value } }) => (\r\n          <View style={{ marginBottom: 12 }}>\r\n            <Text>Nom</Text>\r\n            <TextInput\r\n              placeholder=\"Votre nom\"\r\n              value={value}\r\n              onChangeText={onChange}\r\n              style={{ borderWidth: 1, padding: 8, borderRadius: 8 }}\r\n            />\r\n            {errors.lastName && (\r\n              <Text style={{ color: \"red\" }}>{errors.lastName.message}</Text>\r\n            )}\r\n          </View>\r\n        )}\r\n      />\r\n\r\n      {/* Email */}\r\n      <Controller\r\n        control={control}\r\n        name=\"email\"\r\n        render={({ field: { onChange, value } }) => (\r\n          <View style={{ marginBottom: 12 }}>\r\n            <Text>Email</Text>\r\n            <TextInput\r\n              placeholder=\"votre@email.com\"\r\n              value={value}\r\n              onChangeText={onChange}\r\n              keyboardType=\"email-address\"\r\n              style={{ borderWidth: 1, padding: 8, borderRadius: 8 }}\r\n            />\r\n            {errors.email && (\r\n              <Text style={{ color: \"red\" }}>{errors.email.message}</Text>\r\n            )}\r\n          </View>\r\n        )}\r\n      />\r\n\r\n      {/* Téléphone */}\r\n      <Controller\r\n        control={control}\r\n        name=\"phone\"\r\n        render={({ field: { onChange, value } }) => (\r\n          <View style={{ marginBottom: 12 }}>\r\n            <Text>Téléphone</Text>\r\n            <TextInput\r\n              placeholder=\"Votre numéro de téléphone\"\r\n              value={value}\r\n              onChangeText={onChange}\r\n              keyboardType=\"phone-pad\"\r\n              style={{ borderWidth: 1, padding: 8, borderRadius: 8 }}\r\n            />\r\n            {errors.phone && (\r\n              <Text style={{ color: \"red\" }}>{errors.phone.message}</Text>\r\n            )}\r\n          </View>\r\n        )}\r\n      />\r\n\r\n      {/* Entreprise */}\r\n      <Controller\r\n        control={control}\r\n        name=\"company\"\r\n        render={({ field: { onChange, value } }) => (\r\n          <View style={{ marginBottom: 12 }}>\r\n            <Text>Entreprise (optionnel)</Text>\r\n            <TextInput\r\n              placeholder=\"Nom de votre entreprise\"\r\n              value={value}\r\n              onChangeText={onChange}\r\n              style={{ borderWidth: 1, padding: 8, borderRadius: 8 }}\r\n            />\r\n          </View>\r\n        )}\r\n      />\r\n\r\n      {/* Type de service */}\r\n      <Controller\r\n        control={control}\r\n        name=\"serviceType\"\r\n        render={({ field: { onChange, value } }) => (\r\n          <View style={{ marginBottom: 12 }}>\r\n            <Text>Type de service</Text>\r\n            <Picker\r\n              selectedValue={value}\r\n              onValueChange={(val) => onChange(val)}\r\n              style={{ borderWidth: 1, borderRadius: 8 }}\r\n            >\r\n              <Picker.Item label=\"Sélectionnez un service\" value=\"\" />\r\n              <Picker.Item label=\"Domiciliation\" value=\"domiciliation\" />\r\n              <Picker.Item label=\"Communication\" value=\"communication\" />\r\n              <Picker.Item\r\n                label=\"Services administratifs\"\r\n                value=\"administratif\"\r\n              />\r\n              <Picker.Item label=\"Autre\" value=\"autre\" />\r\n            </Picker>\r\n            {errors.serviceType && (\r\n              <Text style={{ color: \"red\" }}>{errors.serviceType.message}</Text>\r\n            )}\r\n          </View>\r\n        )}\r\n      />\r\n\r\n      {/* Budget */}\r\n      <Controller\r\n        control={control}\r\n        name=\"budget\"\r\n        render={({ field: { onChange, value } }) => (\r\n          <View style={{ marginBottom: 12 }}>\r\n            <Text>Budget approximatif (optionnel)</Text>\r\n            <TextInput\r\n              placeholder=\"Votre budget en €\"\r\n              value={value}\r\n              onChangeText={onChange}\r\n              keyboardType=\"numeric\"\r\n              style={{ borderWidth: 1, padding: 8, borderRadius: 8 }}\r\n            />\r\n          </View>\r\n        )}\r\n      />\r\n\r\n      {/* Message */}\r\n      <Controller\r\n        control={control}\r\n        name=\"message\"\r\n        render={({ field: { onChange, value } }) => (\r\n          <View style={{ marginBottom: 12 }}>\r\n            <Text>Description de votre projet</Text>\r\n            <TextInput\r\n              placeholder=\"Décrivez votre besoin en détail...\"\r\n              value={value}\r\n              onChangeText={onChange}\r\n              multiline\r\n              numberOfLines={5}\r\n              style={{\r\n                borderWidth: 1,\r\n                padding: 8,\r\n                borderRadius: 8,\r\n                minHeight: 100,\r\n                textAlignVertical: \"top\",\r\n              }}\r\n            />\r\n            {errors.message && (\r\n              <Text style={{ color: \"red\" }}>{errors.message.message}</Text>\r\n            )}\r\n          </View>\r\n        )}\r\n      />\r\n\r\n      {/* Bouton envoyer */}\r\n      <Button\r\n        title={isSubmitting ? \"Envoi en cours...\" : \"Demander un devis\"}\r\n        onPress={handleSubmit(onSubmit)}\r\n        disabled={isSubmitting}\r\n      />\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nexport default DemandeDevis;\r\n"
        }
    ]
}