{
    "sourceFile": "src/components/cart/CartContext.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752866349843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752866349843,
            "name": "Commit-0",
            "content": "import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\n\r\nexport interface CartItem {\r\n  id: string;\r\n  title: string;\r\n  price: number;\r\n  quantity: number;\r\n}\r\n\r\ninterface CartContextType {\r\n  items: CartItem[];\r\n  total: number;\r\n  subtotal: number;\r\n  tax: number;\r\n  addItem: (item: CartItem) => void;\r\n  removeItem: (id: string) => void;\r\n  updateQuantity: (id: string, quantity: number) => void;\r\n  clearCart: () => void;\r\n}\r\n\r\nconst CartContext = createContext<CartContextType | undefined>(undefined);\r\n\r\nexport const CartProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const [items, setItems] = useState<CartItem[]>([]);\r\n\r\n  // Charger le panier au lancement\r\n  useEffect(() => {\r\n    const loadCart = async () => {\r\n      try {\r\n        const saved = await AsyncStorage.getItem(\"lysco-cart\");\r\n        if (saved) {\r\n          setItems(JSON.parse(saved));\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Erreur de chargement du panier:\", error);\r\n      }\r\n    };\r\n    loadCart();\r\n  }, []);\r\n\r\n  // Sauvegarder le panier Ã  chaque modification\r\n  useEffect(() => {\r\n    const saveCart = async () => {\r\n      try {\r\n        await AsyncStorage.setItem(\"lysco-cart\", JSON.stringify(items));\r\n      } catch (error) {\r\n        console.error(\"Erreur de sauvegarde du panier:\", error);\r\n      }\r\n    };\r\n    saveCart();\r\n  }, [items]);\r\n\r\n  const addItem = (item: CartItem) => {\r\n    setItems((prev) => {\r\n      const existing = prev.find((i) => i.id === item.id);\r\n      if (existing) {\r\n        return prev.map((i) =>\r\n          i.id === item.id ? { ...i, quantity: i.quantity + item.quantity } : i\r\n        );\r\n      } else {\r\n        return [...prev, item];\r\n      }\r\n    });\r\n  };\r\n\r\n  const removeItem = (id: string) => {\r\n    setItems((prev) => prev.filter((item) => item.id !== id));\r\n  };\r\n\r\n  const updateQuantity = (id: string, quantity: number) => {\r\n    if (quantity <= 0) {\r\n      removeItem(id);\r\n    } else {\r\n      setItems((prev) =>\r\n        prev.map((item) => (item.id === id ? { ...item, quantity } : item))\r\n      );\r\n    }\r\n  };\r\n\r\n  const clearCart = async () => {\r\n    setItems([]);\r\n    try {\r\n      await AsyncStorage.removeItem(\"lysco-cart\");\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la suppression du panier:\", error);\r\n    }\r\n  };\r\n\r\n  const subtotal = items.reduce(\r\n    (acc, item) => acc + item.price * item.quantity,\r\n    0\r\n  );\r\n  const tax = subtotal * 0.2;\r\n  const total = subtotal + tax;\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        items,\r\n        addItem,\r\n        removeItem,\r\n        updateQuantity,\r\n        clearCart,\r\n        total,\r\n        subtotal,\r\n        tax,\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) throw new Error(\"useCart must be used within a CartProvider\");\r\n  return context;\r\n};\r\n"
        }
    ]
}