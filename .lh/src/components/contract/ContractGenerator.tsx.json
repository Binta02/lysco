{
    "sourceFile": "src/components/contract/ContractGenerator.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1752956400988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752956463423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n }) => {\r\n   const handleDownload = async () => {\r\n     try {\r\n       const response = await fetch(\r\n-        \"https://your-vercel-domain.vercel.app/api/generate-contract\",\r\n+        \"https://mon-backend-node.vercel.app/api/generate-contract\",\r\n         {\r\n           method: \"POST\",\r\n           headers: { \"Content-Type\": \"application/json\" },\r\n           body: JSON.stringify({\r\n"
                },
                {
                    "date": 1753177846784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,75 +1,125 @@\n // /components/ContractGenerator.tsx\r\n \r\n-import * as FileSystem from 'expo-file-system';\r\n-import * as Sharing from 'expo-sharing';\r\n-import React from 'react';\r\n-import { Alert, Button } from 'react-native';\r\n+import React from \"react\";\r\n+import { Button, View, Alert } from \"react-native\";\r\n+import * as Print from \"expo-print\";\r\n+import * as Sharing from \"expo-sharing\";\r\n \r\n-interface ContractGeneratorProps {\r\n-  clientInfo: {\r\n-    firstName: string;\r\n-    lastName: string;\r\n-    companyName: string;\r\n-    businessActivity: string;\r\n-    siretNumber: string;\r\n-    address: string;\r\n-    city: string;\r\n-    postalCode: string;\r\n-  };\r\n-  planDetails: {\r\n-    name: string;\r\n-    price: number;\r\n-  };\r\n-}\r\n+const ContractGenerator = ({ data }) => {\r\n+  const today = new Date().toLocaleDateString(\"fr-FR\");\r\n \r\n-const ContractGenerator: React.FC<ContractGeneratorProps> = ({\r\n-  clientInfo,\r\n-  planDetails,\r\n-}) => {\r\n-  const handleDownload = async () => {\r\n-    try {\r\n-      const response = await fetch(\r\n-        'https://mon-backend-node.vercel.app/api/generate-contract',\r\n-        {\r\n-          method: 'POST',\r\n-          headers: { 'Content-Type': 'application/json' },\r\n-          body: JSON.stringify({\r\n-            companyName: clientInfo.companyName,\r\n-            fullName: `${clientInfo.firstName} ${clientInfo.lastName}`,\r\n-            address: clientInfo.address,\r\n-            city: clientInfo.city,\r\n-            postalCode: clientInfo.postalCode,\r\n-            siretNumber: clientInfo.siretNumber,\r\n-            businessActivity: clientInfo.businessActivity,\r\n-            planPrice: planDetails.price,\r\n-            planName: planDetails.name,\r\n-            date: new Date().toLocaleDateString('fr-FR'),\r\n-          }),\r\n-        }\r\n-      );\r\n+  const generateContractHtml = () => `\r\n+    <html>\r\n+      <head>\r\n+        <meta charset=\"UTF-8\">\r\n+        <style>\r\n+          body { font-family: Arial, sans-serif; padding: 20px; color: #333; }\r\n+          h1, h2 { text-align: center; }\r\n+          .section { margin-bottom: 20px; }\r\n+          .bold { font-weight: bold; }\r\n+          .card { border: 1px solid #ccc; padding: 15px; margin-bottom: 15px; border-radius: 5px; }\r\n+          .small { font-size: 12px; color: #666; }\r\n+        </style>\r\n+      </head>\r\n+      <body>\r\n+        <h1>Contrat de Domiciliation Commerciale</h1>\r\n+        <div class=\"card\">\r\n+          <p><span class=\"bold\">Soci√©t√© :</span> Europe Domiciliation</p>\r\n+          <p><span class=\"bold\">Adresse :</span> 28 Rue de l‚Äô√âglise, 95170 Deuil-la-Barre</p>\r\n+          <p><span class=\"bold\">SIRET :</span> 804 180 792</p>\r\n+          <p><span class=\"bold\">Agr√©ment pr√©fectoral :</span> 04_95_2023</p>\r\n+          <p><span class=\"bold\">Repr√©sent√© par :</span> Barbara EZELIS, G√©rante</p>\r\n+        </div>\r\n \r\n-      if (!response.ok) {\r\n-        throw new Error('Erreur lors de la g√©n√©ration du contrat');\r\n-      }\r\n+        <div class=\"card\">\r\n+          <p><span class=\"bold\">Soci√©t√© cliente :</span> ${data.companyName}</p>\r\n+          <p><span class=\"bold\">Nom et Pr√©nom :</span> ${data.fullName}</p>\r\n+          <p><span class=\"bold\">Adresse :</span> ${data.address} ${data.addressDetails || \"\"}</p>\r\n+          <p><span class=\"bold\">Code postal / Ville :</span> ${data.postalCode} ${data.city}</p>\r\n+          <p><span class=\"bold\">SIRET :</span> ${data.siretNumber}</p>\r\n+          <p><span class=\"bold\">Activit√© :</span> ${data.businessActivity}</p>\r\n+        </div>\r\n \r\n-      const { base64 } = await response.json();\r\n-      const fileUri = FileSystem.cacheDirectory + 'contract.pdf';\r\n+        <div class=\"section\">\r\n+          <h2>Article 1 ‚Äì Objet du contrat</h2>\r\n+          <p>Permettre au Domicili√© d'√©tablir son si√®ge social √† l'adresse de Europe Domiciliation.</p>\r\n+        </div>\r\n \r\n-      await FileSystem.writeAsStringAsync(fileUri, base64, {\r\n-        encoding: FileSystem.EncodingType.Base64,\r\n-      });\r\n+        <div class=\"section\">\r\n+          <h2>Article 2 ‚Äì Obligations du Domicili√©</h2>\r\n+          <ul>\r\n+            <li>Utiliser l'adresse exclusivement pour son activit√© professionnelle.</li>\r\n+            <li>Communiquer tout changement administratif ou l√©gal.</li>\r\n+            <li>Fournir justificatifs : identit√©, domicile, statuts, etc.</li>\r\n+          </ul>\r\n+        </div>\r\n \r\n-      await Sharing.shareAsync(fileUri, {\r\n-        mimeType: 'application/pdf',\r\n-        dialogTitle: 'T√©l√©charger votre contrat',\r\n-      });\r\n+        <div class=\"section\">\r\n+          <h2>Article 3 ‚Äì Prestations de services</h2>\r\n+          <p>Domiciliation commerciale, r√©ception et r√©exp√©dition du courrier selon modalit√©s convenues.</p>\r\n+        </div>\r\n+\r\n+        <div class=\"section\">\r\n+          <h2>Article 4 ‚Äì Tarifs et paiement</h2>\r\n+          <p>Formule : <span class=\"bold\">${data.planName}</span> ‚Äì ${data.planPrice} ‚Ç¨/mois.</p>\r\n+          <p>Paiements par virement, esp√®ces ou carte.</p>\r\n+        </div>\r\n+\r\n+        <div class=\"section\">\r\n+          <h2>Article 5 ‚Äì Dur√©e et r√©siliation</h2>\r\n+          <p>Dur√©e : 6 mois √† compter du ${today}, renouvelable tacitement.</p>\r\n+          <p>R√©siliation possible avec pr√©avis de 15 jours.</p>\r\n+        </div>\r\n+\r\n+        <div class=\"section\">\r\n+          <h2>Signatures</h2>\r\n+          <table width=\"100%\">\r\n+            <tr>\r\n+              <td>\r\n+                <p class=\"bold\">Pour le Domicili√© :</p>\r\n+                <p>Nom : ${data.fullName}</p>\r\n+                <p>Signature : ________________________</p>\r\n+              </td>\r\n+              <td>\r\n+                <p class=\"bold\">Pour le Domiciliaire :</p>\r\n+                <p>Nom : Barbara EZELIS</p>\r\n+                <p>Fonction : G√©rante</p>\r\n+                <p>Signature : ________________________</p>\r\n+              </td>\r\n+            </tr>\r\n+          </table>\r\n+          <p class=\"small\">(Pr√©c√©d√©e de la mention ¬´ Lu et Approuv√© ¬ª)</p>\r\n+        </div>\r\n+\r\n+        <footer class=\"small\" style=\"text-align:center; margin-top:30px;\">\r\n+          28 Rue de l‚Äô√âglise, 95170 Deuil-la-Barre ‚Ä¢ lys-and-co.com ‚Ä¢ contact@lys-and-co.com\r\n+        </footer>\r\n+      </body>\r\n+    </html>\r\n+  `;\r\n+\r\n+  const handleGeneratePdf = async () => {\r\n+    try {\r\n+      const html = generateContractHtml();\r\n+\r\n+      const { uri } = await Print.printToFileAsync({ html, base64: false });\r\n+\r\n+      if (await Sharing.isAvailableAsync()) {\r\n+        await Sharing.shareAsync(uri);\r\n+      } else {\r\n+        Alert.alert(\"PDF g√©n√©r√©\", `Le fichier a √©t√© enregistr√© : ${uri}`);\r\n+      }\r\n     } catch (error) {\r\n-      Alert.alert('Erreur', 'Impossible de t√©l√©charger le contrat.');\r\n-      console.error(error);\r\n+      console.error(\"Erreur g√©n√©ration PDF :\", error);\r\n+      Alert.alert(\"Erreur\", \"La g√©n√©ration du contrat a √©chou√©.\");\r\n     }\r\n   };\r\n \r\n-  return <Button title=\"T√©l√©charger votre contrat\" onPress={handleDownload} />;\r\n+  return (\r\n+    <View style={{ margin: 20 }}>\r\n+      <Button title=\"üìÑ G√©n√©rer le contrat PDF\" onPress={handleGeneratePdf} />\r\n+    </View>\r\n+  );\r\n };\r\n \r\n export default ContractGenerator;\r\n"
                },
                {
                    "date": 1753178386583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,27 @@\n-// /components/ContractGenerator.tsx\r\n-\r\n import * as Print from \"expo-print\";\r\n import * as Sharing from \"expo-sharing\";\r\n import React from \"react\";\r\n import { Alert, Button, View } from \"react-native\";\r\n \r\n-const ContractGenerator = ({ data }) => {\r\n+type ContractData = {\r\n+  companyName?: string;\r\n+  fullName: string;\r\n+  address: string;\r\n+  addressDetails?: string;\r\n+  postalCode: string;\r\n+  city: string;\r\n+  siretNumber?: string;\r\n+  businessActivity?: string;\r\n+  planName: string;\r\n+  planPrice: number | string;\r\n+};\r\n+\r\n+type ContractGeneratorProps = {\r\n+  data: ContractData;\r\n+};\r\n+\r\n+const ContractGenerator: React.FC<ContractGeneratorProps> = ({ data }) => {\r\n   const today = new Date().toLocaleDateString(\"fr-FR\");\r\n \r\n   const generateContractHtml = () => `\r\n     <html>\r\n@@ -31,14 +46,14 @@\n           <p><span class=\"bold\">Repr√©sent√© par :</span> Barbara EZELIS, G√©rante</p>\r\n         </div>\r\n \r\n         <div class=\"card\">\r\n-          <p><span class=\"bold\">Soci√©t√© cliente :</span> ${data.companyName}</p>\r\n+          <p><span class=\"bold\">Soci√©t√© cliente :</span> ${data.companyName || \"N/A\"}</p>\r\n           <p><span class=\"bold\">Nom et Pr√©nom :</span> ${data.fullName}</p>\r\n           <p><span class=\"bold\">Adresse :</span> ${data.address} ${data.addressDetails || \"\"}</p>\r\n           <p><span class=\"bold\">Code postal / Ville :</span> ${data.postalCode} ${data.city}</p>\r\n-          <p><span class=\"bold\">SIRET :</span> ${data.siretNumber}</p>\r\n-          <p><span class=\"bold\">Activit√© :</span> ${data.businessActivity}</p>\r\n+          <p><span class=\"bold\">SIRET :</span> ${data.siretNumber || \"N/A\"}</p>\r\n+          <p><span class=\"bold\">Activit√© :</span> ${data.businessActivity || \"Non pr√©cis√©\"}</p>\r\n         </div>\r\n \r\n         <div class=\"section\">\r\n           <h2>Article 1 ‚Äì Objet du contrat</h2>\r\n"
                }
            ],
            "date": 1752956400985,
            "name": "Commit-0",
            "content": "// /components/ContractGenerator.tsx\r\n\r\nimport * as FileSystem from \"expo-file-system\";\r\nimport * as Sharing from \"expo-sharing\";\r\nimport React from \"react\";\r\nimport { Alert, Button } from \"react-native\";\r\n\r\ninterface ContractGeneratorProps {\r\n  clientInfo: {\r\n    firstName: string;\r\n    lastName: string;\r\n    companyName: string;\r\n    businessActivity: string;\r\n    siretNumber: string;\r\n    address: string;\r\n    city: string;\r\n    postalCode: string;\r\n  };\r\n  planDetails: {\r\n    name: string;\r\n    price: number;\r\n  };\r\n}\r\n\r\nconst ContractGenerator: React.FC<ContractGeneratorProps> = ({\r\n  clientInfo,\r\n  planDetails,\r\n}) => {\r\n  const handleDownload = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://your-vercel-domain.vercel.app/api/generate-contract\",\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            companyName: clientInfo.companyName,\r\n            fullName: `${clientInfo.firstName} ${clientInfo.lastName}`,\r\n            address: clientInfo.address,\r\n            city: clientInfo.city,\r\n            postalCode: clientInfo.postalCode,\r\n            siretNumber: clientInfo.siretNumber,\r\n            businessActivity: clientInfo.businessActivity,\r\n            planPrice: planDetails.price,\r\n            planName: planDetails.name,\r\n            date: new Date().toLocaleDateString(\"fr-FR\"),\r\n          }),\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Erreur lors de la g√©n√©ration du contrat\");\r\n      }\r\n\r\n      const blob = await response.blob();\r\n      const fileUri = FileSystem.cacheDirectory + \"contract.pdf\";\r\n      await FileSystem.writeAsStringAsync(fileUri, await blob.text(), {\r\n        encoding: FileSystem.EncodingType.Base64,\r\n      });\r\n\r\n      await Sharing.shareAsync(fileUri, {\r\n        mimeType: \"application/pdf\",\r\n        dialogTitle: \"T√©l√©charger votre contrat\",\r\n      });\r\n    } catch (error) {\r\n      Alert.alert(\"Erreur\", \"Impossible de t√©l√©charger le contrat.\");\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return <Button title=\"T√©l√©charger votre contrat\" onPress={handleDownload} />;\r\n};\r\n\r\nexport default ContractGenerator;\r\n"
        }
    ]
}