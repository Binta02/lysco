{
    "sourceFile": "src/components/dashboard/DomiciliationEditForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752743975889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752743987759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { UserDomiciliation } from \"@/hooks/useUserData\";\r\n+import { UserDomiciliation } from \"@/src/hooks/useUserData\";\r\n import React, { useState } from \"react\";\r\n import {\r\n   ActivityIndicator,\r\n   StyleSheet,\r\n"
                }
            ],
            "date": 1752743975889,
            "name": "Commit-0",
            "content": "import { UserDomiciliation } from \"@/hooks/useUserData\";\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  ActivityIndicator,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\n\r\ninterface DomiciliationEditFormProps {\r\n  domiciliation: UserDomiciliation | null;\r\n  onUpdate: (\r\n    updatedDomiciliation: Partial<UserDomiciliation>\r\n  ) => Promise<boolean>;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst DomiciliationEditForm: React.FC<DomiciliationEditFormProps> = ({\r\n  domiciliation,\r\n  onUpdate,\r\n  onCancel,\r\n}) => {\r\n  const [formData, setFormData] = useState({\r\n    address: domiciliation?.address || \"\",\r\n    renewal_date: domiciliation?.renewal_date\r\n      ? new Date(domiciliation.renewal_date).toISOString().split(\"T\")[0]\r\n      : new Date().toISOString().split(\"T\")[0],\r\n  });\r\n\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const handleChange = (name: string, value: string) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setIsSubmitting(true);\r\n    try {\r\n      const success = await onUpdate(formData);\r\n      if (success) {\r\n        onCancel();\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.card}>\r\n      <Text style={styles.title}>\r\n        Modifier les informations de domiciliation\r\n      </Text>\r\n\r\n      <View style={styles.field}>\r\n        <Text style={styles.label}>Adresse</Text>\r\n        <TextInput\r\n          style={styles.input}\r\n          value={formData.address}\r\n          onChangeText={(text) => handleChange(\"address\", text)}\r\n          placeholder=\"Entrez l'adresse\"\r\n        />\r\n      </View>\r\n\r\n      <View style={styles.field}>\r\n        <Text style={styles.label}>Date de renouvellement</Text>\r\n        <TextInput\r\n          style={styles.input}\r\n          value={formData.renewal_date}\r\n          onChangeText={(text) => handleChange(\"renewal_date\", text)}\r\n          placeholder=\"YYYY-MM-DD\"\r\n        />\r\n      </View>\r\n\r\n      <View style={styles.buttonRow}>\r\n        <TouchableOpacity\r\n          style={[styles.button, styles.outlineButton]}\r\n          onPress={onCancel}\r\n          disabled={isSubmitting}\r\n        >\r\n          <Text style={[styles.buttonText, styles.outlineButtonText]}>\r\n            Annuler\r\n          </Text>\r\n        </TouchableOpacity>\r\n\r\n        <TouchableOpacity\r\n          style={styles.button}\r\n          onPress={handleSubmit}\r\n          disabled={isSubmitting}\r\n        >\r\n          {isSubmitting ? (\r\n            <ActivityIndicator color=\"#fff\" />\r\n          ) : (\r\n            <Text style={styles.buttonText}>Enregistrer</Text>\r\n          )}\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  card: {\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: 8,\r\n    padding: 16,\r\n    elevation: 3,\r\n    marginVertical: 16,\r\n  },\r\n  title: {\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n    marginBottom: 16,\r\n  },\r\n  field: {\r\n    marginBottom: 12,\r\n  },\r\n  label: {\r\n    fontSize: 14,\r\n    color: \"#555\",\r\n    marginBottom: 4,\r\n  },\r\n  input: {\r\n    borderWidth: 1,\r\n    borderColor: \"#ddd\",\r\n    borderRadius: 6,\r\n    padding: 8,\r\n    fontSize: 16,\r\n  },\r\n  buttonRow: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-end\",\r\n    marginTop: 16,\r\n  },\r\n  button: {\r\n    backgroundColor: \"#4f46e5\", // Indigo\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 16,\r\n    borderRadius: 6,\r\n    marginLeft: 8,\r\n  },\r\n  outlineButton: {\r\n    backgroundColor: \"#fff\",\r\n    borderWidth: 1,\r\n    borderColor: \"#4f46e5\",\r\n  },\r\n  buttonText: {\r\n    color: \"#fff\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  outlineButtonText: {\r\n    color: \"#4f46e5\",\r\n  },\r\n});\r\n\r\nexport default DomiciliationEditForm;\r\n"
        }
    ]
}