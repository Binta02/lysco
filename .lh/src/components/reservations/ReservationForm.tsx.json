{
    "sourceFile": "src/components/reservations/ReservationForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1753126584088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753127309251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,10 @@\n   const [disabledDates, setDisabledDates] = useState<string[]>([]);\r\n   const [availablePeriods, setAvailablePeriods] = useState<string[]>([]);\r\n   const [loading, setLoading] = useState(false);\r\n \r\n+  console.log(\"ReservationForm serviceType :\", serviceType);\r\n+\r\n   // Fetch dates with full-day reservations on load\r\n   useEffect(() => {\r\n     async function fetchDisabledDates() {\r\n       const { data, error } = await supabase\r\n@@ -25,10 +27,15 @@\n         .select(\"reservation_date\")\r\n         .eq(\"period\", \"full-day\")\r\n         .eq(\"reservation_type\", serviceType);\r\n \r\n-      if (error) console.error(error);\r\n-      else setDisabledDates(data.map((d) => d.reservation_date));\r\n+      //   if (error) console.error(error);\r\n+      //   else setDisabledDates(data.map((d) => d.reservation_date));\r\n+      if (error) console.error(\"Erreur Supabase (disabledDates) :\", error);\r\n+      else {\r\n+        console.log(\"Dates full-day r√©cup√©r√©es :\", data);\r\n+        setDisabledDates(data.map((d) => d.reservation_date));\r\n+      }\r\n     }\r\n     fetchDisabledDates();\r\n   }, [serviceType]);\r\n \r\n"
                },
                {
                    "date": 1753127359098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,23 +48,28 @@\n         .select(\"period\")\r\n         .eq(\"reservation_date\", selectedDate.toISOString().split(\"T\")[0])\r\n         .eq(\"reservation_type\", serviceType);\r\n \r\n-      if (error) console.error(error);\r\n-      else {\r\n-        const reservedPeriods = data.map((d) => d.period);\r\n-        const morningTaken =\r\n-          reservedPeriods.includes(\"morning\") ||\r\n-          reservedPeriods.includes(\"full-day\");\r\n-        const afternoonTaken =\r\n-          reservedPeriods.includes(\"afternoon\") ||\r\n-          reservedPeriods.includes(\"full-day\");\r\n+if (error) console.error(\"Erreur Supabase (availablePeriods) :\", error);\r\n+else {\r\n+  console.log(\"P√©riodes r√©serv√©es pour la date s√©lectionn√©e :\", data);\r\n+  const reservedPeriods = data.map((d) => d.period);\r\n+  const morningTaken =\r\n+    reservedPeriods.includes(\"morning\") ||\r\n+    reservedPeriods.includes(\"full-day\");\r\n+  const afternoonTaken =\r\n+    reservedPeriods.includes(\"afternoon\") ||\r\n+    reservedPeriods.includes(\"full-day\");\r\n \r\n-        if (morningTaken && afternoonTaken) setAvailablePeriods([]);\r\n-        else if (morningTaken) setAvailablePeriods([\"afternoon\"]);\r\n-        else if (afternoonTaken) setAvailablePeriods([\"morning\"]);\r\n-        else setAvailablePeriods([\"morning\", \"afternoon\", \"full-day\"]);\r\n-      }\r\n+  console.log(\"Matin pris :\", morningTaken);\r\n+  console.log(\"Apr√®s-midi pris :\", afternoonTaken);\r\n+\r\n+  if (morningTaken && afternoonTaken) setAvailablePeriods([]);\r\n+  else if (morningTaken) setAvailablePeriods([\"afternoon\"]);\r\n+  else if (afternoonTaken) setAvailablePeriods([\"morning\"]);\r\n+  else setAvailablePeriods([\"morning\", \"afternoon\", \"full-day\"]);\r\n+}\r\n+\r\n       setLoading(false);\r\n     }\r\n     fetchAvailablePeriods();\r\n   }, [selectedDate, serviceType]);\r\n"
                }
            ],
            "date": 1753126584087,
            "name": "Commit-0",
            "content": "// üì¶ Imports\r\nimport { supabase } from \"@/src/integrations/supabase/client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { View, Text, TouchableOpacity, ActivityIndicator } from \"react-native\";\r\nimport DatePicker from \"react-native-date-picker\";\r\n\r\nexport default function ReservationForm({ serviceType }: { serviceType: string }) {\r\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\r\n  const [selectedPeriod, setSelectedPeriod] = useState<'full-day' | 'morning' | 'afternoon'>();\r\n  const [disabledDates, setDisabledDates] = useState<string[]>([]);\r\n  const [availablePeriods, setAvailablePeriods] = useState<string[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Fetch dates with full-day reservations on load\r\n  useEffect(() => {\r\n    async function fetchDisabledDates() {\r\n      const { data, error } = await supabase\r\n        .from('reservations')\r\n        .select('reservation_date')\r\n        .eq('period', 'full-day')\r\n        .eq('reservation_type', serviceType);\r\n\r\n      if (error) console.error(error);\r\n      else setDisabledDates(data.map(d => d.reservation_date));\r\n    }\r\n    fetchDisabledDates();\r\n  }, [serviceType]);\r\n\r\n  // Check period availability on date change\r\n  useEffect(() => {\r\n    async function fetchAvailablePeriods() {\r\n      setLoading(true);\r\n      const { data, error } = await supabase\r\n        .from('reservations')\r\n        .select('period')\r\n        .eq('reservation_date', selectedDate.toISOString().split('T')[0])\r\n        .eq('reservation_type', serviceType);\r\n\r\n      if (error) console.error(error);\r\n      else {\r\n        const reservedPeriods = data.map(d => d.period);\r\n        const morningTaken = reservedPeriods.includes('morning') || reservedPeriods.includes('full-day');\r\n        const afternoonTaken = reservedPeriods.includes('afternoon') || reservedPeriods.includes('full-day');\r\n\r\n        if (morningTaken && afternoonTaken) setAvailablePeriods([]);\r\n        else if (morningTaken) setAvailablePeriods(['afternoon']);\r\n        else if (afternoonTaken) setAvailablePeriods(['morning']);\r\n        else setAvailablePeriods(['morning', 'afternoon', 'full-day']);\r\n      }\r\n      setLoading(false);\r\n    }\r\n    fetchAvailablePeriods();\r\n  }, [selectedDate, serviceType]);\r\n\r\n  function handleReservation() {\r\n    if (!selectedPeriod) return alert('S√©lectionnez une p√©riode.');\r\n    // Enregistrement Supabase ici...\r\n    console.log(`R√©servation confirm√©e pour ${selectedDate.toDateString()} - ${selectedPeriod}`);\r\n  }\r\n\r\n  return (\r\n    <View style={{ padding: 20 }}>\r\n      <Text style={{ fontSize: 18, fontWeight: 'bold' }}>Choisir une date :</Text>\r\n      <DatePicker\r\n        date={selectedDate}\r\n        onDateChange={setSelectedDate}\r\n        minimumDate={new Date()}\r\n        mode=\"date\"\r\n      />\r\n\r\n      {loading ? (\r\n        <ActivityIndicator size=\"large\" />\r\n      ) : availablePeriods.length === 0 ? (\r\n        <Text style={{ color: 'red', marginVertical: 10 }}>Aucune disponibilit√© ce jour-l√†.</Text>\r\n      ) : (\r\n        <View style={{ marginVertical: 10 }}>\r\n          <Text>Choisissez la p√©riode :</Text>\r\n          {availablePeriods.map(p => (\r\n            <TouchableOpacity key={p} onPress={() => setSelectedPeriod(p as any)} style={{ padding: 10, backgroundColor: selectedPeriod === p ? '#5cb9bc' : '#ddd', marginVertical: 5, borderRadius: 8 }}>\r\n              <Text style={{ color: selectedPeriod === p ? 'white' : 'black' }}>{p === 'morning' ? 'Matin√©e' : p === 'afternoon' ? 'Apr√®s-midi' : 'Journ√©e compl√®te'}</Text>\r\n            </TouchableOpacity>\r\n          ))}\r\n        </View>\r\n      )}\r\n\r\n      <TouchableOpacity onPress={handleReservation} style={{ backgroundColor: '#5cb9bc', padding: 15, borderRadius: 8, marginTop: 20 }}>\r\n        <Text style={{ color: 'white', textAlign: 'center' }}>Confirmer la r√©servation</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n}\r\n"
        }
    ]
}