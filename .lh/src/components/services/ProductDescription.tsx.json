{
    "sourceFile": "src/components/services/ProductDescription.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1752832216289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752832738774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,30 +73,35 @@\n       setIsLoading(false);\r\n     }\r\n   };\r\n \r\n-  const handleDeleteReview = (reviewId: string) => {\r\n-    Alert.alert(\r\n-      \"Confirmer la suppression\",\r\n-      \"Êtes-vous sûr de vouloir supprimer cet avis ? Cette action est irréversible.\",\r\n-      [\r\n-        { text: \"Annuler\", style: \"cancel\" },\r\n-        {\r\n-          text: \"Supprimer\",\r\n-          style: \"destructive\",\r\n-          onPress: () => confirmDeleteReview(reviewId),\r\n-        },\r\n-      ]\r\n-    );\r\n+  const handleDeleteReview = async (reviewId: string) => {\r\n+    return new Promise<void>((resolve) => {\r\n+      Alert.alert(\r\n+        \"Confirmer la suppression\",\r\n+        \"Êtes-vous sûr de vouloir supprimer cet avis ? Cette action est irréversible.\",\r\n+        [\r\n+          { text: \"Annuler\", style: \"cancel\", onPress: () => resolve() },\r\n+          {\r\n+            text: \"Supprimer\",\r\n+            style: \"destructive\",\r\n+            onPress: async () => {\r\n+              await confirmDeleteReview(reviewId);\r\n+              resolve();\r\n+            },\r\n+          },\r\n+        ]\r\n+      );\r\n+    });\r\n   };\r\n \r\n   const confirmDeleteReview = async (reviewId: string) => {\r\n     try {\r\n       const { error } = await supabase\r\n         .from(\"reviews\")\r\n         .delete()\r\n         .eq(\"id\", reviewId)\r\n-        .eq(\"user_id\", currentUserId);\r\n+        .eq(\"user_id\", currentUserId ?? \"\");\r\n \r\n       if (error) throw error;\r\n \r\n       Toast.show({\r\n"
                },
                {
                    "date": 1752832766545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,8 +135,13 @@\n         setCurrentUserId(session?.user?.id || null);\r\n       }\r\n     );\r\n \r\n+    const subscription = supabase.auth.onAuthStateChange((_event, session) => {\r\n+      setIsLoggedIn(!!session);\r\n+      setCurrentUserId(session?.user?.id || null);\r\n+    });\r\n+\r\n     return () => {\r\n       subscription.unsubscribe();\r\n     };\r\n   }, []);\r\n"
                },
                {
                    "date": 1752832861298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,15 +128,8 @@\n     };\r\n \r\n     checkAuthStatus();\r\n \r\n-    const { data: subscription } = supabase.auth.onAuthStateChange(\r\n-      (_event, session) => {\r\n-        setIsLoggedIn(!!session);\r\n-        setCurrentUserId(session?.user?.id || null);\r\n-      }\r\n-    );\r\n-\r\n     const subscription = supabase.auth.onAuthStateChange((_event, session) => {\r\n       setIsLoggedIn(!!session);\r\n       setCurrentUserId(session?.user?.id || null);\r\n     });\r\n"
                },
                {
                    "date": 1752832943924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,11 @@\n     };\r\n \r\n     checkAuthStatus();\r\n \r\n-    const subscription = supabase.auth.onAuthStateChange((_event, session) => {\r\n+    const {\r\n+      data: { subscription },\r\n+    } = supabase.auth.onAuthStateChange((_event, session) => {\r\n       setIsLoggedIn(!!session);\r\n       setCurrentUserId(session?.user?.id || null);\r\n     });\r\n \r\n"
                },
                {
                    "date": 1752870784054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,260 @@\n+import { supabase } from \"@/integrations/supabase/client\";\r\n+import { useNavigation, useRoute } from \"@react-navigation/native\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import {\r\n+  ActivityIndicator,\r\n+  Alert,\r\n+  ScrollView,\r\n+  StyleSheet,\r\n+  Text,\r\n+  TouchableOpacity,\r\n+  View,\r\n+} from \"react-native\";\r\n+import Toast from \"react-native-toast-message\";\r\n+import ReviewForm from \"./ReviewForm\";\r\n+import ReviewsList from \"./ReviewsList\";\r\n+\r\n+const ProductDescription = () => {\r\n+  const [productName, setProductName] = useState(\"\");\r\n+  const [productId, setProductId] = useState(\"\");\r\n+  const [reviews, setReviews] = useState<any[]>([]);\r\n+  const [isLoading, setIsLoading] = useState(true);\r\n+  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n+  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\r\n+  const navigation = useNavigation();\r\n+  const route = useRoute();\r\n+\r\n+  // Fonction pour charger les avis\r\n+  const fetchReviews = async () => {\r\n+    try {\r\n+      setIsLoading(true);\r\n+      if (!productId) return;\r\n+\r\n+      const { data, error } = await supabase\r\n+        .from(\"reviews\")\r\n+        .select(\"*\")\r\n+        .eq(\"product_id\", productId)\r\n+        .order(\"created_at\", { ascending: false });\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      const formattedReviews = await Promise.all(\r\n+        data.map(async (review: any) => {\r\n+          let userName = \"Client\";\r\n+\r\n+          if (review.user_id) {\r\n+            const { data: profileData } = await supabase\r\n+              .from(\"profiles_public\")\r\n+              .select(\"first_name, last_name\")\r\n+              .eq(\"id\", review.user_id)\r\n+              .single();\r\n+\r\n+            if (profileData) {\r\n+              const firstName = profileData.first_name || \"\";\r\n+              const lastName = profileData.last_name || \"\";\r\n+              if (firstName || lastName) {\r\n+                userName = `${firstName} ${lastName}`.trim();\r\n+              }\r\n+            }\r\n+          }\r\n+\r\n+          return { ...review, user_name: userName };\r\n+        })\r\n+      );\r\n+\r\n+      setReviews(formattedReviews);\r\n+    } catch (error) {\r\n+      Toast.show({\r\n+        type: \"error\",\r\n+        text1: \"Erreur\",\r\n+        text2: \"Impossible de charger les avis\",\r\n+      });\r\n+    } finally {\r\n+      setIsLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDeleteReview = async (reviewId: string) => {\r\n+    return new Promise<void>((resolve) => {\r\n+      Alert.alert(\r\n+        \"Confirmer la suppression\",\r\n+        \"Êtes-vous sûr de vouloir supprimer cet avis ? Cette action est irréversible.\",\r\n+        [\r\n+          { text: \"Annuler\", style: \"cancel\", onPress: () => resolve() },\r\n+          {\r\n+            text: \"Supprimer\",\r\n+            style: \"destructive\",\r\n+            onPress: async () => {\r\n+              await confirmDeleteReview(reviewId);\r\n+              resolve();\r\n+            },\r\n+          },\r\n+        ]\r\n+      );\r\n+    });\r\n+  };\r\n+\r\n+  const confirmDeleteReview = async (reviewId: string) => {\r\n+    try {\r\n+      const { error } = await supabase\r\n+        .from(\"reviews\")\r\n+        .delete()\r\n+        .eq(\"id\", reviewId)\r\n+        .eq(\"user_id\", currentUserId ?? \"\");\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      Toast.show({\r\n+        type: \"success\",\r\n+        text1: \"Avis supprimé\",\r\n+        text2: \"Votre avis a été supprimé avec succès\",\r\n+      });\r\n+\r\n+      fetchReviews();\r\n+    } catch (error) {\r\n+      Toast.show({\r\n+        type: \"error\",\r\n+        text1: \"Erreur\",\r\n+        text2: \"Impossible de supprimer l'avis\",\r\n+      });\r\n+    }\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    const checkAuthStatus = async () => {\r\n+      const { data } = await supabase.auth.getSession();\r\n+      setIsLoggedIn(!!data.session);\r\n+      setCurrentUserId(data.session?.user?.id || null);\r\n+    };\r\n+\r\n+    checkAuthStatus();\r\n+\r\n+    const {\r\n+      data: { subscription },\r\n+    } = supabase.auth.onAuthStateChange((_event, session) => {\r\n+      setIsLoggedIn(!!session);\r\n+      setCurrentUserId(session?.user?.id || null);\r\n+    });\r\n+\r\n+    return () => {\r\n+      subscription.unsubscribe();\r\n+    };\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    const path: string = (route as any).name; // adjust based on your navigator\r\n+\r\n+    let name = \"\";\r\n+    let id = \"\";\r\n+\r\n+    if (path.includes(\"3-mois-entreprise\")) {\r\n+      name = \"Domiciliation 3 mois – Entreprise\";\r\n+      id = \"domiciliation-3mois-entreprise\";\r\n+    } else if (path.includes(\"3-mois-micro-entreprise\")) {\r\n+      name = \"Domiciliation 3 mois – Micro Entreprise\";\r\n+      id = \"domiciliation-3mois-micro\";\r\n+    } else if (path.includes(\"6-mois-entreprise\")) {\r\n+      name = \"Domiciliation 6 mois – Entreprise\";\r\n+      id = \"domiciliation-6mois-entreprise\";\r\n+    } else if (path.includes(\"6-mois-micro-entreprise\")) {\r\n+      name = \"Domiciliation 6 mois – Micro Entreprise\";\r\n+      id = \"domiciliation-6mois-micro\";\r\n+    } else if (path.includes(\"1-an-entreprise\")) {\r\n+      name = \"Domiciliation 1 an – Entreprise\";\r\n+      id = \"domiciliation-1an-entreprise\";\r\n+    } else {\r\n+      name = path.replace(/-/g, \" \").replace(/\\b\\w/g, (l) => l.toUpperCase());\r\n+      id = path;\r\n+    }\r\n+\r\n+    setProductName(name);\r\n+    setProductId(id);\r\n+\r\n+    fetchReviews();\r\n+  }, [route]);\r\n+\r\n+  const handleReviewSubmitted = () => {\r\n+    fetchReviews();\r\n+  };\r\n+\r\n+  return (\r\n+    <ScrollView style={styles.container}>\r\n+      <Text style={styles.title}>Avis ({reviews.length})</Text>\r\n+\r\n+      {isLoading ? (\r\n+        <ActivityIndicator size=\"large\" color=\"#06b6d4\" />\r\n+      ) : (\r\n+        <ReviewsList\r\n+          reviews={reviews}\r\n+          isLoading={isLoading}\r\n+          currentUserId={currentUserId}\r\n+          onDeleteReview={handleDeleteReview}\r\n+        />\r\n+      )}\r\n+\r\n+      {isLoggedIn ? (\r\n+        <View style={styles.reviewFormContainer}>\r\n+          <ReviewForm\r\n+            productName={productName}\r\n+            productId={productId}\r\n+            onReviewSubmitted={handleReviewSubmitted}\r\n+          />\r\n+        </View>\r\n+      ) : (\r\n+        <View style={styles.loginPrompt}>\r\n+          <Text style={styles.loginText}>\r\n+            Vous devez être connecté pour laisser un avis.\r\n+          </Text>\r\n+          <TouchableOpacity\r\n+            style={styles.loginButton}\r\n+            onPress={() => navigation.navigate(\"Login\")}\r\n+          >\r\n+            <Text style={styles.loginButtonText}>Se connecter</Text>\r\n+          </TouchableOpacity>\r\n+        </View>\r\n+      )}\r\n+    </ScrollView>\r\n+  );\r\n+};\r\n+\r\n+const styles = StyleSheet.create({\r\n+  container: {\r\n+    padding: 16,\r\n+    marginTop: 16,\r\n+    backgroundColor: \"#fff\",\r\n+  },\r\n+  title: {\r\n+    fontSize: 20,\r\n+    fontWeight: \"600\",\r\n+    marginBottom: 12,\r\n+  },\r\n+  reviewFormContainer: {\r\n+    marginTop: 16,\r\n+    borderTopWidth: 1,\r\n+    borderTopColor: \"#e5e7eb\",\r\n+    paddingTop: 16,\r\n+  },\r\n+  loginPrompt: {\r\n+    marginTop: 16,\r\n+    borderTopWidth: 1,\r\n+    borderTopColor: \"#e5e7eb\",\r\n+    paddingTop: 16,\r\n+    alignItems: \"center\",\r\n+  },\r\n+  loginText: {\r\n+    color: \"#6b7280\",\r\n+    marginBottom: 8,\r\n+  },\r\n+  loginButton: {\r\n+    backgroundColor: \"#06b6d4\",\r\n+    paddingVertical: 10,\r\n+    paddingHorizontal: 20,\r\n+    borderRadius: 8,\r\n+  },\r\n+  loginButtonText: {\r\n+    color: \"#fff\",\r\n+    fontWeight: \"600\",\r\n+  },\r\n+});\r\n+\r\n+export default ProductDescription;\r\n"
                },
                {
                    "date": 1754407188132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n import { supabase } from \"@/integrations/supabase/client\";\r\n+import serviceData from \"@/src/data/data\";\r\n import { useNavigation, useRoute } from \"@react-navigation/native\";\r\n import React, { useEffect, useState } from \"react\";\r\n+\r\n import {\r\n   ActivityIndicator,\r\n   Alert,\r\n-  ScrollView,\r\n   StyleSheet,\r\n   Text,\r\n   TouchableOpacity,\r\n   View,\r\n@@ -24,298 +25,140 @@\n   const navigation = useNavigation();\r\n   const route = useRoute();\r\n \r\n   // Fonction pour charger les avis\r\n-  const fetchReviews = async () => {\r\n-    try {\r\n-      setIsLoading(true);\r\n-      if (!productId) return;\r\n+  // const fetchReviews = async () => {\r\n+  //   try {\r\n+  //     setIsLoading(true);\r\n+  //     if (!productId) return;\r\n \r\n-      const { data, error } = await supabase\r\n-        .from(\"reviews\")\r\n-        .select(\"*\")\r\n-        .eq(\"product_id\", productId)\r\n-        .order(\"created_at\", { ascending: false });\r\n+  //     const { data, error } = await supabase\r\n+  //       .from(\"reviews\")\r\n+  //       .select(\"*\")\r\n+  //       .eq(\"product_id\", productId)\r\n+  //       .order(\"created_at\", { ascending: false });\r\n \r\n-      if (error) throw error;\r\n+  //     if (error) throw error;\r\n \r\n-      const formattedReviews = await Promise.all(\r\n-        data.map(async (review: any) => {\r\n-          let userName = \"Client\";\r\n+  //     const formattedReviews = await Promise.all(\r\n+  //       data.map(async (review: any) => {\r\n+  //         let userName = \"Client\";\r\n \r\n-          if (review.user_id) {\r\n-            const { data: profileData } = await supabase\r\n-              .from(\"profiles_public\")\r\n-              .select(\"first_name, last_name\")\r\n-              .eq(\"id\", review.user_id)\r\n-              .single();\r\n+  //         if (review.user_id) {\r\n+  //           const { data: profileData } = await supabase\r\n+  //             .from(\"profiles_public\")\r\n+  //             .select(\"first_name, last_name\")\r\n+  //             .eq(\"id\", review.user_id)\r\n+  //             .single();\r\n \r\n-            if (profileData) {\r\n-              const firstName = profileData.first_name || \"\";\r\n-              const lastName = profileData.last_name || \"\";\r\n-              if (firstName || lastName) {\r\n-                userName = `${firstName} ${lastName}`.trim();\r\n-              }\r\n-            }\r\n-          }\r\n+  //           if (profileData) {\r\n+  //             const firstName = profileData.first_name || \"\";\r\n+  //             const lastName = profileData.last_name || \"\";\r\n+  //             if (firstName || lastName) {\r\n+  //               userName = `${firstName} ${lastName}`.trim();\r\n+  //             }\r\n+  //           }\r\n+  //         }\r\n \r\n-          return { ...review, user_name: userName };\r\n-        })\r\n-      );\r\n+  //         return { ...review, user_name: userName };\r\n+  //       })\r\n+  //     );\r\n \r\n-      setReviews(formattedReviews);\r\n-    } catch (error) {\r\n-      Toast.show({\r\n-        type: \"error\",\r\n-        text1: \"Erreur\",\r\n-        text2: \"Impossible de charger les avis\",\r\n-      });\r\n-    } finally {\r\n-      setIsLoading(false);\r\n-    }\r\n-  };\r\n+  //     setReviews(formattedReviews);\r\n+  //   } catch (error) {\r\n+  //     Toast.show({\r\n+  //       type: \"error\",\r\n+  //       text1: \"Erreur\",\r\n+  //       text2: \"Impossible de charger les avis\",\r\n+  //     });\r\n+  //   } finally {\r\n+  //     setIsLoading(false);\r\n+  //   }\r\n+  // };\r\n \r\n-  const handleDeleteReview = async (reviewId: string) => {\r\n-    return new Promise<void>((resolve) => {\r\n-      Alert.alert(\r\n-        \"Confirmer la suppression\",\r\n-        \"Êtes-vous sûr de vouloir supprimer cet avis ? Cette action est irréversible.\",\r\n-        [\r\n-          { text: \"Annuler\", style: \"cancel\", onPress: () => resolve() },\r\n-          {\r\n-            text: \"Supprimer\",\r\n-            style: \"destructive\",\r\n-            onPress: async () => {\r\n-              await confirmDeleteReview(reviewId);\r\n-              resolve();\r\n-            },\r\n-          },\r\n-        ]\r\n-      );\r\n-    });\r\n-  };\r\n+  useEffect(() => {\r\n+    const path = (route as any).name;\r\n+    const idParam = (route.params as any)?.id;\r\n \r\n-  const confirmDeleteReview = async (reviewId: string) => {\r\n-    try {\r\n-      const { error } = await supabase\r\n-        .from(\"reviews\")\r\n-        .delete()\r\n-        .eq(\"id\", reviewId)\r\n-        .eq(\"user_id\", currentUserId ?? \"\");\r\n+    let finalId = \"\";\r\n+    let finalName = \"\";\r\n \r\n-      if (error) throw error;\r\n-\r\n-      Toast.show({\r\n-        type: \"success\",\r\n-        text1: \"Avis supprimé\",\r\n-        text2: \"Votre avis a été supprimé avec succès\",\r\n-      });\r\n-\r\n-      fetchReviews();\r\n-    } catch (error) {\r\n-      Toast.show({\r\n-        type: \"error\",\r\n-        text1: \"Erreur\",\r\n-        text2: \"Impossible de supprimer l'avis\",\r\n-      });\r\n+    if (idParam && serviceData[idParam]) {\r\n+      // Si on passe par les params (comme avec serviceData)\r\n+      finalId = idParam;\r\n+      finalName = serviceData[idParam]?.title ?? \"Nom inconnu\";\r\n+    } else if (path) {\r\n+      // Sinon, on tente de déduire par le nom de la route\r\n+      if (path.includes(\"3-mois-entreprise\")) {\r\n+        finalName = \"Domiciliation 3 mois – Entreprise\";\r\n+        finalId = \"domiciliation-3mois-entreprise\";\r\n+      } else if (path.includes(\"3-mois-micro-entreprise\")) {\r\n+        finalName = \"Domiciliation 3 mois – Micro Entreprise\";\r\n+        finalId = \"domiciliation-3mois-micro\";\r\n+      } else if (path.includes(\"6-mois-entreprise\")) {\r\n+        finalName = \"Domiciliation 6 mois – Entreprise\";\r\n+        finalId = \"domiciliation-6mois-entreprise\";\r\n+      } else if (path.includes(\"6-mois-micro-entreprise\")) {\r\n+        finalName = \"Domiciliation 6 mois – Micro Entreprise\";\r\n+        finalId = \"domiciliation-6mois-micro\";\r\n+      } else if (path.includes(\"1-an-entreprise\")) {\r\n+        finalName = \"Domiciliation 1 an – Entreprise\";\r\n+        finalId = \"domiciliation-1an-entreprise\";\r\n+      } else {\r\n+        finalId = path;\r\n+        finalName = path\r\n+          .replace(/-/g, \" \")\r\n+          .replace(/\\b\\w/g, (l: any) => l.toUpperCase());\r\n+      }\r\n     }\r\n-  };\r\n \r\n-  useEffect(() => {\r\n-    const checkAuthStatus = async () => {\r\n-      const { data } = await supabase.auth.getSession();\r\n-      setIsLoggedIn(!!data.session);\r\n-      setCurrentUserId(data.session?.user?.id || null);\r\n-    };\r\n+    setProductId(finalId);\r\n+    setProductName(finalName);\r\n \r\n-    checkAuthStatus();\r\n-\r\n-    const {\r\n-      data: { subscription },\r\n-    } = supabase.auth.onAuthStateChange((_event, session) => {\r\n-      setIsLoggedIn(!!session);\r\n-      setCurrentUserId(session?.user?.id || null);\r\n-    });\r\n-\r\n-    return () => {\r\n-      subscription.unsubscribe();\r\n-    };\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    const path: string = (route as any).name; // adjust based on your navigator\r\n-\r\n-    let name = \"\";\r\n-    let id = \"\";\r\n-\r\n-    if (path.includes(\"3-mois-entreprise\")) {\r\n-      name = \"Domiciliation 3 mois – Entreprise\";\r\n-      id = \"domiciliation-3mois-entreprise\";\r\n-    } else if (path.includes(\"3-mois-micro-entreprise\")) {\r\n-      name = \"Domiciliation 3 mois – Micro Entreprise\";\r\n-      id = \"domiciliation-3mois-micro\";\r\n-    } else if (path.includes(\"6-mois-entreprise\")) {\r\n-      name = \"Domiciliation 6 mois – Entreprise\";\r\n-      id = \"domiciliation-6mois-entreprise\";\r\n-    } else if (path.includes(\"6-mois-micro-entreprise\")) {\r\n-      name = \"Domiciliation 6 mois – Micro Entreprise\";\r\n-      id = \"domiciliation-6mois-micro\";\r\n-    } else if (path.includes(\"1-an-entreprise\")) {\r\n-      name = \"Domiciliation 1 an – Entreprise\";\r\n-      id = \"domiciliation-1an-entreprise\";\r\n-    } else {\r\n-      name = path.replace(/-/g, \" \").replace(/\\b\\w/g, (l) => l.toUpperCase());\r\n-      id = path;\r\n+    if (finalId) {\r\n+      fetchReviews(finalId); // <-- passe le productId en paramètre\r\n     }\r\n-\r\n-    setProductName(name);\r\n-    setProductId(id);\r\n-\r\n-    fetchReviews();\r\n   }, [route]);\r\n \r\n-  const handleReviewSubmitted = () => {\r\n-    fetchReviews();\r\n-  };\r\n-\r\n-  return (\r\n-    <ScrollView style={styles.container}>\r\n-      <Text style={styles.title}>Avis ({reviews.length})</Text>\r\n-\r\n-      {isLoading ? (\r\n-        <ActivityIndicator size=\"large\" color=\"#06b6d4\" />\r\n-      ) : (\r\n-        <ReviewsList\r\n-          reviews={reviews}\r\n-          isLoading={isLoading}\r\n-          currentUserId={currentUserId}\r\n-          onDeleteReview={handleDeleteReview}\r\n-        />\r\n-      )}\r\n-\r\n-      {isLoggedIn ? (\r\n-        <View style={styles.reviewFormContainer}>\r\n-          <ReviewForm\r\n-            productName={productName}\r\n-            productId={productId}\r\n-            onReviewSubmitted={handleReviewSubmitted}\r\n-          />\r\n-        </View>\r\n-      ) : (\r\n-        <View style={styles.loginPrompt}>\r\n-          <Text style={styles.loginText}>\r\n-            Vous devez être connecté pour laisser un avis.\r\n-          </Text>\r\n-          <TouchableOpacity\r\n-            style={styles.loginButton}\r\n-            onPress={() => navigation.navigate(\"Login\")}\r\n-          >\r\n-            <Text style={styles.loginButtonText}>Se connecter</Text>\r\n-          </TouchableOpacity>\r\n-        </View>\r\n-      )}\r\n-    </ScrollView>\r\n-  );\r\n-};\r\n-\r\n-const styles = StyleSheet.create({\r\n-  container: {\r\n-    padding: 16,\r\n-    marginTop: 16,\r\n-    backgroundColor: \"#fff\",\r\n-  },\r\n-  title: {\r\n-    fontSize: 20,\r\n-    fontWeight: \"600\",\r\n-    marginBottom: 12,\r\n-  },\r\n-  reviewFormContainer: {\r\n-    marginTop: 16,\r\n-    borderTopWidth: 1,\r\n-    borderTopColor: \"#e5e7eb\",\r\n-    paddingTop: 16,\r\n-  },\r\n-  loginPrompt: {\r\n-    marginTop: 16,\r\n-    borderTopWidth: 1,\r\n-    borderTopColor: \"#e5e7eb\",\r\n-    paddingTop: 16,\r\n-    alignItems: \"center\",\r\n-  },\r\n-  loginText: {\r\n-    color: \"#6b7280\",\r\n-    marginBottom: 8,\r\n-  },\r\n-  loginButton: {\r\n-    backgroundColor: \"#06b6d4\",\r\n-    paddingVertical: 10,\r\n-    paddingHorizontal: 20,\r\n-    borderRadius: 8,\r\n-  },\r\n-  loginButtonText: {\r\n-    color: \"#fff\",\r\n-    fontWeight: \"600\",\r\n-  },\r\n-});\r\n-\r\n-export default ProductDescription;\r\n-import { supabase } from \"@/integrations/supabase/client\";\r\n-import { useNavigation, useRoute } from \"@react-navigation/native\";\r\n-import React, { useEffect, useState } from \"react\";\r\n-import {\r\n-  ActivityIndicator,\r\n-  Alert,\r\n-  ScrollView,\r\n-  StyleSheet,\r\n-  Text,\r\n-  TouchableOpacity,\r\n-  View,\r\n-} from \"react-native\";\r\n-import Toast from \"react-native-toast-message\";\r\n-import ReviewForm from \"./ReviewForm\";\r\n-import ReviewsList from \"./ReviewsList\";\r\n-\r\n-const ProductDescription = () => {\r\n-  const [productName, setProductName] = useState(\"\");\r\n-  const [productId, setProductId] = useState(\"\");\r\n-  const [reviews, setReviews] = useState<any[]>([]);\r\n-  const [isLoading, setIsLoading] = useState(true);\r\n-  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n-  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\r\n-  const navigation = useNavigation();\r\n-  const route = useRoute();\r\n-\r\n-  // Fonction pour charger les avis\r\n-  const fetchReviews = async () => {\r\n+  const fetchReviews = async (id: string) => {\r\n     try {\r\n       setIsLoading(true);\r\n-      if (!productId) return;\r\n+      setReviews([]);\r\n \r\n+      if (!id) {\r\n+        console.warn(\"⚠️ Aucun productId fourni !\");\r\n+        return;\r\n+      }\r\n+\r\n       const { data, error } = await supabase\r\n         .from(\"reviews\")\r\n         .select(\"*\")\r\n-        .eq(\"product_id\", productId)\r\n+        .ilike(\"product_id\", id)\r\n         .order(\"created_at\", { ascending: false });\r\n \r\n-      if (error) throw error;\r\n-\r\n+      if (error) {\r\n+        console.error(\"❌ Erreur lors de la récupération des avis :\", error);\r\n+        throw error;\r\n+      }\r\n       const formattedReviews = await Promise.all(\r\n-        data.map(async (review: any) => {\r\n+        data.map(async (review) => {\r\n           let userName = \"Client\";\r\n \r\n           if (review.user_id) {\r\n-            const { data: profileData } = await supabase\r\n+            const { data: profileData, error: profileError } = await supabase\r\n               .from(\"profiles_public\")\r\n               .select(\"first_name, last_name\")\r\n               .eq(\"id\", review.user_id)\r\n               .single();\r\n \r\n+            if (profileError) {\r\n+              console.warn(\"⚠️ Erreur profil :\", profileError);\r\n+            }\r\n+\r\n             if (profileData) {\r\n               const firstName = profileData.first_name || \"\";\r\n               const lastName = profileData.last_name || \"\";\r\n-              if (firstName || lastName) {\r\n-                userName = `${firstName} ${lastName}`.trim();\r\n-              }\r\n+              userName = `${firstName} ${lastName}`.trim() || \"Client\";\r\n             }\r\n           }\r\n \r\n           return { ...review, user_name: userName };\r\n@@ -323,8 +166,9 @@\n       );\r\n \r\n       setReviews(formattedReviews);\r\n     } catch (error) {\r\n+      console.error(\"💥 Erreur fetchReviews :\", error);\r\n       Toast.show({\r\n         type: \"error\",\r\n         text1: \"Erreur\",\r\n         text2: \"Impossible de charger les avis\",\r\n@@ -369,9 +213,9 @@\n         text1: \"Avis supprimé\",\r\n         text2: \"Votre avis a été supprimé avec succès\",\r\n       });\r\n \r\n-      fetchReviews();\r\n+      fetchReviews(productId);\r\n     } catch (error) {\r\n       Toast.show({\r\n         type: \"error\",\r\n         text1: \"Erreur\",\r\n@@ -400,50 +244,18 @@\n       subscription.unsubscribe();\r\n     };\r\n   }, []);\r\n \r\n-  useEffect(() => {\r\n-    const path: string = (route as any).name; // adjust based on your navigator\r\n-\r\n-    let name = \"\";\r\n-    let id = \"\";\r\n-\r\n-    if (path.includes(\"3-mois-entreprise\")) {\r\n-      name = \"Domiciliation 3 mois – Entreprise\";\r\n-      id = \"domiciliation-3mois-entreprise\";\r\n-    } else if (path.includes(\"3-mois-micro-entreprise\")) {\r\n-      name = \"Domiciliation 3 mois – Micro Entreprise\";\r\n-      id = \"domiciliation-3mois-micro\";\r\n-    } else if (path.includes(\"6-mois-entreprise\")) {\r\n-      name = \"Domiciliation 6 mois – Entreprise\";\r\n-      id = \"domiciliation-6mois-entreprise\";\r\n-    } else if (path.includes(\"6-mois-micro-entreprise\")) {\r\n-      name = \"Domiciliation 6 mois – Micro Entreprise\";\r\n-      id = \"domiciliation-6mois-micro\";\r\n-    } else if (path.includes(\"1-an-entreprise\")) {\r\n-      name = \"Domiciliation 1 an – Entreprise\";\r\n-      id = \"domiciliation-1an-entreprise\";\r\n-    } else {\r\n-      name = path.replace(/-/g, \" \").replace(/\\b\\w/g, (l) => l.toUpperCase());\r\n-      id = path;\r\n-    }\r\n-\r\n-    setProductName(name);\r\n-    setProductId(id);\r\n-\r\n-    fetchReviews();\r\n-  }, [route]);\r\n-\r\n   const handleReviewSubmitted = () => {\r\n-    fetchReviews();\r\n+    fetchReviews(productId);\r\n   };\r\n \r\n   return (\r\n-    <ScrollView style={styles.container}>\r\n+    <View style={styles.container}>\r\n       <Text style={styles.title}>Avis ({reviews.length})</Text>\r\n \r\n       {isLoading ? (\r\n-        <ActivityIndicator size=\"large\" color=\"#06b6d4\" />\r\n+        <ActivityIndicator size=\"large\" color=\"#5cb9bc\" />\r\n       ) : (\r\n         <ReviewsList\r\n           reviews={reviews}\r\n           isLoading={isLoading}\r\n@@ -472,9 +284,9 @@\n             <Text style={styles.loginButtonText}>Se connecter</Text>\r\n           </TouchableOpacity>\r\n         </View>\r\n       )}\r\n-    </ScrollView>\r\n+    </View>\r\n   );\r\n };\r\n \r\n const styles = StyleSheet.create({\r\n@@ -505,9 +317,9 @@\n     color: \"#6b7280\",\r\n     marginBottom: 8,\r\n   },\r\n   loginButton: {\r\n-    backgroundColor: \"#06b6d4\",\r\n+    backgroundColor: \"#5cb9bc\",\r\n     paddingVertical: 10,\r\n     paddingHorizontal: 20,\r\n     borderRadius: 8,\r\n   },\r\n"
                },
                {
                    "date": 1754410906111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,58 +24,8 @@\n   const [currentUserId, setCurrentUserId] = useState<string | null>(null);\r\n   const navigation = useNavigation();\r\n   const route = useRoute();\r\n \r\n-  // Fonction pour charger les avis\r\n-  // const fetchReviews = async () => {\r\n-  //   try {\r\n-  //     setIsLoading(true);\r\n-  //     if (!productId) return;\r\n-\r\n-  //     const { data, error } = await supabase\r\n-  //       .from(\"reviews\")\r\n-  //       .select(\"*\")\r\n-  //       .eq(\"product_id\", productId)\r\n-  //       .order(\"created_at\", { ascending: false });\r\n-\r\n-  //     if (error) throw error;\r\n-\r\n-  //     const formattedReviews = await Promise.all(\r\n-  //       data.map(async (review: any) => {\r\n-  //         let userName = \"Client\";\r\n-\r\n-  //         if (review.user_id) {\r\n-  //           const { data: profileData } = await supabase\r\n-  //             .from(\"profiles_public\")\r\n-  //             .select(\"first_name, last_name\")\r\n-  //             .eq(\"id\", review.user_id)\r\n-  //             .single();\r\n-\r\n-  //           if (profileData) {\r\n-  //             const firstName = profileData.first_name || \"\";\r\n-  //             const lastName = profileData.last_name || \"\";\r\n-  //             if (firstName || lastName) {\r\n-  //               userName = `${firstName} ${lastName}`.trim();\r\n-  //             }\r\n-  //           }\r\n-  //         }\r\n-\r\n-  //         return { ...review, user_name: userName };\r\n-  //       })\r\n-  //     );\r\n-\r\n-  //     setReviews(formattedReviews);\r\n-  //   } catch (error) {\r\n-  //     Toast.show({\r\n-  //       type: \"error\",\r\n-  //       text1: \"Erreur\",\r\n-  //       text2: \"Impossible de charger les avis\",\r\n-  //     });\r\n-  //   } finally {\r\n-  //     setIsLoading(false);\r\n-  //   }\r\n-  // };\r\n-\r\n   useEffect(() => {\r\n     const path = (route as any).name;\r\n     const idParam = (route.params as any)?.id;\r\n \r\n@@ -118,8 +68,9 @@\n       fetchReviews(finalId); // <-- passe le productId en paramètre\r\n     }\r\n   }, [route]);\r\n \r\n+  // Fonction pour charger les avis\r\n   const fetchReviews = async (id: string) => {\r\n     try {\r\n       setIsLoading(true);\r\n       setReviews([]);\r\n"
                }
            ],
            "date": 1752832216289,
            "name": "Commit-0",
            "content": "import { supabase } from \"@/integrations/supabase/client\";\r\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ActivityIndicator,\r\n  Alert,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Text,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\nimport Toast from \"react-native-toast-message\";\r\nimport ReviewForm from \"./ReviewForm\";\r\nimport ReviewsList from \"./ReviewsList\";\r\n\r\nconst ProductDescription = () => {\r\n  const [productName, setProductName] = useState(\"\");\r\n  const [productId, setProductId] = useState(\"\");\r\n  const [reviews, setReviews] = useState<any[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\r\n  const navigation = useNavigation();\r\n  const route = useRoute();\r\n\r\n  // Fonction pour charger les avis\r\n  const fetchReviews = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      if (!productId) return;\r\n\r\n      const { data, error } = await supabase\r\n        .from(\"reviews\")\r\n        .select(\"*\")\r\n        .eq(\"product_id\", productId)\r\n        .order(\"created_at\", { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      const formattedReviews = await Promise.all(\r\n        data.map(async (review: any) => {\r\n          let userName = \"Client\";\r\n\r\n          if (review.user_id) {\r\n            const { data: profileData } = await supabase\r\n              .from(\"profiles_public\")\r\n              .select(\"first_name, last_name\")\r\n              .eq(\"id\", review.user_id)\r\n              .single();\r\n\r\n            if (profileData) {\r\n              const firstName = profileData.first_name || \"\";\r\n              const lastName = profileData.last_name || \"\";\r\n              if (firstName || lastName) {\r\n                userName = `${firstName} ${lastName}`.trim();\r\n              }\r\n            }\r\n          }\r\n\r\n          return { ...review, user_name: userName };\r\n        })\r\n      );\r\n\r\n      setReviews(formattedReviews);\r\n    } catch (error) {\r\n      Toast.show({\r\n        type: \"error\",\r\n        text1: \"Erreur\",\r\n        text2: \"Impossible de charger les avis\",\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteReview = (reviewId: string) => {\r\n    Alert.alert(\r\n      \"Confirmer la suppression\",\r\n      \"Êtes-vous sûr de vouloir supprimer cet avis ? Cette action est irréversible.\",\r\n      [\r\n        { text: \"Annuler\", style: \"cancel\" },\r\n        {\r\n          text: \"Supprimer\",\r\n          style: \"destructive\",\r\n          onPress: () => confirmDeleteReview(reviewId),\r\n        },\r\n      ]\r\n    );\r\n  };\r\n\r\n  const confirmDeleteReview = async (reviewId: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from(\"reviews\")\r\n        .delete()\r\n        .eq(\"id\", reviewId)\r\n        .eq(\"user_id\", currentUserId);\r\n\r\n      if (error) throw error;\r\n\r\n      Toast.show({\r\n        type: \"success\",\r\n        text1: \"Avis supprimé\",\r\n        text2: \"Votre avis a été supprimé avec succès\",\r\n      });\r\n\r\n      fetchReviews();\r\n    } catch (error) {\r\n      Toast.show({\r\n        type: \"error\",\r\n        text1: \"Erreur\",\r\n        text2: \"Impossible de supprimer l'avis\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const checkAuthStatus = async () => {\r\n      const { data } = await supabase.auth.getSession();\r\n      setIsLoggedIn(!!data.session);\r\n      setCurrentUserId(data.session?.user?.id || null);\r\n    };\r\n\r\n    checkAuthStatus();\r\n\r\n    const { data: subscription } = supabase.auth.onAuthStateChange(\r\n      (_event, session) => {\r\n        setIsLoggedIn(!!session);\r\n        setCurrentUserId(session?.user?.id || null);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const path: string = (route as any).name; // adjust based on your navigator\r\n\r\n    let name = \"\";\r\n    let id = \"\";\r\n\r\n    if (path.includes(\"3-mois-entreprise\")) {\r\n      name = \"Domiciliation 3 mois – Entreprise\";\r\n      id = \"domiciliation-3mois-entreprise\";\r\n    } else if (path.includes(\"3-mois-micro-entreprise\")) {\r\n      name = \"Domiciliation 3 mois – Micro Entreprise\";\r\n      id = \"domiciliation-3mois-micro\";\r\n    } else if (path.includes(\"6-mois-entreprise\")) {\r\n      name = \"Domiciliation 6 mois – Entreprise\";\r\n      id = \"domiciliation-6mois-entreprise\";\r\n    } else if (path.includes(\"6-mois-micro-entreprise\")) {\r\n      name = \"Domiciliation 6 mois – Micro Entreprise\";\r\n      id = \"domiciliation-6mois-micro\";\r\n    } else if (path.includes(\"1-an-entreprise\")) {\r\n      name = \"Domiciliation 1 an – Entreprise\";\r\n      id = \"domiciliation-1an-entreprise\";\r\n    } else {\r\n      name = path.replace(/-/g, \" \").replace(/\\b\\w/g, (l) => l.toUpperCase());\r\n      id = path;\r\n    }\r\n\r\n    setProductName(name);\r\n    setProductId(id);\r\n\r\n    fetchReviews();\r\n  }, [route]);\r\n\r\n  const handleReviewSubmitted = () => {\r\n    fetchReviews();\r\n  };\r\n\r\n  return (\r\n    <ScrollView style={styles.container}>\r\n      <Text style={styles.title}>Avis ({reviews.length})</Text>\r\n\r\n      {isLoading ? (\r\n        <ActivityIndicator size=\"large\" color=\"#06b6d4\" />\r\n      ) : (\r\n        <ReviewsList\r\n          reviews={reviews}\r\n          isLoading={isLoading}\r\n          currentUserId={currentUserId}\r\n          onDeleteReview={handleDeleteReview}\r\n        />\r\n      )}\r\n\r\n      {isLoggedIn ? (\r\n        <View style={styles.reviewFormContainer}>\r\n          <ReviewForm\r\n            productName={productName}\r\n            productId={productId}\r\n            onReviewSubmitted={handleReviewSubmitted}\r\n          />\r\n        </View>\r\n      ) : (\r\n        <View style={styles.loginPrompt}>\r\n          <Text style={styles.loginText}>\r\n            Vous devez être connecté pour laisser un avis.\r\n          </Text>\r\n          <TouchableOpacity\r\n            style={styles.loginButton}\r\n            onPress={() => navigation.navigate(\"Login\")}\r\n          >\r\n            <Text style={styles.loginButtonText}>Se connecter</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      )}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    padding: 16,\r\n    marginTop: 16,\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    fontWeight: \"600\",\r\n    marginBottom: 12,\r\n  },\r\n  reviewFormContainer: {\r\n    marginTop: 16,\r\n    borderTopWidth: 1,\r\n    borderTopColor: \"#e5e7eb\",\r\n    paddingTop: 16,\r\n  },\r\n  loginPrompt: {\r\n    marginTop: 16,\r\n    borderTopWidth: 1,\r\n    borderTopColor: \"#e5e7eb\",\r\n    paddingTop: 16,\r\n    alignItems: \"center\",\r\n  },\r\n  loginText: {\r\n    color: \"#6b7280\",\r\n    marginBottom: 8,\r\n  },\r\n  loginButton: {\r\n    backgroundColor: \"#06b6d4\",\r\n    paddingVertical: 10,\r\n    paddingHorizontal: 20,\r\n    borderRadius: 8,\r\n  },\r\n  loginButtonText: {\r\n    color: \"#fff\",\r\n    fontWeight: \"600\",\r\n  },\r\n});\r\n\r\nexport default ProductDescription;\r\n"
        }
    ]
}