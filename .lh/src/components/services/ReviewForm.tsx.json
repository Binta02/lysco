{
    "sourceFile": "src/components/services/ReviewForm.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752831816058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752831816058,
            "name": "Commit-0",
            "content": "import { supabase } from \"@/integrations/supabase/client\";\r\nimport { FontAwesome } from \"@expo/vector-icons\";\r\nimport React, { useState } from \"react\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport {\r\n  ActivityIndicator,\r\n  Alert,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\n\r\ninterface ReviewFormProps {\r\n  productName: string;\r\n  productId: string;\r\n  onReviewSubmitted: () => void;\r\n}\r\n\r\nconst ReviewForm: React.FC<ReviewFormProps> = ({\r\n  productName,\r\n  productId,\r\n  onReviewSubmitted,\r\n}) => {\r\n  const [rating, setRating] = useState(0);\r\n  const [hoveredRating, setHoveredRating] = useState(0);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const { control, handleSubmit, reset, formState } = useForm({\r\n    defaultValues: {\r\n      comment: \"\",\r\n    },\r\n  });\r\n\r\n  const onSubmit = async (data: any) => {\r\n    if (rating === 0) {\r\n      Alert.alert(\"Erreur\", \"Veuillez attribuer une note.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSubmitting(true);\r\n      const { data: session } = await supabase.auth.getSession();\r\n\r\n      if (!session.session) {\r\n        Alert.alert(\r\n          \"Connexion requise\",\r\n          \"Vous devez être connecté pour laisser un avis.\"\r\n        );\r\n        return;\r\n      }\r\n\r\n      const { error } = await supabase.from(\"reviews\").insert({\r\n        product_id: productId,\r\n        product_name: productName,\r\n        rating: rating,\r\n        comment: data.comment,\r\n        user_id: session.session.user.id,\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      Alert.alert(\"Avis envoyé\", \"Merci pour votre avis !\");\r\n      reset();\r\n      setRating(0);\r\n      onReviewSubmitted();\r\n    } catch (error: any) {\r\n      Alert.alert(\"Erreur\", error.message || \"Une erreur est survenue.\");\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={{ padding: 16 }}>\r\n      <Text style={{ fontSize: 20, fontWeight: \"bold\", marginBottom: 8 }}>\r\n        Donnez votre avis sur \"{productName}\"\r\n      </Text>\r\n      <Text style={{ fontSize: 14, color: \"#6b7280\", marginBottom: 16 }}>\r\n        Votre adresse e-mail ne sera pas publiée. Les champs obligatoires sont\r\n        indiqués avec *\r\n      </Text>\r\n\r\n      {/* Note */}\r\n      <Text style={{ marginBottom: 8 }}>Votre note *</Text>\r\n      <View\r\n        style={{ flexDirection: \"row\", alignItems: \"center\", marginBottom: 16 }}\r\n      >\r\n        {[1, 2, 3, 4, 5].map((value) => (\r\n          <TouchableOpacity\r\n            key={value}\r\n            onPress={() => setRating(value)}\r\n            onPressIn={() => setHoveredRating(value)}\r\n            onPressOut={() => setHoveredRating(0)}\r\n          >\r\n            <FontAwesome\r\n              name=\"star\"\r\n              size={28}\r\n              color={\r\n                (hoveredRating > 0 ? value <= hoveredRating : value <= rating)\r\n                  ? \"#facc15\"\r\n                  : \"#d1d5db\"\r\n              }\r\n              style={{ marginRight: 8 }}\r\n            />\r\n          </TouchableOpacity>\r\n        ))}\r\n        {rating > 0 && (\r\n          <Text style={{ marginLeft: 8, color: \"#6b7280\" }}>({rating}/5)</Text>\r\n        )}\r\n      </View>\r\n\r\n      {/* Commentaire */}\r\n      <Controller\r\n        control={control}\r\n        name=\"comment\"\r\n        rules={{ required: \"Ce champ est requis\", minLength: 5 }}\r\n        render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n          <View style={{ marginBottom: 16 }}>\r\n            <Text style={{ marginBottom: 8 }}>Votre avis *</Text>\r\n            <TextInput\r\n              multiline\r\n              placeholder=\"Partagez votre expérience...\"\r\n              value={value}\r\n              onChangeText={onChange}\r\n              style={{\r\n                borderColor: error ? \"red\" : \"#d1d5db\",\r\n                borderWidth: 1,\r\n                borderRadius: 8,\r\n                padding: 12,\r\n                minHeight: 100,\r\n                textAlignVertical: \"top\",\r\n              }}\r\n            />\r\n            {error && (\r\n              <Text style={{ color: \"red\", marginTop: 4 }}>\r\n                {error.type === \"minLength\"\r\n                  ? \"Votre avis doit contenir au moins 5 caractères.\"\r\n                  : error.message}\r\n              </Text>\r\n            )}\r\n          </View>\r\n        )}\r\n      />\r\n\r\n      {/* Bouton Soumettre */}\r\n      <TouchableOpacity\r\n        onPress={handleSubmit(onSubmit)}\r\n        style={{\r\n          backgroundColor: \"#06b6d4\",\r\n          padding: 12,\r\n          borderRadius: 8,\r\n          alignItems: \"center\",\r\n          flexDirection: \"row\",\r\n          justifyContent: \"center\",\r\n        }}\r\n        disabled={isSubmitting}\r\n      >\r\n        {isSubmitting ? (\r\n          <ActivityIndicator color=\"#fff\" />\r\n        ) : (\r\n          <>\r\n            <FontAwesome\r\n              name=\"send\"\r\n              size={16}\r\n              color=\"#fff\"\r\n              style={{ marginRight: 8 }}\r\n            />\r\n            <Text style={{ color: \"#fff\", fontWeight: \"bold\" }}>Soumettre</Text>\r\n          </>\r\n        )}\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ReviewForm;\r\n"
        }
    ]
}