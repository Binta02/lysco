{
    "sourceFile": "src/hooks/useUserData.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1752742224186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752742304429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,13 +152,13 @@\n         setDomiciliation({\r\n           id: domiciliationData.id,\r\n           user_id: domiciliationData.user_id,\r\n           status: typedStatus,\r\n-          address: domiciliationData.address,\r\n-          renewal_date: domiciliationData.renewal_date,\r\n-          plan_type: domiciliationData.plan_type,\r\n-          duration: domiciliationData.duration,\r\n-          created_at: domiciliationData.created_at,\r\n+          address: domiciliationData.address ?? \"\", // fallback à string vide\r\n+          renewal_date: domiciliationData.renewal_date ?? \"\", // fallback à string vide\r\n+          plan_type: domiciliationData.plan_type ?? \"\", // fallback à string vide\r\n+          duration: domiciliationData.duration ?? \"\", // fallback à string vide\r\n+          created_at: domiciliationData.created_at ?? \"\", // fallback à string vide\r\n         });\r\n       } else {\r\n         // Sinon, utilisez des valeurs par défaut\r\n         // console.log('Aucune information de domiciliation trouvée, utilisation des valeurs par défaut');\r\n"
                },
                {
                    "date": 1752742368059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,9 +196,9 @@\n               | \"inactive\"\r\n               | \"pending\"\r\n               | \"option\",\r\n             price: service.price || undefined,\r\n-            renewal_date: service.renewal_date,\r\n+            renewal_date: service.renewal_date ?? undefined,\r\n             // Assurons-nous que la catégorie correspond aux valeurs attendues\r\n             category: service.category as\r\n               | \"domiciliation\"\r\n               | \"admin\"\r\n"
                },
                {
                    "date": 1752742470193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // src/hooks/useUserData.tsx\r\n import { supabase } from \"@/integrations/supabase/client\";\r\n import { useEffect, useState } from \"react\";\r\n+import { Alert } from \"react-native\";\r\n \r\n export interface UserProfile {\r\n   id: string;\r\n   email: string;\r\n@@ -342,13 +343,9 @@\n             ]\r\n       );\r\n     } catch (err: any) {\r\n       setError(err.message);\r\n-      toast({\r\n-        title: \"Erreur\",\r\n-        description: \"Impossible de récupérer les informations utilisateur\",\r\n-        variant: \"destructive\",\r\n-      });\r\n+      Alert.alert(\"Erreur\", \"Impossible de récupérer les données utilisateur\");\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1752742524277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -364,21 +364,14 @@\n \r\n       if (error) throw error;\r\n \r\n       // Refresh data\r\n-      toast({\r\n-        title: \"Succès\",\r\n-        description: \"Votre profil a été mis à jour\",\r\n-      });\r\n+      Alert.alert(\"Succès\", \"Votre profil a été mis à jour\");\r\n \r\n       await fetchUserData();\r\n       return true;\r\n     } catch (err: any) {\r\n-      toast({\r\n-        title: \"Erreur\",\r\n-        description: err.message || \"Impossible de mettre à jour le profil\",\r\n-        variant: \"destructive\",\r\n-      });\r\n+      Alert.alert(\"Erreur\", \"Impossible de mettre à jour le profil\");\r\n       return false;\r\n     }\r\n   };\r\n \r\n"
                },
                {
                    "date": 1752742631132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -401,23 +401,14 @@\n \r\n         if (error) throw error;\r\n       }\r\n \r\n-      toast({\r\n-        title: \"Succès\",\r\n-        description: \"Informations de domiciliation mises à jour\",\r\n-      });\r\n+      Alert.alert(\"Succès\", \"Domiciliation mise à jour avec succès\");\r\n \r\n       await fetchUserData();\r\n       return true;\r\n     } catch (err: any) {\r\n-      toast({\r\n-        title: \"Erreur\",\r\n-        description:\r\n-          err.message ||\r\n-          \"Impossible de mettre à jour les informations de domiciliation\",\r\n-        variant: \"destructive\",\r\n-      });\r\n+      Alert.alert(\"Erreur\", \"Impossible de mettre à jour la domiciliation\");\r\n       return false;\r\n     }\r\n   };\r\n \r\n@@ -446,21 +437,17 @@\n \r\n         if (error) throw error;\r\n       }\r\n \r\n-      toast({\r\n-        title: \"Succès\",\r\n-        description: \"Service mis à jour avec succès\",\r\n-      });\r\n+      Alert.alert(\"Succès\", \"Service mis à jour avec succès\");\r\n \r\n       await fetchUserData();\r\n       return true;\r\n     } catch (err: any) {\r\n-      toast({\r\n-        title: \"Erreur\",\r\n-        description: err.message || \"Impossible de mettre à jour le service\",\r\n-        variant: \"destructive\",\r\n-      });\r\n+      Alert.alert(\r\n+        \"Erreur\",\r\n+        err.message || \"Impossible de mettre à jour le service\"\r\n+      );\r\n       return false;\r\n     }\r\n   };\r\n \r\n"
                },
                {
                    "date": 1752742646528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -487,13 +487,10 @@\n       );\r\n \r\n       return true;\r\n     } catch (err: any) {\r\n-      toast({\r\n-        title: \"Erreur\",\r\n-        description: \"Impossible de marquer la notification comme lue\",\r\n-        variant: \"destructive\",\r\n-      });\r\n+      Alert.alert(\"Erreur\", \"Impossible de marquer la notification comme lue\");\r\n+      // Alternatively, you could\r\n       return false;\r\n     }\r\n   };\r\n \r\n"
                },
                {
                    "date": 1752742733504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -356,12 +356,16 @@\n \r\n   // Function to update user profile\r\n   const updateProfile = async (updatedProfile: Partial<UserProfile>) => {\r\n     try {\r\n+      if (!profile?.id) {\r\n+        throw new Error(\"L'ID du profil est manquant.\");\r\n+      }\r\n+\r\n       const { error } = await supabase\r\n         .from(\"profiles\")\r\n         .update(updatedProfile)\r\n-        .eq(\"id\", profile?.id);\r\n+        .eq(\"id\", profile.id);\r\n \r\n       if (error) throw error;\r\n \r\n       // Refresh data\r\n"
                },
                {
                    "date": 1752742997351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -467,13 +467,9 @@\n       );\r\n \r\n       return true;\r\n     } catch (err: any) {\r\n-      toast({\r\n-        title: \"Erreur\",\r\n-        description: \"Impossible de marquer le courrier comme lu\",\r\n-        variant: \"destructive\",\r\n-      });\r\n+      Alert.alert(\"Erreur\", \"Impossible de marquer le courrier comme lu\");\r\n       return false;\r\n     }\r\n   };\r\n \r\n"
                },
                {
                    "date": 1752743065851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -395,8 +395,13 @@\n           .eq(\"id\", domiciliation.id);\r\n \r\n         if (error) throw error;\r\n       } else {\r\n+        if (!profile?.id) {\r\n+          throw new Error(\r\n+            \"profile.id est requis pour insérer une domiciliation\"\r\n+          );\r\n+        }\r\n         // Création d'une nouvelle domiciliation\r\n         const { error } = await supabase.from(\"user_domiciliations\").insert({\r\n           ...updatedDomiciliation,\r\n           address: updatedDomiciliation.address || \"En attente de validation\",\r\n"
                },
                {
                    "date": 1752743073967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -435,8 +435,13 @@\n           .eq(\"id\", service.id);\r\n \r\n         if (error) throw error;\r\n       } else {\r\n+        if (!profile?.id) {\r\n+          throw new Error(\r\n+            \"profile.id est requis pour insérer une domiciliation\"\r\n+          );\r\n+        }\r\n         // Création d'un nouveau service\r\n         const { error } = await supabase.from(\"user_services\").insert({\r\n           name: service.name || \"\",\r\n           category: service.category || \"domiciliation\",\r\n"
                },
                {
                    "date": 1752743095601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -436,11 +436,9 @@\n \r\n         if (error) throw error;\r\n       } else {\r\n         if (!profile?.id) {\r\n-          throw new Error(\r\n-            \"profile.id est requis pour insérer une domiciliation\"\r\n-          );\r\n+          throw new Error(\"profile.id est requis pour insérer une service\");\r\n         }\r\n         // Création d'un nouveau service\r\n         const { error } = await supabase.from(\"user_services\").insert({\r\n           name: service.name || \"\",\r\n"
                },
                {
                    "date": 1753029137975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,10 @@\n   subject: string;\r\n   received_at: string;\r\n   status: \"new\" | \"read\";\r\n }\r\n+console.log(\"✅ Session récupérée :\", session);\r\n+console.log(\"✅ Données profileData :\", profileData);\r\n \r\n export interface UserNotification {\r\n   id: string;\r\n   user_id?: string;\r\n"
                },
                {
                    "date": 1753029151569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,8 @@\n   subject: string;\r\n   received_at: string;\r\n   status: \"new\" | \"read\";\r\n }\r\n-console.log(\"✅ Session récupérée :\", session);\r\n-console.log(\"✅ Données profileData :\", profileData);\r\n \r\n export interface UserNotification {\r\n   id: string;\r\n   user_id?: string;\r\n"
                },
                {
                    "date": 1753030695680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -519,5 +519,45 @@\n     markMailAsRead,\r\n     markNotificationAsRead,\r\n     refreshUserData: fetchUserData,\r\n   };\r\n+  const ensureProfileExists = async (session) => {\r\n+  console.log(\"🔍 Vérification du profil pour user_id :\", session.user.id);\r\n+\r\n+  // Vérifie si un profil existe déjà\r\n+  const { data: profileData, error: profileError } = await supabase\r\n+    .from(\"profiles\")\r\n+    .select(\"*\")\r\n+    .eq(\"id\", session.user.id)\r\n+    .single();\r\n+\r\n+  if (profileError && profileError.code !== \"PGRST116\") {\r\n+    console.error(\"❗ Erreur lors de la récupération du profil :\", profileError);\r\n+    throw profileError;\r\n+  }\r\n+\r\n+  if (!profileData) {\r\n+    console.log(\"⚠ Aucun profil trouvé, création d'une nouvelle entrée\");\r\n+\r\n+    // Création d’un profil minimal\r\n+    const { error: insertError } = await supabase.from(\"profiles\").insert({\r\n+      id: session.user.id,\r\n+      email: session.user.email || \"\", // attention à ne pas laisser null\r\n+      first_name: \"\",\r\n+      last_name: \"\",\r\n+      company_name: \"\",\r\n+      phone: \"\",\r\n+      created_at: new Date().toISOString(),\r\n+    });\r\n+\r\n+    if (insertError) {\r\n+      console.error(\"❗ Erreur lors de la création du profil :\", insertError);\r\n+      throw insertError;\r\n+    }\r\n+\r\n+    console.log(\"✅ Profil créé avec succès\");\r\n+  } else {\r\n+    console.log(\"✅ Profil déjà existant :\", profileData);\r\n+  }\r\n+};\r\n+\r\n }\r\n"
                },
                {
                    "date": 1753030707191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -519,45 +519,6 @@\n     markMailAsRead,\r\n     markNotificationAsRead,\r\n     refreshUserData: fetchUserData,\r\n   };\r\n-  const ensureProfileExists = async (session: ) => {\r\n-  console.log(\"🔍 Vérification du profil pour user_id :\", session.user.id);\r\n \r\n-  // Vérifie si un profil existe déjà\r\n-  const { data: profileData, error: profileError } = await supabase\r\n-    .from(\"profiles\")\r\n-    .select(\"*\")\r\n-    .eq(\"id\", session.user.id)\r\n-    .single();\r\n-\r\n-  if (profileError && profileError.code !== \"PGRST116\") {\r\n-    console.error(\"❗ Erreur lors de la récupération du profil :\", profileError);\r\n-    throw profileError;\r\n-  }\r\n-\r\n-  if (!profileData) {\r\n-    console.log(\"⚠ Aucun profil trouvé, création d'une nouvelle entrée\");\r\n-\r\n-    // Création d’un profil minimal\r\n-    const { error: insertError } = await supabase.from(\"profiles\").insert({\r\n-      id: session.user.id,\r\n-      email: session.user.email || \"\", // attention à ne pas laisser null\r\n-      first_name: \"\",\r\n-      last_name: \"\",\r\n-      company_name: \"\",\r\n-      phone: \"\",\r\n-      created_at: new Date().toISOString(),\r\n-    });\r\n-\r\n-    if (insertError) {\r\n-      console.error(\"❗ Erreur lors de la création du profil :\", insertError);\r\n-      throw insertError;\r\n-    }\r\n-\r\n-    console.log(\"✅ Profil créé avec succès\");\r\n-  } else {\r\n-    console.log(\"✅ Profil déjà existant :\", profileData);\r\n-  }\r\n-};\r\n-\r\n }\r\n"
                },
                {
                    "date": 1753030905037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,46 @@\n   const [adminServices, setAdminServices] = useState<UserAdminService[]>([]);\r\n   const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState<string | null>(null);\r\n \r\n+  async function ensureProfileExists(session: any) {\r\n+  console.log(\"🔍 Vérification du profil pour user_id :\", session.user.id);\r\n+\r\n+  const { data: profileData, error: profileError } = await supabase\r\n+    .from(\"profiles\")\r\n+    .select(\"*\")\r\n+    .eq(\"id\", session.user.id)\r\n+    .single();\r\n+\r\n+  if (profileError && profileError.code !== \"PGRST116\") {\r\n+    console.error(\"❗ Erreur lors de la récupération du profil :\", profileError);\r\n+    throw profileError;\r\n+  }\r\n+\r\n+  if (!profileData) {\r\n+    console.log(\"⚠ Aucun profil trouvé, création d'une nouvelle entrée\");\r\n+\r\n+    const { error: insertError } = await supabase.from(\"profiles\").insert({\r\n+      id: session.user.id,\r\n+      email: session.user.email || \"\",\r\n+      first_name: \"\",\r\n+      last_name: \"\",\r\n+      company_name: \"\",\r\n+      phone: \"\",\r\n+      created_at: new Date().toISOString(),\r\n+    });\r\n+\r\n+    if (insertError) {\r\n+      console.error(\"❗ Erreur lors de la création du profil :\", insertError);\r\n+      throw insertError;\r\n+    }\r\n+\r\n+    console.log(\"✅ Profil créé avec succès\");\r\n+  } else {\r\n+    console.log(\"✅ Profil déjà existant :\", profileData);\r\n+  }\r\n+}\r\n+\r\n   const fetchUserData = async () => {\r\n     setLoading(true);\r\n     setError(null);\r\n \r\n@@ -100,14 +138,15 @@\n       // Get current session\r\n       const {\r\n         data: { session },\r\n       } = await supabase.auth.getSession();\r\n-\r\n       if (!session) {\r\n         setLoading(false);\r\n         return;\r\n       }\r\n+      await ensureProfileExists(session);\r\n \r\n+\r\n       // Fetch user profile from profiles table\r\n       const { data: profileData, error: profileError } = await supabase\r\n         .from(\"profiles\")\r\n         .select(\"*\")\r\n"
                }
            ],
            "date": 1752742224186,
            "name": "Commit-0",
            "content": "// src/hooks/useUserData.tsx\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport interface UserProfile {\r\n  id: string;\r\n  email: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  created_at: string;\r\n  company_name?: string;\r\n  phone?: string;\r\n  deleted_at?: string | null; // Date when the user was deleted, if applicable\r\n}\r\n\r\nexport interface UserDomiciliation {\r\n  id?: string;\r\n  user_id?: string;\r\n  status: \"active\" | \"inactive\" | \"pending\";\r\n  address: string;\r\n  renewal_date: string;\r\n  created_at?: string;\r\n  plan_type?: string; // Type de plan: 'société', 'auto-entrepreneur', 'association'\r\n  duration?: string; // '1 mois', '3 mois', '6 mois', '1 an'\r\n}\r\n\r\nexport interface UserService {\r\n  id: string;\r\n  user_id?: string;\r\n  name: string;\r\n  status: \"active\" | \"inactive\" | \"pending\" | \"option\";\r\n  price?: number;\r\n  renewal_date?: string;\r\n  category: \"domiciliation\" | \"admin\" | \"marketing\" | \"complementary\";\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\nexport interface UserMail {\r\n  id: string;\r\n  user_id?: string;\r\n  subject: string;\r\n  received_at: string;\r\n  status: \"new\" | \"read\";\r\n}\r\n\r\nexport interface UserNotification {\r\n  id: string;\r\n  user_id?: string;\r\n  message: string;\r\n  created_at: string;\r\n  read: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n  id: string;\r\n  user_id?: string;\r\n  type: \"mail\" | \"document\" | \"message\";\r\n  title: string;\r\n  description: string;\r\n  created_at: string;\r\n}\r\n\r\nexport interface UserDocument {\r\n  id: string;\r\n  user_id?: string;\r\n  name: string;\r\n  created_at: string;\r\n  type: string;\r\n}\r\n\r\nexport interface UserAdminService {\r\n  id: string;\r\n  user_id?: string;\r\n  service: string;\r\n  next_processing: string;\r\n  status: \"pending\" | \"active\" | \"completed\";\r\n}\r\n\r\nexport function useUserData() {\r\n  const [profile, setProfile] = useState<UserProfile | null>(null);\r\n  const [domiciliation, setDomiciliation] = useState<UserDomiciliation | null>(\r\n    null\r\n  );\r\n  const [userServices, setUserServices] = useState<UserService[]>([]);\r\n  const [mails, setMails] = useState<UserMail[]>([]);\r\n  const [notifications, setNotifications] = useState<UserNotification[]>([]);\r\n  const [activities, setActivities] = useState<UserActivity[]>([]);\r\n  const [documents, setDocuments] = useState<UserDocument[]>([]);\r\n  const [adminServices, setAdminServices] = useState<UserAdminService[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchUserData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // Get current session\r\n      const {\r\n        data: { session },\r\n      } = await supabase.auth.getSession();\r\n\r\n      if (!session) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Fetch user profile from profiles table\r\n      const { data: profileData, error: profileError } = await supabase\r\n        .from(\"profiles\")\r\n        .select(\"*\")\r\n        .eq(\"id\", session.user.id)\r\n        .single();\r\n\r\n      if (profileError) throw profileError;\r\n\r\n      setProfile({\r\n        id: profileData?.id || session.user.id,\r\n        email: session.user.email || \"\",\r\n        first_name: profileData?.first_name || \"\",\r\n        last_name: profileData?.last_name || \"\",\r\n        company_name: profileData?.company_name || \"\",\r\n        phone: profileData?.phone || \"\",\r\n        created_at: profileData?.created_at || session.user.created_at,\r\n      });\r\n\r\n      // Récupérer les informations de domiciliation depuis Supabase\r\n      const { data: domiciliationData, error: domiciliationError } =\r\n        await supabase\r\n          .from(\"user_domiciliations\")\r\n          .select(\"*\")\r\n          .eq(\"user_id\", session.user.id)\r\n          .maybeSingle();\r\n\r\n      if (domiciliationError && domiciliationError.code !== \"PGRST116\") {\r\n        // Si c'est une erreur autre que \"No rows found\"\r\n        console.error(\r\n          \"Erreur lors de la récupération des informations de domiciliation:\",\r\n          domiciliationError\r\n        );\r\n      }\r\n\r\n      // Si un enregistrement de domiciliation est trouvé, utilisez-le\r\n      if (domiciliationData) {\r\n        // Assurons-nous que le statut correspond aux valeurs attendues\r\n        const typedStatus = domiciliationData.status as\r\n          | \"active\"\r\n          | \"inactive\"\r\n          | \"pending\";\r\n\r\n        setDomiciliation({\r\n          id: domiciliationData.id,\r\n          user_id: domiciliationData.user_id,\r\n          status: typedStatus,\r\n          address: domiciliationData.address,\r\n          renewal_date: domiciliationData.renewal_date,\r\n          plan_type: domiciliationData.plan_type,\r\n          duration: domiciliationData.duration,\r\n          created_at: domiciliationData.created_at,\r\n        });\r\n      } else {\r\n        // Sinon, utilisez des valeurs par défaut\r\n        // console.log('Aucune information de domiciliation trouvée, utilisation des valeurs par défaut');\r\n        setDomiciliation({\r\n          user_id: session.user.id,\r\n          status: \"pending\",\r\n          address: \"En attente de validation\",\r\n          renewal_date: new Date().toISOString(),\r\n        });\r\n      }\r\n\r\n      // Récupérer les services de l'utilisateur depuis Supabase\r\n      const { data: servicesData, error: servicesError } = await supabase\r\n        .from(\"user_services\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", session.user.id);\r\n\r\n      if (servicesError) {\r\n        console.error(\r\n          \"Erreur lors de la récupération des services:\",\r\n          servicesError\r\n        );\r\n      }\r\n\r\n      // Si des services sont trouvés, utilisez-les\r\n      if (servicesData && servicesData.length > 0) {\r\n        setUserServices(\r\n          servicesData.map((service) => ({\r\n            id: service.id,\r\n            user_id: service.user_id,\r\n            name: service.name,\r\n            // Assurons-nous que le statut correspond aux valeurs attendues\r\n            status: service.status as\r\n              | \"active\"\r\n              | \"inactive\"\r\n              | \"pending\"\r\n              | \"option\",\r\n            price: service.price || undefined,\r\n            renewal_date: service.renewal_date,\r\n            // Assurons-nous que la catégorie correspond aux valeurs attendues\r\n            category: service.category as\r\n              | \"domiciliation\"\r\n              | \"admin\"\r\n              | \"marketing\"\r\n              | \"complementary\",\r\n            created_at: service.created_at,\r\n            updated_at: service.updated_at,\r\n          }))\r\n        );\r\n      } else {\r\n        // Loggez que nous n'avons pas trouvé de services\r\n        // console.log(\"Aucun service trouvé pour cet utilisateur\");\r\n        setUserServices([]);\r\n      }\r\n\r\n      // Pour les fonctionnalités qui ne sont pas encore implémentées dans la base de données,\r\n      // nous utilisons des données temporaires\r\n      setMails([\r\n        {\r\n          id: \"1\",\r\n          user_id: session.user.id,\r\n          subject: \"Impôts - Déclaration TVA\",\r\n          received_at: new Date().toISOString(),\r\n          status: \"new\",\r\n        },\r\n        {\r\n          id: \"2\",\r\n          user_id: session.user.id,\r\n          subject: \"Facture Électricité\",\r\n          received_at: new Date(Date.now() - 86400000).toISOString(),\r\n          status: \"new\",\r\n        },\r\n        {\r\n          id: \"3\",\r\n          user_id: session.user.id,\r\n          subject: \"Contrat Fournisseur\",\r\n          received_at: new Date(Date.now() - 172800000).toISOString(),\r\n          status: \"new\",\r\n        },\r\n      ]);\r\n\r\n      setNotifications([\r\n        {\r\n          id: \"1\",\r\n          user_id: session.user.id,\r\n          message: \"Nouveau courrier reçu\",\r\n          created_at: new Date().toISOString(),\r\n          read: false,\r\n        },\r\n        {\r\n          id: \"2\",\r\n          user_id: session.user.id,\r\n          message: \"Document numérisé disponible\",\r\n          created_at: new Date(Date.now() - 86400000).toISOString(),\r\n          read: false,\r\n        },\r\n      ]);\r\n\r\n      setActivities([\r\n        {\r\n          id: \"1\",\r\n          user_id: session.user.id,\r\n          type: \"mail\",\r\n          title: \"Nouveau courrier reçu\",\r\n          description: \"Impôts - Déclaration TVA\",\r\n          created_at: new Date().toISOString(),\r\n        },\r\n        {\r\n          id: \"2\",\r\n          user_id: session.user.id,\r\n          type: \"document\",\r\n          title: \"Document numérisé\",\r\n          description: \"Contrat_Prestation_2025.pdf\",\r\n          created_at: new Date(Date.now() - 86400000).toISOString(),\r\n        },\r\n        {\r\n          id: \"3\",\r\n          user_id: session.user.id,\r\n          type: \"message\",\r\n          title: \"Message de votre assistant\",\r\n          description: \"Mise à jour de vos documents légaux\",\r\n          created_at: new Date(Date.now() - 172800000).toISOString(),\r\n        },\r\n      ]);\r\n\r\n      setDocuments([\r\n        {\r\n          id: \"1\",\r\n          user_id: session.user.id,\r\n          name: \"Facture_Mars2025.pdf\",\r\n          created_at: \"2025-04-01T10:00:00Z\",\r\n          type: \"Comptabilité\",\r\n        },\r\n        {\r\n          id: \"2\",\r\n          user_id: session.user.id,\r\n          name: \"PV_AG_2025.pdf\",\r\n          created_at: \"2025-03-15T14:30:00Z\",\r\n          type: \"Juridique\",\r\n        },\r\n      ]);\r\n\r\n      // Filtrer les services administratifs depuis les userServices\r\n      const adminServicesList = userServices\r\n        .filter((service) => service.category === \"admin\")\r\n        .map((service) => ({\r\n          id: service.id,\r\n          user_id: service.user_id,\r\n          service: service.name,\r\n          next_processing:\r\n            service.renewal_date ||\r\n            new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\r\n          status: service.status as \"pending\" | \"active\" | \"completed\",\r\n        }));\r\n\r\n      setAdminServices(\r\n        adminServicesList.length > 0\r\n          ? adminServicesList\r\n          : [\r\n              {\r\n                id: \"1\",\r\n                user_id: session.user.id,\r\n                service: \"Déclaration TVA\",\r\n                next_processing: \"2025-05-05T00:00:00Z\",\r\n                status: \"pending\",\r\n              },\r\n              {\r\n                id: \"2\",\r\n                user_id: session.user.id,\r\n                service: \"Gestion comptable\",\r\n                next_processing: \"2025-04-30T00:00:00Z\",\r\n                status: \"active\",\r\n              },\r\n              {\r\n                id: \"3\",\r\n                user_id: session.user.id,\r\n                service: \"Secrétariat juridique\",\r\n                next_processing: \"2025-05-15T00:00:00Z\",\r\n                status: \"active\",\r\n              },\r\n            ]\r\n      );\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n      toast({\r\n        title: \"Erreur\",\r\n        description: \"Impossible de récupérer les informations utilisateur\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  // Function to update user profile\r\n  const updateProfile = async (updatedProfile: Partial<UserProfile>) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from(\"profiles\")\r\n        .update(updatedProfile)\r\n        .eq(\"id\", profile?.id);\r\n\r\n      if (error) throw error;\r\n\r\n      // Refresh data\r\n      toast({\r\n        title: \"Succès\",\r\n        description: \"Votre profil a été mis à jour\",\r\n      });\r\n\r\n      await fetchUserData();\r\n      return true;\r\n    } catch (err: any) {\r\n      toast({\r\n        title: \"Erreur\",\r\n        description: err.message || \"Impossible de mettre à jour le profil\",\r\n        variant: \"destructive\",\r\n      });\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Function to update domiciliation information\r\n  const updateDomiciliation = async (\r\n    updatedDomiciliation: Partial<UserDomiciliation>\r\n  ) => {\r\n    try {\r\n      if (domiciliation?.id) {\r\n        // Mise à jour d'une domiciliation existante\r\n        const { error } = await supabase\r\n          .from(\"user_domiciliations\")\r\n          .update({\r\n            ...updatedDomiciliation,\r\n            updated_at: new Date().toISOString(),\r\n          })\r\n          .eq(\"id\", domiciliation.id);\r\n\r\n        if (error) throw error;\r\n      } else {\r\n        // Création d'une nouvelle domiciliation\r\n        const { error } = await supabase.from(\"user_domiciliations\").insert({\r\n          ...updatedDomiciliation,\r\n          address: updatedDomiciliation.address || \"En attente de validation\",\r\n          user_id: profile?.id,\r\n        });\r\n\r\n        if (error) throw error;\r\n      }\r\n\r\n      toast({\r\n        title: \"Succès\",\r\n        description: \"Informations de domiciliation mises à jour\",\r\n      });\r\n\r\n      await fetchUserData();\r\n      return true;\r\n    } catch (err: any) {\r\n      toast({\r\n        title: \"Erreur\",\r\n        description:\r\n          err.message ||\r\n          \"Impossible de mettre à jour les informations de domiciliation\",\r\n        variant: \"destructive\",\r\n      });\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Add or update a user service\r\n  const updateUserService = async (service: Partial<UserService>) => {\r\n    try {\r\n      if (service.id) {\r\n        // Mise à jour d'un service existant\r\n        const { error } = await supabase\r\n          .from(\"user_services\")\r\n          .update({\r\n            ...service,\r\n            updated_at: new Date().toISOString(),\r\n          })\r\n          .eq(\"id\", service.id);\r\n\r\n        if (error) throw error;\r\n      } else {\r\n        // Création d'un nouveau service\r\n        const { error } = await supabase.from(\"user_services\").insert({\r\n          name: service.name || \"\",\r\n          category: service.category || \"domiciliation\",\r\n          status: service.status || \"active\",\r\n          user_id: profile?.id,\r\n        });\r\n\r\n        if (error) throw error;\r\n      }\r\n\r\n      toast({\r\n        title: \"Succès\",\r\n        description: \"Service mis à jour avec succès\",\r\n      });\r\n\r\n      await fetchUserData();\r\n      return true;\r\n    } catch (err: any) {\r\n      toast({\r\n        title: \"Erreur\",\r\n        description: err.message || \"Impossible de mettre à jour le service\",\r\n        variant: \"destructive\",\r\n      });\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Function to mark mail as read\r\n  const markMailAsRead = async (mailId: string) => {\r\n    try {\r\n      // In a production app, we would update the mail in Supabase\r\n      // For now, we'll just update the state\r\n      setMails((prev) =>\r\n        prev.map((mail) =>\r\n          mail.id === mailId ? { ...mail, status: \"read\" } : mail\r\n        )\r\n      );\r\n\r\n      return true;\r\n    } catch (err: any) {\r\n      toast({\r\n        title: \"Erreur\",\r\n        description: \"Impossible de marquer le courrier comme lu\",\r\n        variant: \"destructive\",\r\n      });\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Function to mark notification as read\r\n  const markNotificationAsRead = async (notificationId: string) => {\r\n    try {\r\n      // In a production app, we would update the notification in Supabase\r\n      // For now, we'll just update the state\r\n      setNotifications((prev) =>\r\n        prev.map((notification) =>\r\n          notification.id === notificationId\r\n            ? { ...notification, read: true }\r\n            : notification\r\n        )\r\n      );\r\n\r\n      return true;\r\n    } catch (err: any) {\r\n      toast({\r\n        title: \"Erreur\",\r\n        description: \"Impossible de marquer la notification comme lue\",\r\n        variant: \"destructive\",\r\n      });\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return {\r\n    profile,\r\n    domiciliation,\r\n    userServices,\r\n    mails,\r\n    notifications,\r\n    activities,\r\n    documents,\r\n    adminServices,\r\n    loading,\r\n    error,\r\n    updateProfile,\r\n    updateDomiciliation,\r\n    updateUserService,\r\n    markMailAsRead,\r\n    markNotificationAsRead,\r\n    refreshUserData: fetchUserData,\r\n  };\r\n}\r\n"
        }
    ]
}