{
    "sourceFile": "src/screens/Dashboard.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 37,
            "patches": [
                {
                    "date": 1752739708622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752740085981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,13 +181,12 @@\n           }\r\n         );\r\n         const data = await res.json();\r\n         if (!res.ok || !data.success) {\r\n-          toast({\r\n-            title: \"Erreur\",\r\n-            description: \"Le remboursement ou l'envoi de mails a échoué.\",\r\n-            variant: \"destructive\",\r\n-          });\r\n+          Alert.alert(\r\n+            \"Erreur\",\r\n+            \"Le remboursement ou l'envoi de mails a échoué.\"\r\n+          );\r\n           return;\r\n         }\r\n       } catch (err) {\r\n         toast({\r\n"
                },
                {
                    "date": 1752740117638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,13 +188,13 @@\n           );\r\n           return;\r\n         }\r\n       } catch (err) {\r\n-        toast({\r\n-          title: \"Erreur\",\r\n-          description: \"Erreur lors du remboursement ou de l'envoi de mails.\",\r\n-          variant: \"destructive\",\r\n-        });\r\n+        Alert.alert(\r\n+          \"Erreur\",\r\n+          \"Erreur lors du remboursement ou de l'envoi de mails.\"\r\n+        );\r\n+\r\n         return;\r\n       }\r\n     }\r\n \r\n"
                },
                {
                    "date": 1752740130958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,13 +200,10 @@\n \r\n     // Suppression en base de données\r\n     const { error } = await supabase.from(\"reservations\").delete().eq(\"id\", id);\r\n     if (error) {\r\n-      toast({\r\n-        title: \"Erreur\",\r\n-        description: \"Impossible de supprimer la réservation en base.\",\r\n-        variant: \"destructive\",\r\n-      });\r\n+      Alert.alert(\"Erreur\", \"Impossible de supprimer la réservation.\");\r\n+\r\n       return;\r\n     }\r\n \r\n     setReservations((prev) => prev.filter((r) => r.id !== id));\r\n"
                },
                {
                    "date": 1752740145143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,9 @@\n       return;\r\n     }\r\n \r\n     setReservations((prev) => prev.filter((r) => r.id !== id));\r\n-    toast({ title: \"Réservation annulée et remboursée\" });\r\n+    Alert.alert(\"Succès\", \"Réservation annulée et remboursée.\");\r\n   };\r\n \r\n   // Vérifier la session utilisateur et rediriger si nécessaire\r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1752740171262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,14 +218,13 @@\n           data: { session },\r\n         } = await supabase.auth.getSession();\r\n \r\n         if (!session) {\r\n-          toast({\r\n-            title: \"Accès non autorisé\",\r\n-            description:\r\n-              \"Veuillez vous connecter pour accéder à votre tableau de bord\",\r\n-            variant: \"destructive\",\r\n-          });\r\n+          Alert.alert(\r\n+            \"Accès non autorisé\",\r\n+            \"Veuillez vous connecter pour accéder.\"\r\n+          );\r\n+\r\n           navigate(\"/login\");\r\n           return;\r\n         }\r\n       } catch (error) {\r\n"
                },
                {
                    "date": 1752740186032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,10 +222,9 @@\n           Alert.alert(\r\n             \"Accès non autorisé\",\r\n             \"Veuillez vous connecter pour accéder.\"\r\n           );\r\n-\r\n-          navigate(\"/login\");\r\n+          navigation.navigate(\"Login\");\r\n           return;\r\n         }\r\n       } catch (error) {\r\n         navigate(\"/login\");\r\n"
                },
                {
                    "date": 1752740196810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n           navigation.navigate(\"Login\");\r\n           return;\r\n         }\r\n       } catch (error) {\r\n-        navigate(\"/login\");\r\n+        navigation.navigate(\"login\");\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n     };\r\n"
                },
                {
                    "date": 1752740209680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,9 +236,9 @@\n     checkUser();\r\n \r\n     const { data: authListener } = supabase.auth.onAuthStateChange((event) => {\r\n       if (event === \"SIGNED_OUT\") {\r\n-        navigate(\"/login\");\r\n+        navigation.navigate(\"Login\");\r\n       }\r\n     });\r\n     return () => {\r\n       authListener.subscription.unsubscribe();\r\n"
                },
                {
                    "date": 1752740268434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n     });\r\n     return () => {\r\n       authListener.subscription.unsubscribe();\r\n     };\r\n-  }, [navigate]);\r\n+  }, [navigation]);\r\n \r\n   // Récupérer les abonnements et factures Stripe\r\n   useEffect(() => {\r\n     if (!profile?.id) return;\r\n"
                },
                {
                    "date": 1752740410642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n   const [isAdmin, setIsAdmin] = useState<boolean | null>(null);\r\n   const [profile, setProfile] = useState<any>(null);\r\n   const [documents, setDocuments] = useState<any[]>([]);\r\n   const [reservations, setReservations] = useState<any[]>([]);\r\n+  const [stripeSubscriptions, setStripeSubscriptions] = useState<any[]>([]);\r\n \r\n   // Charger le profil utilisateur\r\n   useEffect(() => {\r\n     const fetchProfile = async () => {\r\n"
                },
                {
                    "date": 1752740435382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n   const [profile, setProfile] = useState<any>(null);\r\n   const [documents, setDocuments] = useState<any[]>([]);\r\n   const [reservations, setReservations] = useState<any[]>([]);\r\n   const [stripeSubscriptions, setStripeSubscriptions] = useState<any[]>([]);\r\n+  const [stripeInvoices, setStripeInvoices] = useState<any[]>([]);\r\n \r\n   // Charger le profil utilisateur\r\n   useEffect(() => {\r\n     const fetchProfile = async () => {\r\n"
                },
                {
                    "date": 1752740463859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,13 +318,10 @@\n         }\r\n       );\r\n       const data = await res.json();\r\n       if (!data.url) {\r\n-        toast({\r\n-          title: \"Erreur\",\r\n-          description: \"Impossible d'obtenir l'URL du portail Stripe.\",\r\n-          variant: \"destructive\",\r\n-        });\r\n+        Alert.alert(\"Erreur\", \"Impossible d'obtenir l'URL du portail Stripe.\");\r\n+\r\n         return;\r\n       }\r\n       window.location.href = data.url;\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1752740494821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -324,13 +324,9 @@\n         return;\r\n       }\r\n       window.location.href = data.url;\r\n     } catch (error) {\r\n-      toast({\r\n-        title: \"Erreur\",\r\n-        description: \"Une erreur est survenue avec le portail client.\",\r\n-        variant: \"destructive\",\r\n-      });\r\n+      alert(\"Une erreur est survenue avec le portail client.\");\r\n     }\r\n   };\r\n \r\n   const formatDate = (dateInput: string | number): string => {\r\n"
                },
                {
                    "date": 1752740575848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n import Navbar from \"@/src/components/Navbar\";\r\n import type { RootStackParamList } from \"@/src/navigation/types\";\r\n import { useNavigation } from \"@react-navigation/native\";\r\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\n+import { format } from \"date-fns\";\r\n+import { fr } from \"date-fns/locale\";\r\n import React, { useEffect, useState } from \"react\";\r\n import { ActivityIndicator, Alert, View } from \"react-native\";\r\n \r\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n"
                },
                {
                    "date": 1752740612766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,18 +339,38 @@\n       return String(dateInput);\r\n     }\r\n   };\r\n \r\n-  const getStatusBadge = (status: string) => {\r\n+  const getStatusBadge = (status) => {\r\n     switch (status) {\r\n       case \"active\":\r\n-        return <Badge className=\"bg-green-500\">Actif</Badge>;\r\n+        return (\r\n+          <Text\r\n+            style={{ backgroundColor: \"green\", color: \"white\", padding: 4 }}\r\n+          >\r\n+            Actif\r\n+          </Text>\r\n+        );\r\n       case \"option\":\r\n-        return <Badge className=\"bg-amber-500\">En option</Badge>;\r\n+        return (\r\n+          <Text\r\n+            style={{ backgroundColor: \"orange\", color: \"white\", padding: 4 }}\r\n+          >\r\n+            En option\r\n+          </Text>\r\n+        );\r\n       case \"pending\":\r\n-        return <Badge className=\"bg-blue-500\">En attente</Badge>;\r\n+        return (\r\n+          <Text style={{ backgroundColor: \"blue\", color: \"white\", padding: 4 }}>\r\n+            En attente\r\n+          </Text>\r\n+        );\r\n       default:\r\n-        return <Badge className=\"bg-gray-500\">{status}</Badge>;\r\n+        return (\r\n+          <Text style={{ backgroundColor: \"gray\", color: \"white\", padding: 4 }}>\r\n+            {status}\r\n+          </Text>\r\n+        );\r\n     }\r\n   };\r\n \r\n   if (loading || userDataLoading) {\r\n"
                },
                {
                    "date": 1752740720450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,35 +339,71 @@\n       return String(dateInput);\r\n     }\r\n   };\r\n \r\n-  const getStatusBadge = (status) => {\r\n+  const getStatusBadge = (status: string) => {\r\n     switch (status) {\r\n       case \"active\":\r\n         return (\r\n           <Text\r\n-            style={{ backgroundColor: \"green\", color: \"white\", padding: 4 }}\r\n+            style={{\r\n+              backgroundColor: \"green\",\r\n+              color: \"white\",\r\n+              paddingVertical: 4,\r\n+              paddingHorizontal: 8,\r\n+              borderRadius: 4,\r\n+              overflow: \"hidden\",\r\n+              fontSize: 12,\r\n+            }}\r\n           >\r\n             Actif\r\n           </Text>\r\n         );\r\n       case \"option\":\r\n         return (\r\n           <Text\r\n-            style={{ backgroundColor: \"orange\", color: \"white\", padding: 4 }}\r\n+            style={{\r\n+              backgroundColor: \"orange\",\r\n+              color: \"white\",\r\n+              paddingVertical: 4,\r\n+              paddingHorizontal: 8,\r\n+              borderRadius: 4,\r\n+              overflow: \"hidden\",\r\n+              fontSize: 12,\r\n+            }}\r\n           >\r\n             En option\r\n           </Text>\r\n         );\r\n       case \"pending\":\r\n         return (\r\n-          <Text style={{ backgroundColor: \"blue\", color: \"white\", padding: 4 }}>\r\n+          <Text\r\n+            style={{\r\n+              backgroundColor: \"blue\",\r\n+              color: \"white\",\r\n+              paddingVertical: 4,\r\n+              paddingHorizontal: 8,\r\n+              borderRadius: 4,\r\n+              overflow: \"hidden\",\r\n+              fontSize: 12,\r\n+            }}\r\n+          >\r\n             En attente\r\n           </Text>\r\n         );\r\n       default:\r\n         return (\r\n-          <Text style={{ backgroundColor: \"gray\", color: \"white\", padding: 4 }}>\r\n+          <Text\r\n+            style={{\r\n+              backgroundColor: \"gray\",\r\n+              color: \"white\",\r\n+              paddingVertical: 4,\r\n+              paddingHorizontal: 8,\r\n+              borderRadius: 4,\r\n+              overflow: \"hidden\",\r\n+              fontSize: 12,\r\n+            }}\r\n+          >\r\n             {status}\r\n           </Text>\r\n         );\r\n     }\r\n"
                },
                {
                    "date": 1752740795844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\n import { format } from \"date-fns\";\r\n import { fr } from \"date-fns/locale\";\r\n import React, { useEffect, useState } from \"react\";\r\n-import { ActivityIndicator, Alert, View } from \"react-native\";\r\n+import { ActivityIndicator, Alert, Text, View } from \"react-native\";\r\n \r\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n \r\n const Dashboard = () => {\r\n"
                },
                {
                    "date": 1752740838048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -410,11 +410,11 @@\n   };\r\n \r\n   if (loading || userDataLoading) {\r\n     return (\r\n-      <div className=\"flex items-center justify-center h-screen\">\r\n-        <div className=\"animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-lysco-turquoise\"></div>\r\n-      </div>\r\n+      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n+        <ActivityIndicator size=\"large\" color=\"#00bcd4\" />\r\n+      </View>\r\n     );\r\n   }\r\n \r\n   if (error) {\r\n"
                },
                {
                    "date": 1752743152217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,14 +15,21 @@\n const Dashboard = () => {\r\n   const navigation = useNavigation<NavigationProp>();\r\n   const [loading, setLoading] = useState(true);\r\n   const [isAdmin, setIsAdmin] = useState<boolean | null>(null);\r\n-  const [profile, setProfile] = useState<any>(null);\r\n+  const [setProfile] = useState<any>(null);\r\n   const [documents, setDocuments] = useState<any[]>([]);\r\n   const [reservations, setReservations] = useState<any[]>([]);\r\n   const [stripeSubscriptions, setStripeSubscriptions] = useState<any[]>([]);\r\n   const [stripeInvoices, setStripeInvoices] = useState<any[]>([]);\r\n \r\n+  const {\r\n+    profile,\r\n+    loading: userDataLoading,\r\n+    error,\r\n+    updateProfile,\r\n+  } = useUserData();\r\n+\r\n   // Charger le profil utilisateur\r\n   useEffect(() => {\r\n     const fetchProfile = async () => {\r\n       const {\r\n"
                },
                {
                    "date": 1752743183473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n // Dashboard.tsx\r\n import { supabase } from \"@/integrations/supabase/client\";\r\n import Footer from \"@/src/components/Footer\";\r\n import Navbar from \"@/src/components/Navbar\";\r\n+import { useUserData } from \"@/src/hooks/useUserData\";\r\n import type { RootStackParamList } from \"@/src/navigation/types\";\r\n import { useNavigation } from \"@react-navigation/native\";\r\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\n import { format } from \"date-fns\";\r\n"
                },
                {
                    "date": 1752743251709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -430,11 +430,11 @@\n       <div className=\"flex flex-col items-center justify-center h-screen\">\r\n         <p className=\"text-red-500 text-xl mb-4\">\r\n           Une erreur est survenue lors du chargement de vos données\r\n         </p>\r\n-        <Button onClick={() => navigate(\"/login\")}>\r\n+        {/* <Button onClick={() => navigation.navigate(\"login\")}>\r\n           Retourner à l'accueil\r\n-        </Button>\r\n+        </Button> */}\r\n       </div>\r\n     );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1752743277221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n   const [documents, setDocuments] = useState<any[]>([]);\r\n   const [reservations, setReservations] = useState<any[]>([]);\r\n   const [stripeSubscriptions, setStripeSubscriptions] = useState<any[]>([]);\r\n   const [stripeInvoices, setStripeInvoices] = useState<any[]>([]);\r\n+  const [isEditingProfile, setIsEditingProfile] = useState(false);\r\n \r\n   const {\r\n     profile,\r\n     loading: userDataLoading,\r\n"
                },
                {
                    "date": 1752743544097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,9 @@\n               }\r\n \r\n               Alert.alert(\"Succès\", \"Votre compte a été désactivé.\");\r\n               await supabase.auth.signOut();\r\n-              navigation.navigate(\"Login\");\r\n+              navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n             } catch (err) {\r\n               console.error(err);\r\n               Alert.alert(\"Erreur\", \"Impossible de contacter le serveur.\");\r\n             }\r\n@@ -235,13 +235,13 @@\n           Alert.alert(\r\n             \"Accès non autorisé\",\r\n             \"Veuillez vous connecter pour accéder.\"\r\n           );\r\n-          navigation.navigate(\"Login\");\r\n+          navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n           return;\r\n         }\r\n       } catch (error) {\r\n-        navigation.navigate(\"login\");\r\n+        navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n     };\r\n@@ -249,9 +249,9 @@\n     checkUser();\r\n \r\n     const { data: authListener } = supabase.auth.onAuthStateChange((event) => {\r\n       if (event === \"SIGNED_OUT\") {\r\n-        navigation.navigate(\"Login\");\r\n+        navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n       }\r\n     });\r\n     return () => {\r\n       authListener.subscription.unsubscribe();\r\n@@ -431,11 +431,15 @@\n       <div className=\"flex flex-col items-center justify-center h-screen\">\r\n         <p className=\"text-red-500 text-xl mb-4\">\r\n           Une erreur est survenue lors du chargement de vos données\r\n         </p>\r\n-        {/* <Button onClick={() => navigation.navigate(\"login\")}>\r\n+        <Button\r\n+          onClick={() =>\r\n+            navigation.navigate(\"Login\", { redirect: \"Dashboard\" })\r\n+          }\r\n+        >\r\n           Retourner à l'accueil\r\n-        </Button> */}\r\n+        </Button>\r\n       </div>\r\n     );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1752743697913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n // Dashboard.tsx\r\n import { supabase } from \"@/integrations/supabase/client\";\r\n import Footer from \"@/src/components/Footer\";\r\n import Navbar from \"@/src/components/Navbar\";\r\n+import { Button } from \"@/src/components/ui/button\";\r\n import { useUserData } from \"@/src/hooks/useUserData\";\r\n import type { RootStackParamList } from \"@/src/navigation/types\";\r\n import { useNavigation } from \"@react-navigation/native\";\r\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\n"
                },
                {
                    "date": 1752743759584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -439,8 +439,15 @@\n           }\r\n         >\r\n           Retourner à l'accueil\r\n         </Button>\r\n+        <Button\r\n+          variant=\"destructive\"\r\n+          size=\"lg\"\r\n+          onPress={() => console.log(\"Clicked!\")}\r\n+        >\r\n+          Supprimer\r\n+        </Button>\r\n       </div>\r\n     );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1752743810895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -433,21 +433,14 @@\n         <p className=\"text-red-500 text-xl mb-4\">\r\n           Une erreur est survenue lors du chargement de vos données\r\n         </p>\r\n         <Button\r\n-          onClick={() =>\r\n+          onPress={() =>\r\n             navigation.navigate(\"Login\", { redirect: \"Dashboard\" })\r\n           }\r\n         >\r\n           Retourner à l'accueil\r\n         </Button>\r\n-        <Button\r\n-          variant=\"destructive\"\r\n-          size=\"lg\"\r\n-          onPress={() => console.log(\"Clicked!\")}\r\n-        >\r\n-          Supprimer\r\n-        </Button>\r\n       </div>\r\n     );\r\n   }\r\n \r\n@@ -489,9 +482,9 @@\n               </CardTitle>\r\n               <Button\r\n                 variant=\"outline\"\r\n                 size=\"sm\"\r\n-                onClick={() => setIsEditingProfile(true)}\r\n+                onPress={() => setIsEditingProfile(true)}\r\n               >\r\n                 Modifier mon profil\r\n               </Button>\r\n             </CardHeader>\r\n@@ -533,9 +526,9 @@\n                 <p className=\"text-sm text-gray-500 mb-2\">\r\n                   Cette action est irréversible. Toutes vos données seront\r\n                   supprimées.\r\n                 </p>\r\n-                <Button variant=\"destructive\" onClick={handleDeleteAccount}>\r\n+                <Button variant=\"destructive\" onPress={handleDeleteAccount}>\r\n                   Supprimer définitivement mon compte\r\n                 </Button>\r\n               </div>\r\n             </CardContent>\r\n@@ -643,9 +636,9 @@\n                               ) && (\r\n                                 <Button\r\n                                   variant=\"destructive\"\r\n                                   size=\"sm\"\r\n-                                  onClick={() =>\r\n+                                  onPress={() =>\r\n                                     handleCancelReservation(\r\n                                       res.id,\r\n                                       res.payment_intent_id,\r\n                                       profile?.email,\r\n@@ -666,9 +659,9 @@\n                                   Annulation impossible (moins de 48h)\r\n                                 </span>\r\n                               )}\r\n                             <Button\r\n-                              onClick={async () => {\r\n+                              onPress={async () => {\r\n                                 setCalendarError(null);\r\n                                 try {\r\n                                   console.log(\r\n                                     \"=== 🕵️ Début bouton calendrier ===\"\r\n@@ -823,9 +816,9 @@\n                             ))}\r\n                         </div>\r\n                       ))}\r\n                     </div>\r\n-                    <Button className=\"mt-4\" onClick={handleOpenStripePortal}>\r\n+                    <Button className=\"mt-4\" onPress={handleOpenStripePortal}>\r\n                       Gérer mes abonnements\r\n                     </Button>\r\n                   </CardContent>\r\n                 </Card>\r\n"
                },
                {
                    "date": 1752743892945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n // Dashboard.tsx\r\n+import ProfileEditForm from \"@/components/dashboard/ProfileEditForm\";\r\n import { supabase } from \"@/integrations/supabase/client\";\r\n import Footer from \"@/src/components/Footer\";\r\n import Navbar from \"@/src/components/Navbar\";\r\n import { Button } from \"@/src/components/ui/button\";\r\n"
                },
                {
                    "date": 1752743998861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // Dashboard.tsx\r\n-import ProfileEditForm from \"@/components/dashboard/ProfileEditForm\";\r\n import { supabase } from \"@/integrations/supabase/client\";\r\n+import ProfileEditForm from \"@/src/components/dashboard/ProfileEditForm\";\r\n import Footer from \"@/src/components/Footer\";\r\n import Navbar from \"@/src/components/Navbar\";\r\n import { Button } from \"@/src/components/ui/button\";\r\n import { useUserData } from \"@/src/hooks/useUserData\";\r\n"
                },
                {
                    "date": 1752744385533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n // Dashboard.tsx\r\n import { supabase } from \"@/integrations/supabase/client\";\r\n-import ProfileEditForm from \"@/src/components/dashboard/ProfileEditForm\";\r\n import Footer from \"@/src/components/Footer\";\r\n import Navbar from \"@/src/components/Navbar\";\r\n import { Button } from \"@/src/components/ui/button\";\r\n import { useUserData } from \"@/src/hooks/useUserData\";\r\n@@ -10,9 +9,18 @@\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\n import { format } from \"date-fns\";\r\n import { fr } from \"date-fns/locale\";\r\n import React, { useEffect, useState } from \"react\";\r\n-import { ActivityIndicator, Alert, Text, View } from \"react-native\";\r\n+import {\r\n+  ActivityIndicator,\r\n+  Alert,\r\n+  Linking,\r\n+  ScrollView,\r\n+  StyleSheet,\r\n+  Text,\r\n+  TouchableOpacity,\r\n+  View,\r\n+} from \"react-native\";\r\n \r\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n \r\n const Dashboard = () => {\r\n@@ -429,457 +437,251 @@\n   }\r\n \r\n   if (error) {\r\n     return (\r\n-      <div className=\"flex flex-col items-center justify-center h-screen\">\r\n-        <p className=\"text-red-500 text-xl mb-4\">\r\n+      <View className=\"flex flex-col items-center justify-center h-screen\">\r\n+        <Text className=\"text-red-500 text-xl mb-4\">\r\n           Une erreur est survenue lors du chargement de vos données\r\n-        </p>\r\n+        </Text>\r\n         <Button\r\n           onPress={() =>\r\n             navigation.navigate(\"Login\", { redirect: \"Dashboard\" })\r\n           }\r\n         >\r\n           Retourner à l'accueil\r\n         </Button>\r\n-      </div>\r\n+      </View>\r\n     );\r\n   }\r\n \r\n   if (isEditingProfile) {\r\n     return (\r\n-      <div className=\"flex flex-col min-h-screen\">\r\n+      <View className=\"flex flex-col min-h-screen\">\r\n         <Navbar />\r\n         <main className=\"flex-1 container mx-auto px-4 py-8\">\r\n-          <ProfileEditForm\r\n+          <TextrofileEditForm\r\n             profile={profile}\r\n             onUpdate={updateProfile}\r\n             onCancel={() => setIsEditingProfile(false)}\r\n           />\r\n         </main>\r\n         <Footer />\r\n-      </div>\r\n+      </View>\r\n     );\r\n   }\r\n \r\n   return (\r\n-    <div className=\"flex flex-col min-h-screen\">\r\n-      <Navbar />\r\n-      <main className=\"flex-1 container mx-auto px-4 py-8\">\r\n-        <div className=\"mb-8\">\r\n-          <h1 className=\"text-3xl font-bold\">Tableau de bord</h1>\r\n-          <p className=\"text-gray-600\">\r\n-            Bienvenue sur votre espace personnel Lys&Co,{\" \"}\r\n-            {profile?.first_name || profile?.email}\r\n-          </p>\r\n-        </div>\r\n+    <ScrollView contentContainerStyle={styles.container}>\r\n+      <Text style={styles.title}>Tableau de bord</Text>\r\n+      <Text style={styles.subtitle}>\r\n+        Bienvenue sur votre espace personnel Lys&Co,{\" \"}\r\n+        {profile?.first_name || profile?.email}\r\n+      </Text>\r\n \r\n-        <div className=\"grid grid-cols-1 gap-8\">\r\n-          {/* Profil utilisateur */}\r\n-          <Card>\r\n-            <CardHeader className=\"flex flex-row items-center justify-between\">\r\n-              <CardTitle className=\"text-xl flex items-center\">\r\n-                <User className=\"mr-2 h-5 w-5 text-lysco-turquoise\" />\r\n-                Mon Profil\r\n-              </CardTitle>\r\n-              <Button\r\n-                variant=\"outline\"\r\n-                size=\"sm\"\r\n-                onPress={() => setIsEditingProfile(true)}\r\n-              >\r\n-                Modifier mon profil\r\n-              </Button>\r\n-            </CardHeader>\r\n-            <CardContent>\r\n-              <div className=\"flex flex-col md:flex-row gap-6\">\r\n-                <div className=\"flex-1 space-y-3\">\r\n-                  <div>\r\n-                    <p className=\"text-sm text-gray-600\">Nom</p>\r\n-                    <p className=\"font-medium\">\r\n-                      {profile?.first_name} {profile?.last_name}\r\n-                    </p>\r\n-                  </div>\r\n-                  <div>\r\n-                    <p className=\"text-sm text-gray-600\">Email</p>\r\n-                    <p className=\"font-medium\">{profile?.email}</p>\r\n-                  </div>\r\n-                </div>\r\n-                <div className=\"flex-1 space-y-3\">\r\n-                  <div>\r\n-                    <p className=\"text-sm text-gray-600\">Entreprise</p>\r\n-                    <p className=\"font-medium\">\r\n-                      {profile?.company_name || \"Non renseigné\"}\r\n-                    </p>\r\n-                  </div>\r\n-                  <div>\r\n-                    <p className=\"text-sm text-gray-600\">Téléphone</p>\r\n-                    <p className=\"font-medium\">\r\n-                      {profile?.phone || \"Non renseigné\"}\r\n-                    </p>\r\n-                  </div>\r\n-                </div>\r\n-              </div>\r\n-            </CardContent>\r\n-            <CardContent className=\"border-t pt-4\">\r\n-              <div className=\"mt-6\">\r\n-                <h3 className=\"text-red-600 font-semibold mb-2\">\r\n-                  Suppression de compte\r\n-                </h3>\r\n-                <p className=\"text-sm text-gray-500 mb-2\">\r\n-                  Cette action est irréversible. Toutes vos données seront\r\n-                  supprimées.\r\n-                </p>\r\n-                <Button variant=\"destructive\" onPress={handleDeleteAccount}>\r\n-                  Supprimer définitivement mon compte\r\n-                </Button>\r\n-              </div>\r\n-            </CardContent>\r\n-          </Card>\r\n+      {/* Mon Profil */}\r\n+      <View style={styles.card}>\r\n+        <Text style={styles.cardTitle}>Mon Profil</Text>\r\n+        <View style={styles.row}>\r\n+          <View style={styles.column}>\r\n+            <Text style={styles.label}>Nom</Text>\r\n+            <Text style={styles.value}>\r\n+              {profile?.first_name} {profile?.last_name}\r\n+            </Text>\r\n+            <Text style={styles.label}>Email</Text>\r\n+            <Text style={styles.value}>{profile?.email}</Text>\r\n+          </View>\r\n+          <View style={styles.column}>\r\n+            <Text style={styles.label}>Entreprise</Text>\r\n+            <Text style={styles.value}>\r\n+              {profile?.company_name || \"Non renseigné\"}\r\n+            </Text>\r\n+            <Text style={styles.label}>Téléphone</Text>\r\n+            <Text style={styles.value}>\r\n+              {profile?.phone || \"Non renseigné\"}\r\n+            </Text>\r\n+          </View>\r\n+        </View>\r\n+        <TouchableOpacity\r\n+          style={styles.buttonOutline}\r\n+          onPress={() => setIsEditingProfile(true)}\r\n+        >\r\n+          <Text style={styles.buttonOutlineText}>Modifier mon profil</Text>\r\n+        </TouchableOpacity>\r\n \r\n-          {isAdmin ? (\r\n-            <AdminDashboard />\r\n-          ) : (\r\n-            <>\r\n-              {/* Mes documents */}\r\n-              <Card>\r\n-                <CardHeader>\r\n-                  <CardTitle className=\"text-2xl font-semibold flex items-center gap-2\">\r\n-                    <FileText className=\"w-5 h-5 text-lysco-turquoise\" />\r\n-                    Mes documents\r\n-                  </CardTitle>\r\n-                </CardHeader>\r\n-                <CardContent>\r\n-                  {loadingDocuments ? (\r\n-                    <p>Chargement des documents…</p>\r\n-                  ) : documents.length === 0 ? (\r\n-                    <p>Aucun document disponible.</p>\r\n-                  ) : (\r\n-                    <ul className=\"space-y-4\">\r\n-                      {documents.map((doc) => (\r\n-                        <li\r\n-                          key={doc.id}\r\n-                          className=\"bg-gray-50 border border-gray-200 rounded-lg p-4 flex flex-col sm:flex-row\r\n-                                     justify-between items-start sm:items-center shadow-sm\"\r\n-                        >\r\n-                          <div className=\"flex-1\">\r\n-                            <p className=\"text-gray-800 font-medium\">\r\n-                              {doc.file_name}\r\n-                            </p>\r\n-                            <p className=\"text-sm text-gray-500 mt-1\">\r\n-                              {new Date(doc.uploaded_at).toLocaleDateString(\r\n-                                \"fr-FR\",\r\n-                                {\r\n-                                  day: \"2-digit\",\r\n-                                  month: \"long\",\r\n-                                  year: \"numeric\",\r\n-                                  hour: \"2-digit\",\r\n-                                  minute: \"2-digit\",\r\n-                                }\r\n-                              )}\r\n-                            </p>\r\n-                            <a\r\n-                              href={doc.file_url}\r\n-                              target=\"_blank\"\r\n-                              rel=\"noopener noreferrer\"\r\n-                              className=\"inline-block mt-2 text-sm text-blue-600 hover:underline\"\r\n-                            >\r\n-                              Télécharger\r\n-                            </a>\r\n-                          </div>\r\n-                        </li>\r\n-                      ))}\r\n-                    </ul>\r\n-                  )}\r\n-                </CardContent>\r\n-              </Card>\r\n+        <Text style={styles.dangerTitle}>Suppression de compte</Text>\r\n+        <Text style={styles.smallText}>\r\n+          Cette action est irréversible. Toutes vos données seront supprimées.\r\n+        </Text>\r\n+        <TouchableOpacity\r\n+          style={styles.buttonDanger}\r\n+          onPress={handleDeleteAccount}\r\n+        >\r\n+          <Text style={styles.buttonText}>\r\n+            Supprimer définitivement mon compte\r\n+          </Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n \r\n-              {/* Mes réservations */}\r\n-              <Card>\r\n-                <CardHeader>\r\n-                  <CardTitle className=\"text-2xl font-semibold flex items-center gap-2\">\r\n-                    <Calendar className=\"w-5 h-5 text-lysco-turquoise\" />\r\n-                    Mes réservations de salles\r\n-                  </CardTitle>\r\n-                </CardHeader>\r\n-                <CardContent>\r\n-                  {loadingReservations ? (\r\n-                    <div>Chargement…</div>\r\n-                  ) : reservations.length === 0 ? (\r\n-                    <div>Aucune réservation trouvée.</div>\r\n-                  ) : (\r\n-                    <div className=\"grid md:grid-cols-2 gap-4\">\r\n-                      {reservations.map((res) => (\r\n-                        <div\r\n-                          key={res.id}\r\n-                          className=\"border rounded-xl p-4 shadow-sm bg-white\"\r\n-                        >\r\n-                          <p className=\"mb-1\">\r\n-                            Date : {formatDate(res.reservation_date)}\r\n-                          </p>\r\n-                          <p className=\"mb-1\">\r\n-                            Heure :{\" \"}\r\n-                            {res.start_time\r\n-                              ? `${res.start_time} - ${res.end_time}`\r\n-                              : \"Journée/Demi-journée\"}\r\n-                          </p>\r\n-                          <p className=\"mb-1\">\r\n-                            Type :{\" \"}\r\n-                            {humanizeReservationType(res.reservation_type)}\r\n-                          </p>\r\n-                          <div className=\"mb-1 flex items-center gap-2\">\r\n-                            <span>Statut :</span>\r\n-                            {getStatusBadge(res.status)}\r\n-                          </div>\r\n-                          <div className=\"flex flex-col gap-2 w-max\">\r\n-                            {res.status !== \"cancelled\" &&\r\n-                              canCancel(\r\n-                                res.reservation_date,\r\n-                                res.start_time\r\n-                              ) && (\r\n-                                <Button\r\n-                                  variant=\"destructive\"\r\n-                                  size=\"sm\"\r\n-                                  onPress={() =>\r\n-                                    handleCancelReservation(\r\n-                                      res.id,\r\n-                                      res.payment_intent_id,\r\n-                                      profile?.email,\r\n-                                      res.reservation_date,\r\n-                                      res.reservation_type\r\n-                                    )\r\n-                                  }\r\n-                                >\r\n-                                  Annuler\r\n-                                </Button>\r\n-                              )}\r\n-                            {res.status !== \"cancelled\" &&\r\n-                              !canCancel(\r\n-                                res.reservation_date,\r\n-                                res.start_time\r\n-                              ) && (\r\n-                                <span className=\"text-xs text-gray-500\">\r\n-                                  Annulation impossible (moins de 48h)\r\n-                                </span>\r\n-                              )}\r\n-                            <Button\r\n-                              onPress={async () => {\r\n-                                setCalendarError(null);\r\n-                                try {\r\n-                                  console.log(\r\n-                                    \"=== 🕵️ Début bouton calendrier ===\"\r\n-                                  );\r\n+      {/* Documents */}\r\n+      <View style={styles.card}>\r\n+        <Text style={styles.cardTitle}>Mes documents</Text>\r\n+        {loadingDocuments ? (\r\n+          <ActivityIndicator />\r\n+        ) : documents.length === 0 ? (\r\n+          <Text>Aucun document disponible.</Text>\r\n+        ) : (\r\n+          documents.map((doc) => (\r\n+            <View key={doc.id} style={styles.item}>\r\n+              <Text>{doc.file_name}</Text>\r\n+              <Text>{new Date(doc.uploaded_at).toLocaleDateString()}</Text>\r\n+              <TouchableOpacity onPress={() => Linking.openURL(doc.file_url)}>\r\n+                <Text style={styles.link}>Télécharger</Text>\r\n+              </TouchableOpacity>\r\n+            </View>\r\n+          ))\r\n+        )}\r\n+      </View>\r\n \r\n-                                  const rawPeriod = res.period;\r\n-                                  console.log(\"rawPeriod:\", rawPeriod);\r\n+      {/* Réservations */}\r\n+      <View style={styles.card}>\r\n+        <Text style={styles.cardTitle}>Mes réservations de salles</Text>\r\n+        {loadingReservations ? (\r\n+          <ActivityIndicator />\r\n+        ) : reservations.length === 0 ? (\r\n+          <Text>Aucune réservation trouvée.</Text>\r\n+        ) : (\r\n+          reservations.map((res) => (\r\n+            <View key={res.id} style={styles.item}>\r\n+              <Text>Date: {formatDate(res.reservation_date)}</Text>\r\n+              <Text>\r\n+                Heure:{\" \"}\r\n+                {res.start_time\r\n+                  ? `${res.start_time} - ${res.end_time}`\r\n+                  : \"Journée/Demi-journée\"}\r\n+              </Text>\r\n+              <Text>Type: {humanizeReservationType(res.reservation_type)}</Text>\r\n+              <Text>Statut: {getStatusBadge(res.status)}</Text>\r\n+              {res.status !== \"cancelled\" &&\r\n+                canCancel(res.reservation_date, res.start_time) && (\r\n+                  <TouchableOpacity\r\n+                    style={styles.buttonDanger}\r\n+                    onPress={() =>\r\n+                      handleCancelReservation(\r\n+                        res.id,\r\n+                        res.payment_intent_id,\r\n+                        profile?.email,\r\n+                        res.reservation_date,\r\n+                        res.reservation_type\r\n+                      )\r\n+                    }\r\n+                  >\r\n+                    <Text style={styles.buttonText}>Annuler</Text>\r\n+                  </TouchableOpacity>\r\n+                )}\r\n+            </View>\r\n+          ))\r\n+        )}\r\n+      </View>\r\n \r\n-                                  const [startStr, endStr] = rawPeriod\r\n-                                    .replace(/^\\[|\\)$|\\\"/g, \"\")\r\n-                                    .split(\",\");\r\n-                                  console.log(\"startStr brut:\", startStr);\r\n-                                  console.log(\"endStr brut:\", endStr);\r\n-\r\n-                                  const safeStartStr = startStr\r\n-                                    .trim()\r\n-                                    .replace(\" \", \"T\")\r\n-                                    .replace(\"+00\", \"Z\");\r\n-                                  const safeEndStr = endStr\r\n-                                    .trim()\r\n-                                    .replace(\" \", \"T\")\r\n-                                    .replace(\"+00\", \"Z\");\r\n-\r\n-                                  const startDate = new Date(safeStartStr);\r\n-                                  const endDate = new Date(safeEndStr);\r\n-\r\n-                                  if (\r\n-                                    isNaN(startDate.getTime()) ||\r\n-                                    isNaN(endDate.getTime())\r\n-                                  ) {\r\n-                                    throw new Error(\r\n-                                      \"La date de réservation est invalide\"\r\n-                                    );\r\n-                                  }\r\n-                                  if (startDate >= endDate) {\r\n-                                    throw new Error(\r\n-                                      \"La date de fin doit être postérieure au début\"\r\n-                                    );\r\n-                                  }\r\n-\r\n-                                  console.log(\"✅ Dates sans décalage :\");\r\n-                                  console.log(\r\n-                                    \"Start UTC:\",\r\n-                                    startDate.toISOString()\r\n-                                  );\r\n-                                  console.log(\r\n-                                    \"End UTC:\",\r\n-                                    endDate.toISOString()\r\n-                                  );\r\n-\r\n-                                  await addToCalendar({\r\n-                                    title: `Réservation ${humanizeReservationType(\r\n-                                      res.reservation_type\r\n-                                    )}`,\r\n-                                    startDate, // directement les Date en UTC, sans modifier\r\n-                                    endDate,\r\n-                                    location: \"Lys&Co\",\r\n-                                    notes: `Type: ${res.reservation_type}`,\r\n-                                    alarm: true,\r\n-                                  });\r\n-\r\n-                                  toast({\r\n-                                    title: \"✅ Ajouté au calendrier\",\r\n-                                    description:\r\n-                                      \"La réservation a été enregistrée dans votre calendrier\",\r\n-                                  });\r\n-                                } catch (error) {\r\n-                                  console.error(\"💥 ERREUR CATCH:\", error);\r\n-                                  let errorMessage =\r\n-                                    \"Une erreur inattendue est survenue\";\r\n-                                  if (error instanceof Error) {\r\n-                                    errorMessage = error.message;\r\n-                                    if (\r\n-                                      error.message.includes(\r\n-                                        \"must be JavaScript Date Objects\"\r\n-                                      )\r\n-                                    ) {\r\n-                                      errorMessage =\r\n-                                        \"Format de date incompatible avec le calendrier\";\r\n-                                    }\r\n-                                  }\r\n-                                  setCalendarError(errorMessage);\r\n-                                  toast({\r\n-                                    title: \"❌ Erreur d'ajout au calendrier\",\r\n-                                    description: errorMessage,\r\n-                                    variant: \"destructive\",\r\n-                                  });\r\n-                                }\r\n-                              }}\r\n-                              disabled={!res.reservation_date}\r\n-                            >\r\n-                              <Calendar className=\"h-4 w-4 mr-2\" />\r\n-                              Ajouter au calendrier\r\n-                            </Button>\r\n-                          </div>\r\n-                          {calendarError && (\r\n-                            <div style={{ color: \"red\", marginTop: \"8px\" }}>\r\n-                              {calendarError}\r\n-                            </div>\r\n-                          )}\r\n-                          <div>\r\n-                            Cordova détecté :{\" \"}\r\n-                            {String(!!(window as any).cordova)}\r\n-                          </div>\r\n-                          <div>\r\n-                            Plugin calendar :{\" \"}\r\n-                            {String(!!(window as any).plugins?.calendar)}\r\n-                          </div>\r\n-                        </div>\r\n-                      ))}\r\n-                    </div>\r\n-                  )}\r\n-                </CardContent>\r\n-              </Card>\r\n-\r\n-              {/* Abonnements Stripe */}\r\n-              {stripeSubscriptions.length > 0 && (\r\n-                <Card>\r\n-                  <CardHeader>\r\n-                    <CardTitle className=\"text-2xl font-semibold flex items-center gap-2\">\r\n-                      <List className=\"w-5 h-5 text-lysco-turquoise\" />\r\n-                      Mes abonnements\r\n-                    </CardTitle>\r\n-                  </CardHeader>\r\n-                  <CardContent>\r\n-                    <div className=\"grid md:grid-cols-2 gap-4\">\r\n-                      {stripeSubscriptions.map((sub) => (\r\n-                        <div\r\n-                          key={sub.id}\r\n-                          className=\"border rounded-xl p-4 shadow-sm bg-white\"\r\n-                        >\r\n-                          <div className=\"mb-1 flex items-center gap-2\">\r\n-                            <span>Statut :</span>\r\n-                            {getStatusBadge(sub.status)}\r\n-                          </div>\r\n-                          <p className=\"mb-1\">\r\n-                            Début : {formatDate(sub.start_date * 1000)}\r\n-                          </p>\r\n-                          {sub.cancel_at && (\r\n-                            <p className=\"mb-1\">\r\n-                              Fin prévue : {formatDate(sub.cancel_at * 1000)}\r\n-                            </p>\r\n-                          )}\r\n-                          {sub.items?.data?.length > 0 &&\r\n-                            sub.items.data.map((item) => (\r\n-                              <p key={item.id} className=\"mb-1\">\r\n-                                Produit :{\" \"}\r\n-                                <span className=\"font-medium\">\r\n-                                  {item.product_name || \"Nom inconnu\"}\r\n-                                </span>\r\n-                              </p>\r\n-                            ))}\r\n-                        </div>\r\n-                      ))}\r\n-                    </div>\r\n-                    <Button className=\"mt-4\" onPress={handleOpenStripePortal}>\r\n-                      Gérer mes abonnements\r\n-                    </Button>\r\n-                  </CardContent>\r\n-                </Card>\r\n+      {/* Abonnements Stripe */}\r\n+      {stripeSubscriptions.length > 0 && (\r\n+        <View style={styles.card}>\r\n+          <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n+          {stripeSubscriptions.map((sub) => (\r\n+            <View key={sub.id} style={styles.item}>\r\n+              <Text>Statut: {getStatusBadge(sub.status)}</Text>\r\n+              <Text>Début: {formatDate(sub.start_date * 1000)}</Text>\r\n+              {sub.cancel_at && (\r\n+                <Text>Fin prévue: {formatDate(sub.cancel_at * 1000)}</Text>\r\n               )}\r\n+              {sub.items?.data?.map((item) => (\r\n+                <Text key={item.id}>\r\n+                  Produit: {item.product_name || \"Nom inconnu\"}\r\n+                </Text>\r\n+              ))}\r\n+            </View>\r\n+          ))}\r\n+          <TouchableOpacity\r\n+            style={styles.buttonPrimary}\r\n+            onPress={handleOpenStripePortal}\r\n+          >\r\n+            <Text style={styles.buttonText}>Gérer mes abonnements</Text>\r\n+          </TouchableOpacity>\r\n+        </View>\r\n+      )}\r\n \r\n-              {/* Factures Stripe */}\r\n-              {stripeInvoices.length > 0 && (\r\n-                <Card>\r\n-                  <CardHeader>\r\n-                    <CardTitle className=\"text-2xl font-semibold flex items-center gap-2\">\r\n-                      <ShoppingCart className=\"w-5 h-5 text-lysco-turquoise\" />\r\n-                      Mes factures d'abonnement\r\n-                    </CardTitle>\r\n-                  </CardHeader>\r\n-                  <CardContent>\r\n-                    <div className=\"grid md:grid-cols-2 gap-4\">\r\n-                      {stripeInvoices.map((invoice) => (\r\n-                        <div\r\n-                          key={invoice.id}\r\n-                          className=\"border rounded-xl p-4 shadow-sm bg-white\"\r\n-                        >\r\n-                          <p className=\"mb-1\">\r\n-                            Montant payé :{\" \"}\r\n-                            <strong>\r\n-                              {(invoice.amount_paid / 100).toFixed(2)} €\r\n-                            </strong>\r\n-                          </p>\r\n-                          <p className=\"mb-1\">\r\n-                            🗓 Date : {formatDate(invoice.created * 1000)}\r\n-                          </p>\r\n-                          {invoice.lines?.data?.length > 0 &&\r\n-                            invoice.lines.data.map((line) => (\r\n-                              <p key={line.id} className=\"mb-1\">\r\n-                                🏷 Produit :{\" \"}\r\n-                                <span className=\"font-medium\">\r\n-                                  {line.product_name || \"Nom inconnu\"}\r\n-                                </span>\r\n-                              </p>\r\n-                            ))}\r\n-                          <a\r\n-                            href={invoice.invoice_pdf}\r\n-                            target=\"_blank\"\r\n-                            rel=\"noopener noreferrer\"\r\n-                            className=\"text-blue-600 underline\"\r\n-                          >\r\n-                            Télécharger la facture\r\n-                          </a>\r\n-                        </div>\r\n-                      ))}\r\n-                    </div>\r\n-                  </CardContent>\r\n-                </Card>\r\n-              )}\r\n-            </>\r\n-          )}\r\n-        </div>\r\n-      </main>\r\n-      <Footer />\r\n-    </div>\r\n+      {/* Factures Stripe */}\r\n+      {stripeInvoices.length > 0 && (\r\n+        <View style={styles.card}>\r\n+          <Text style={styles.cardTitle}>Mes factures d'abonnement</Text>\r\n+          {stripeInvoices.map((invoice) => (\r\n+            <View key={invoice.id} style={styles.item}>\r\n+              <Text>\r\n+                Montant payé: {(invoice.amount_paid / 100).toFixed(2)} €\r\n+              </Text>\r\n+              <Text>Date: {formatDate(invoice.created * 1000)}</Text>\r\n+              {invoice.lines?.data?.map((line) => (\r\n+                <Text key={line.id}>\r\n+                  Produit: {line.product_name || \"Nom inconnu\"}\r\n+                </Text>\r\n+              ))}\r\n+              <TouchableOpacity\r\n+                onPress={() => Linking.openURL(invoice.invoice_pdf)}\r\n+              >\r\n+                <Text style={styles.link}>Télécharger la facture</Text>\r\n+              </TouchableOpacity>\r\n+            </View>\r\n+          ))}\r\n+        </View>\r\n+      )}\r\n+    </ScrollView>\r\n   );\r\n };\r\n \r\n-export default Dashboard;\r\n+const styles = StyleSheet.create({\r\n+  container: { padding: 16 },\r\n+  title: { fontSize: 24, fontWeight: \"bold\", marginBottom: 12 },\r\n+  subtitle: { fontSize: 16, marginBottom: 20 },\r\n+  card: {\r\n+    backgroundColor: \"#fff\",\r\n+    borderRadius: 8,\r\n+    padding: 16,\r\n+    marginBottom: 16,\r\n+    elevation: 2,\r\n+  },\r\n+  cardTitle: { fontSize: 18, fontWeight: \"bold\", marginBottom: 12 },\r\n+  row: { flexDirection: \"row\", justifyContent: \"space-between\" },\r\n+  column: { flex: 1 },\r\n+  label: { fontSize: 14, color: \"#666\" },\r\n+  value: { fontSize: 16, fontWeight: \"500\", marginBottom: 8 },\r\n+  buttonPrimary: {\r\n+    backgroundColor: \"#4f46e5\",\r\n+    padding: 10,\r\n+    borderRadius: 6,\r\n+    marginTop: 8,\r\n+  },\r\n+  buttonOutline: {\r\n+    borderColor: \"#4f46e5\",\r\n+    borderWidth: 1,\r\n+    padding: 10,\r\n+    borderRadius: 6,\r\n+    marginTop: 8,\r\n+  },\r\n+  buttonDanger: {\r\n+    backgroundColor: \"#dc2626\",\r\n+    padding: 10,\r\n+    borderRadius: 6,\r\n+    marginTop: 8,\r\n+  },\r\n+  buttonText: { color: \"#fff\", textAlign: \"center\", fontWeight: \"bold\" },\r\n+  buttonOutlineText: {\r\n+    color: \"#4f46e5\",\r\n+    textAlign: \"center\",\r\n+    fontWeight: \"bold\",\r\n+  },\r\n+  item: { marginBottom: 12 },\r\n+  link: { color: \"#2563eb\", textDecorationLine: \"underline\" },\r\n+  dangerTitle: { color: \"#dc2626\", fontWeight: \"bold\", marginTop: 12 },\r\n+  smallText: { fontSize: 12, color: \"#666\", marginBottom: 8 },\r\n+});\r\n+\r\n+export default DashboardScreen;\r\n"
                },
                {
                    "date": 1752744420734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n   const [reservations, setReservations] = useState<any[]>([]);\r\n   const [stripeSubscriptions, setStripeSubscriptions] = useState<any[]>([]);\r\n   const [stripeInvoices, setStripeInvoices] = useState<any[]>([]);\r\n   const [isEditingProfile, setIsEditingProfile] = useState(false);\r\n+  const [loadingDocuments, setLoadingDocuments] = useState(false);\r\n \r\n   const {\r\n     profile,\r\n     loading: userDataLoading,\r\n"
                },
                {
                    "date": 1752744442527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n   const [stripeSubscriptions, setStripeSubscriptions] = useState<any[]>([]);\r\n   const [stripeInvoices, setStripeInvoices] = useState<any[]>([]);\r\n   const [isEditingProfile, setIsEditingProfile] = useState(false);\r\n   const [loadingDocuments, setLoadingDocuments] = useState(false);\r\n+  const [loadingReservations, setLoadingReservations] = useState(true);\r\n \r\n   const {\r\n     profile,\r\n     loading: userDataLoading,\r\n"
                },
                {
                    "date": 1752744483835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import Navbar from \"@/src/components/Navbar\";\r\n import { Button } from \"@/src/components/ui/button\";\r\n import { useUserData } from \"@/src/hooks/useUserData\";\r\n import type { RootStackParamList } from \"@/src/navigation/types\";\r\n+import { humanizeReservationType } from \"@/src/utils/humanize\";\r\n import { useNavigation } from \"@react-navigation/native\";\r\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\n import { format } from \"date-fns\";\r\n import { fr } from \"date-fns/locale\";\r\n"
                },
                {
                    "date": 1752744532771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -600,8 +600,13 @@\n                 <Text key={item.id}>\r\n                   Produit: {item.product_name || \"Nom inconnu\"}\r\n                 </Text>\r\n               ))}\r\n+              {sub.items?.data?.map((item: any) => (\r\n+                <Text key={item.id}>\r\n+                  Produit: {item.product_name || \"Nom inconnu\"}\r\n+                </Text>\r\n+              ))}\r\n             </View>\r\n           ))}\r\n           <TouchableOpacity\r\n             style={styles.buttonPrimary}\r\n"
                },
                {
                    "date": 1752744571184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -595,13 +595,8 @@\n               <Text>Début: {formatDate(sub.start_date * 1000)}</Text>\r\n               {sub.cancel_at && (\r\n                 <Text>Fin prévue: {formatDate(sub.cancel_at * 1000)}</Text>\r\n               )}\r\n-              {sub.items?.data?.map((item) => (\r\n-                <Text key={item.id}>\r\n-                  Produit: {item.product_name || \"Nom inconnu\"}\r\n-                </Text>\r\n-              ))}\r\n               {sub.items?.data?.map((item: any) => (\r\n                 <Text key={item.id}>\r\n                   Produit: {item.product_name || \"Nom inconnu\"}\r\n                 </Text>\r\n@@ -626,9 +621,9 @@\n               <Text>\r\n                 Montant payé: {(invoice.amount_paid / 100).toFixed(2)} €\r\n               </Text>\r\n               <Text>Date: {formatDate(invoice.created * 1000)}</Text>\r\n-              {invoice.lines?.data?.map((line) => (\r\n+              {invoice.lines?.data?.map((line: any) => (\r\n                 <Text key={line.id}>\r\n                   Produit: {line.product_name || \"Nom inconnu\"}\r\n                 </Text>\r\n               ))}\r\n@@ -691,5 +686,5 @@\n   dangerTitle: { color: \"#dc2626\", fontWeight: \"bold\", marginTop: 12 },\r\n   smallText: { fontSize: 12, color: \"#666\", marginBottom: 8 },\r\n });\r\n \r\n-export default DashboardScreen;\r\n+export default Dashboard;\r\n"
                },
                {
                    "date": 1752744639103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -460,9 +460,9 @@\n     return (\r\n       <View className=\"flex flex-col min-h-screen\">\r\n         <Navbar />\r\n         <main className=\"flex-1 container mx-auto px-4 py-8\">\r\n-          <TextrofileEditForm\r\n+          <ProfileEditForm\r\n             profile={profile}\r\n             onUpdate={updateProfile}\r\n             onCancel={() => setIsEditingProfile(false)}\r\n           />\r\n"
                },
                {
                    "date": 1752744705396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n // Dashboard.tsx\r\n import { supabase } from \"@/integrations/supabase/client\";\r\n+import ProfileEditForm from \"@/src/components/dashboard/ProfileEditForm\";\r\n import Footer from \"@/src/components/Footer\";\r\n import Navbar from \"@/src/components/Navbar\";\r\n import { Button } from \"@/src/components/ui/button\";\r\n import { useUserData } from \"@/src/hooks/useUserData\";\r\n"
                },
                {
                    "date": 1752745279499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,691 @@\n+// Dashboard.tsx\r\n+import { supabase } from \"@/integrations/supabase/client.js\";\r\n+import ProfileEditForm from \"@/src/components/dashboard/ProfileEditForm.js\";\r\n+import Footer from \"@/src/components/Footer.js\";\r\n+import Navbar from \"@/src/components/Navbar.js\";\r\n+import { Button } from \"@/src/components/ui/button.js\";\r\n+import { useUserData } from \"@/src/hooks/useUserData.js\";\r\n+import type { RootStackParamList } from \"@/src/navigation/types.js\";\r\n+import { humanizeReservationType } from \"@/src/utils/humanize.js\";\r\n+import { useNavigation } from \"@react-navigation/native\";\r\n+import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\n+import { format } from \"date-fns\";\r\n+import { fr } from \"date-fns/locale\";\r\n+import React, { useEffect, useState } from \"react\";\r\n+import {\r\n+  ActivityIndicator,\r\n+  Alert,\r\n+  Linking,\r\n+  ScrollView,\r\n+  StyleSheet,\r\n+  Text,\r\n+  TouchableOpacity,\r\n+  View,\r\n+} from \"react-native\";\r\n+\r\n+type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n+\r\n+const Dashboard = () => {\r\n+  const navigation = useNavigation<NavigationProp>();\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [isAdmin, setIsAdmin] = useState<boolean | null>(null);\r\n+  const [setProfile] = useState<any>(null);\r\n+  const [documents, setDocuments] = useState<any[]>([]);\r\n+  const [reservations, setReservations] = useState<any[]>([]);\r\n+  const [stripeSubscriptions, setStripeSubscriptions] = useState<any[]>([]);\r\n+  const [stripeInvoices, setStripeInvoices] = useState<any[]>([]);\r\n+  const [isEditingProfile, setIsEditingProfile] = useState(false);\r\n+  const [loadingDocuments, setLoadingDocuments] = useState(false);\r\n+  const [loadingReservations, setLoadingReservations] = useState(true);\r\n+\r\n+  const {\r\n+    profile,\r\n+    loading: userDataLoading,\r\n+    error,\r\n+    updateProfile,\r\n+  } = useUserData();\r\n+\r\n+  // Charger le profil utilisateur\r\n+  useEffect(() => {\r\n+    const fetchProfile = async () => {\r\n+      const {\r\n+        data: { user },\r\n+      } = await supabase.auth.getUser();\r\n+\r\n+      if (!user) {\r\n+        setIsAdmin(false);\r\n+        setLoading(false);\r\n+        return;\r\n+      }\r\n+\r\n+      const { data, error } = await supabase\r\n+        .from(\"profiles\")\r\n+        .select(\"*\")\r\n+        .eq(\"id\", user.id)\r\n+        .single();\r\n+\r\n+      if (error) {\r\n+        console.error(\"Erreur récupération profil:\", error.message);\r\n+      } else {\r\n+        setProfile(data);\r\n+        setIsAdmin(data?.is_admin ?? false);\r\n+      }\r\n+      setLoading(false);\r\n+    };\r\n+\r\n+    fetchProfile();\r\n+  }, []);\r\n+\r\n+  // Charger les documents\r\n+  useEffect(() => {\r\n+    const fetchDocuments = async () => {\r\n+      if (!profile?.id || isAdmin) return;\r\n+      const { data, error } = await supabase\r\n+        .from(\"user_documents\")\r\n+        .select(\"*\")\r\n+        .eq(\"user_id\", profile.id)\r\n+        .order(\"uploaded_at\", { ascending: false });\r\n+\r\n+      if (error) {\r\n+        console.error(\"Erreur chargement documents:\", error);\r\n+      } else {\r\n+        setDocuments(data || []);\r\n+      }\r\n+    };\r\n+\r\n+    fetchDocuments();\r\n+  }, [profile, isAdmin]);\r\n+\r\n+  // Charger les réservations\r\n+  useEffect(() => {\r\n+    const fetchReservations = async () => {\r\n+      if (!profile?.id) return;\r\n+      const { data, error } = await supabase\r\n+        .from(\"reservations\")\r\n+        .select(\"*\")\r\n+        .eq(\"user_id\", profile.id)\r\n+        .order(\"reservation_date\", { ascending: false });\r\n+\r\n+      if (error) {\r\n+        console.error(\"Erreur chargement reservations:\", error);\r\n+      } else {\r\n+        setReservations(data || []);\r\n+      }\r\n+    };\r\n+\r\n+    fetchReservations();\r\n+  }, [profile]);\r\n+\r\n+  // Supprimer le compte\r\n+  const handleDeleteAccount = async () => {\r\n+    Alert.alert(\r\n+      \"Confirmation\",\r\n+      \"Voulez-vous vraiment désactiver votre compte ?\",\r\n+      [\r\n+        {\r\n+          text: \"Annuler\",\r\n+          style: \"cancel\",\r\n+        },\r\n+        {\r\n+          text: \"Confirmer\",\r\n+          onPress: async () => {\r\n+            if (!profile?.id || !profile?.email) return;\r\n+\r\n+            try {\r\n+              const res = await fetch(\r\n+                \"https://mon-backend-node.vercel.app/api/disable-account\",\r\n+                {\r\n+                  method: \"POST\",\r\n+                  headers: { \"Content-Type\": \"application/json\" },\r\n+                  body: JSON.stringify({\r\n+                    id: profile.id,\r\n+                    email: profile.email,\r\n+                    first_name: profile.first_name,\r\n+                    last_name: profile.last_name,\r\n+                    frontendUrl: process.env.EXPO_PUBLIC_APP_URL,\r\n+                  }),\r\n+                }\r\n+              );\r\n+\r\n+              if (!res.ok) {\r\n+                Alert.alert(\"Erreur\", \"Problème lors de la désactivation.\");\r\n+                return;\r\n+              }\r\n+\r\n+              Alert.alert(\"Succès\", \"Votre compte a été désactivé.\");\r\n+              await supabase.auth.signOut();\r\n+              navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n+            } catch (err) {\r\n+              console.error(err);\r\n+              Alert.alert(\"Erreur\", \"Impossible de contacter le serveur.\");\r\n+            }\r\n+          },\r\n+        },\r\n+      ]\r\n+    );\r\n+  };\r\n+\r\n+  if (loading) {\r\n+    return (\r\n+      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n+        <ActivityIndicator size=\"large\" color=\"#00bcd4\" />\r\n+      </View>\r\n+    );\r\n+  }\r\n+\r\n+  const canCancel = (reservationDate: string, startTime: string) => {\r\n+    const dateTime = new Date(`${reservationDate}T${startTime || \"09:00:00\"}`);\r\n+    const now = new Date();\r\n+    const diff = dateTime.getTime() - now.getTime();\r\n+    return diff > 48 * 60 * 60 * 1000; // 48h en ms\r\n+  };\r\n+\r\n+  const handleCancelReservation = async (\r\n+    id: string,\r\n+    paymentIntentId?: string,\r\n+    userEmail?: string,\r\n+    reservationDate?: string,\r\n+    reservationType?: string\r\n+  ) => {\r\n+    if (!window.confirm(\"Confirmer l'annulation de cette réservation ?\")) {\r\n+      return;\r\n+    }\r\n+\r\n+    // Partie remboursement Stripe + envoi mails\r\n+    if (paymentIntentId && userEmail) {\r\n+      try {\r\n+        const res = await fetch(\r\n+          \"https://mon-backend-node.vercel.app/api/refund-stripe-payment\",\r\n+          {\r\n+            method: \"POST\",\r\n+            headers: { \"Content-Type\": \"application/json\" },\r\n+            body: JSON.stringify({\r\n+              paymentIntentId,\r\n+              userEmail,\r\n+              reservationDate,\r\n+              reservationType,\r\n+            }),\r\n+          }\r\n+        );\r\n+        const data = await res.json();\r\n+        if (!res.ok || !data.success) {\r\n+          Alert.alert(\r\n+            \"Erreur\",\r\n+            \"Le remboursement ou l'envoi de mails a échoué.\"\r\n+          );\r\n+          return;\r\n+        }\r\n+      } catch (err) {\r\n+        Alert.alert(\r\n+          \"Erreur\",\r\n+          \"Erreur lors du remboursement ou de l'envoi de mails.\"\r\n+        );\r\n+\r\n+        return;\r\n+      }\r\n+    }\r\n+\r\n+    // Suppression en base de données\r\n+    const { error } = await supabase.from(\"reservations\").delete().eq(\"id\", id);\r\n+    if (error) {\r\n+      Alert.alert(\"Erreur\", \"Impossible de supprimer la réservation.\");\r\n+\r\n+      return;\r\n+    }\r\n+\r\n+    setReservations((prev) => prev.filter((r) => r.id !== id));\r\n+    Alert.alert(\"Succès\", \"Réservation annulée et remboursée.\");\r\n+  };\r\n+\r\n+  // Vérifier la session utilisateur et rediriger si nécessaire\r\n+  useEffect(() => {\r\n+    const checkUser = async () => {\r\n+      try {\r\n+        const {\r\n+          data: { session },\r\n+        } = await supabase.auth.getSession();\r\n+\r\n+        if (!session) {\r\n+          Alert.alert(\r\n+            \"Accès non autorisé\",\r\n+            \"Veuillez vous connecter pour accéder.\"\r\n+          );\r\n+          navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n+          return;\r\n+        }\r\n+      } catch (error) {\r\n+        navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    checkUser();\r\n+\r\n+    const { data: authListener } = supabase.auth.onAuthStateChange((event) => {\r\n+      if (event === \"SIGNED_OUT\") {\r\n+        navigation.navigate(\"Login\", { redirect: \"Dashboard\" });\r\n+      }\r\n+    });\r\n+    return () => {\r\n+      authListener.subscription.unsubscribe();\r\n+    };\r\n+  }, [navigation]);\r\n+\r\n+  // Récupérer les abonnements et factures Stripe\r\n+  useEffect(() => {\r\n+    if (!profile?.id) return;\r\n+    const fetchStripeData = async () => {\r\n+      const { data: profileData, error: profileError } = await supabase\r\n+        .from(\"profiles\")\r\n+        .select(\"stripe_customer_id\")\r\n+        .eq(\"id\", profile.id)\r\n+        .maybeSingle();\r\n+\r\n+      if (profileError) {\r\n+        console.error(\r\n+          \"❌ Erreur Supabase lors de la récupération du profil :\",\r\n+          profileError\r\n+        );\r\n+        return;\r\n+      }\r\n+\r\n+      if (!profileData?.stripe_customer_id) {\r\n+        return;\r\n+      }\r\n+\r\n+      try {\r\n+        const res = await fetch(\r\n+          \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n+          {\r\n+            method: \"POST\",\r\n+            headers: { \"Content-Type\": \"application/json\" },\r\n+            body: JSON.stringify({\r\n+              stripeCustomerId: profileData.stripe_customer_id,\r\n+            }),\r\n+          }\r\n+        );\r\n+        const stripeData = await res.json();\r\n+        setStripeSubscriptions(stripeData.subscriptions || []);\r\n+        setStripeInvoices(stripeData.invoices || []);\r\n+      } catch (error) {\r\n+        console.error(\"❌ Erreur lors de l'appel à Stripe :\", error);\r\n+      }\r\n+    };\r\n+\r\n+    fetchStripeData();\r\n+  }, [profile]);\r\n+\r\n+  const handleOpenStripePortal = async () => {\r\n+    if (!profile?.id) return;\r\n+\r\n+    const { data: profileData, error: profileError } = await supabase\r\n+      .from(\"profiles\")\r\n+      .select(\"stripe_customer_id\")\r\n+      .eq(\"id\", profile.id)\r\n+      .maybeSingle();\r\n+\r\n+    if (profileError) {\r\n+      console.error(\"Erreur lors de la récupération du profil :\", profileError);\r\n+      return;\r\n+    }\r\n+    if (!profileData?.stripe_customer_id) return;\r\n+\r\n+    try {\r\n+      const res = await fetch(\r\n+        \"https://mon-backend-node.vercel.app/api/create-stripe-portal-session\",\r\n+        {\r\n+          method: \"POST\",\r\n+          headers: { \"Content-Type\": \"application/json\" },\r\n+          body: JSON.stringify({\r\n+            stripeCustomerId: profileData.stripe_customer_id,\r\n+          }),\r\n+        }\r\n+      );\r\n+      const data = await res.json();\r\n+      if (!data.url) {\r\n+        Alert.alert(\"Erreur\", \"Impossible d'obtenir l'URL du portail Stripe.\");\r\n+\r\n+        return;\r\n+      }\r\n+      window.location.href = data.url;\r\n+    } catch (error) {\r\n+      alert(\"Une erreur est survenue avec le portail client.\");\r\n+    }\r\n+  };\r\n+\r\n+  const formatDate = (dateInput: string | number): string => {\r\n+    try {\r\n+      const date = new Date(dateInput);\r\n+      return format(date, \"dd/MM/yyyy\", { locale: fr });\r\n+    } catch {\r\n+      return String(dateInput);\r\n+    }\r\n+  };\r\n+\r\n+  const getStatusBadge = (status: string) => {\r\n+    switch (status) {\r\n+      case \"active\":\r\n+        return (\r\n+          <Text\r\n+            style={{\r\n+              backgroundColor: \"green\",\r\n+              color: \"white\",\r\n+              paddingVertical: 4,\r\n+              paddingHorizontal: 8,\r\n+              borderRadius: 4,\r\n+              overflow: \"hidden\",\r\n+              fontSize: 12,\r\n+            }}\r\n+          >\r\n+            Actif\r\n+          </Text>\r\n+        );\r\n+      case \"option\":\r\n+        return (\r\n+          <Text\r\n+            style={{\r\n+              backgroundColor: \"orange\",\r\n+              color: \"white\",\r\n+              paddingVertical: 4,\r\n+              paddingHorizontal: 8,\r\n+              borderRadius: 4,\r\n+              overflow: \"hidden\",\r\n+              fontSize: 12,\r\n+            }}\r\n+          >\r\n+            En option\r\n+          </Text>\r\n+        );\r\n+      case \"pending\":\r\n+        return (\r\n+          <Text\r\n+            style={{\r\n+              backgroundColor: \"blue\",\r\n+              color: \"white\",\r\n+              paddingVertical: 4,\r\n+              paddingHorizontal: 8,\r\n+              borderRadius: 4,\r\n+              overflow: \"hidden\",\r\n+              fontSize: 12,\r\n+            }}\r\n+          >\r\n+            En attente\r\n+          </Text>\r\n+        );\r\n+      default:\r\n+        return (\r\n+          <Text\r\n+            style={{\r\n+              backgroundColor: \"gray\",\r\n+              color: \"white\",\r\n+              paddingVertical: 4,\r\n+              paddingHorizontal: 8,\r\n+              borderRadius: 4,\r\n+              overflow: \"hidden\",\r\n+              fontSize: 12,\r\n+            }}\r\n+          >\r\n+            {status}\r\n+          </Text>\r\n+        );\r\n+    }\r\n+  };\r\n+\r\n+  if (loading || userDataLoading) {\r\n+    return (\r\n+      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n+        <ActivityIndicator size=\"large\" color=\"#00bcd4\" />\r\n+      </View>\r\n+    );\r\n+  }\r\n+\r\n+  if (error) {\r\n+    return (\r\n+      <View className=\"flex flex-col items-center justify-center h-screen\">\r\n+        <Text className=\"text-red-500 text-xl mb-4\">\r\n+          Une erreur est survenue lors du chargement de vos données\r\n+        </Text>\r\n+        <Button\r\n+          onPress={() =>\r\n+            navigation.navigate(\"Login\", { redirect: \"Dashboard\" })\r\n+          }\r\n+        >\r\n+          Retourner à l'accueil\r\n+        </Button>\r\n+      </View>\r\n+    );\r\n+  }\r\n+\r\n+  if (isEditingProfile) {\r\n+    return (\r\n+      <View className=\"flex flex-col min-h-screen\">\r\n+        <Navbar />\r\n+        <main className=\"flex-1 container mx-auto px-4 py-8\">\r\n+          <ProfileEditForm\r\n+            profile={profile}\r\n+            onUpdate={updateProfile}\r\n+            onCancel={() => setIsEditingProfile(false)}\r\n+          />\r\n+        </main>\r\n+        <Footer />\r\n+      </View>\r\n+    );\r\n+  }\r\n+\r\n+  return (\r\n+    <ScrollView contentContainerStyle={styles.container}>\r\n+      <Text style={styles.title}>Tableau de bord</Text>\r\n+      <Text style={styles.subtitle}>\r\n+        Bienvenue sur votre espace personnel Lys&Co,{\" \"}\r\n+        {profile?.first_name || profile?.email}\r\n+      </Text>\r\n+\r\n+      {/* Mon Profil */}\r\n+      <View style={styles.card}>\r\n+        <Text style={styles.cardTitle}>Mon Profil</Text>\r\n+        <View style={styles.row}>\r\n+          <View style={styles.column}>\r\n+            <Text style={styles.label}>Nom</Text>\r\n+            <Text style={styles.value}>\r\n+              {profile?.first_name} {profile?.last_name}\r\n+            </Text>\r\n+            <Text style={styles.label}>Email</Text>\r\n+            <Text style={styles.value}>{profile?.email}</Text>\r\n+          </View>\r\n+          <View style={styles.column}>\r\n+            <Text style={styles.label}>Entreprise</Text>\r\n+            <Text style={styles.value}>\r\n+              {profile?.company_name || \"Non renseigné\"}\r\n+            </Text>\r\n+            <Text style={styles.label}>Téléphone</Text>\r\n+            <Text style={styles.value}>\r\n+              {profile?.phone || \"Non renseigné\"}\r\n+            </Text>\r\n+          </View>\r\n+        </View>\r\n+        <TouchableOpacity\r\n+          style={styles.buttonOutline}\r\n+          onPress={() => setIsEditingProfile(true)}\r\n+        >\r\n+          <Text style={styles.buttonOutlineText}>Modifier mon profil</Text>\r\n+        </TouchableOpacity>\r\n+\r\n+        <Text style={styles.dangerTitle}>Suppression de compte</Text>\r\n+        <Text style={styles.smallText}>\r\n+          Cette action est irréversible. Toutes vos données seront supprimées.\r\n+        </Text>\r\n+        <TouchableOpacity\r\n+          style={styles.buttonDanger}\r\n+          onPress={handleDeleteAccount}\r\n+        >\r\n+          <Text style={styles.buttonText}>\r\n+            Supprimer définitivement mon compte\r\n+          </Text>\r\n+        </TouchableOpacity>\r\n+      </View>\r\n+\r\n+      {/* Documents */}\r\n+      <View style={styles.card}>\r\n+        <Text style={styles.cardTitle}>Mes documents</Text>\r\n+        {loadingDocuments ? (\r\n+          <ActivityIndicator />\r\n+        ) : documents.length === 0 ? (\r\n+          <Text>Aucun document disponible.</Text>\r\n+        ) : (\r\n+          documents.map((doc) => (\r\n+            <View key={doc.id} style={styles.item}>\r\n+              <Text>{doc.file_name}</Text>\r\n+              <Text>{new Date(doc.uploaded_at).toLocaleDateString()}</Text>\r\n+              <TouchableOpacity onPress={() => Linking.openURL(doc.file_url)}>\r\n+                <Text style={styles.link}>Télécharger</Text>\r\n+              </TouchableOpacity>\r\n+            </View>\r\n+          ))\r\n+        )}\r\n+      </View>\r\n+\r\n+      {/* Réservations */}\r\n+      <View style={styles.card}>\r\n+        <Text style={styles.cardTitle}>Mes réservations de salles</Text>\r\n+        {loadingReservations ? (\r\n+          <ActivityIndicator />\r\n+        ) : reservations.length === 0 ? (\r\n+          <Text>Aucune réservation trouvée.</Text>\r\n+        ) : (\r\n+          reservations.map((res) => (\r\n+            <View key={res.id} style={styles.item}>\r\n+              <Text>Date: {formatDate(res.reservation_date)}</Text>\r\n+              <Text>\r\n+                Heure:{\" \"}\r\n+                {res.start_time\r\n+                  ? `${res.start_time} - ${res.end_time}`\r\n+                  : \"Journée/Demi-journée\"}\r\n+              </Text>\r\n+              <Text>Type: {humanizeReservationType(res.reservation_type)}</Text>\r\n+              <Text>Statut: {getStatusBadge(res.status)}</Text>\r\n+              {res.status !== \"cancelled\" &&\r\n+                canCancel(res.reservation_date, res.start_time) && (\r\n+                  <TouchableOpacity\r\n+                    style={styles.buttonDanger}\r\n+                    onPress={() =>\r\n+                      handleCancelReservation(\r\n+                        res.id,\r\n+                        res.payment_intent_id,\r\n+                        profile?.email,\r\n+                        res.reservation_date,\r\n+                        res.reservation_type\r\n+                      )\r\n+                    }\r\n+                  >\r\n+                    <Text style={styles.buttonText}>Annuler</Text>\r\n+                  </TouchableOpacity>\r\n+                )}\r\n+            </View>\r\n+          ))\r\n+        )}\r\n+      </View>\r\n+\r\n+      {/* Abonnements Stripe */}\r\n+      {stripeSubscriptions.length > 0 && (\r\n+        <View style={styles.card}>\r\n+          <Text style={styles.cardTitle}>Mes abonnements</Text>\r\n+          {stripeSubscriptions.map((sub) => (\r\n+            <View key={sub.id} style={styles.item}>\r\n+              <Text>Statut: {getStatusBadge(sub.status)}</Text>\r\n+              <Text>Début: {formatDate(sub.start_date * 1000)}</Text>\r\n+              {sub.cancel_at && (\r\n+                <Text>Fin prévue: {formatDate(sub.cancel_at * 1000)}</Text>\r\n+              )}\r\n+              {sub.items?.data?.map((item: any) => (\r\n+                <Text key={item.id}>\r\n+                  Produit: {item.product_name || \"Nom inconnu\"}\r\n+                </Text>\r\n+              ))}\r\n+            </View>\r\n+          ))}\r\n+          <TouchableOpacity\r\n+            style={styles.buttonPrimary}\r\n+            onPress={handleOpenStripePortal}\r\n+          >\r\n+            <Text style={styles.buttonText}>Gérer mes abonnements</Text>\r\n+          </TouchableOpacity>\r\n+        </View>\r\n+      )}\r\n+\r\n+      {/* Factures Stripe */}\r\n+      {stripeInvoices.length > 0 && (\r\n+        <View style={styles.card}>\r\n+          <Text style={styles.cardTitle}>Mes factures d'abonnement</Text>\r\n+          {stripeInvoices.map((invoice) => (\r\n+            <View key={invoice.id} style={styles.item}>\r\n+              <Text>\r\n+                Montant payé: {(invoice.amount_paid / 100).toFixed(2)} €\r\n+              </Text>\r\n+              <Text>Date: {formatDate(invoice.created * 1000)}</Text>\r\n+              {invoice.lines?.data?.map((line: any) => (\r\n+                <Text key={line.id}>\r\n+                  Produit: {line.product_name || \"Nom inconnu\"}\r\n+                </Text>\r\n+              ))}\r\n+              <TouchableOpacity\r\n+                onPress={() => Linking.openURL(invoice.invoice_pdf)}\r\n+              >\r\n+                <Text style={styles.link}>Télécharger la facture</Text>\r\n+              </TouchableOpacity>\r\n+            </View>\r\n+          ))}\r\n+        </View>\r\n+      )}\r\n+    </ScrollView>\r\n+  );\r\n+};\r\n+\r\n+const styles = StyleSheet.create({\r\n+  container: { padding: 16 },\r\n+  title: { fontSize: 24, fontWeight: \"bold\", marginBottom: 12 },\r\n+  subtitle: { fontSize: 16, marginBottom: 20 },\r\n+  card: {\r\n+    backgroundColor: \"#fff\",\r\n+    borderRadius: 8,\r\n+    padding: 16,\r\n+    marginBottom: 16,\r\n+    elevation: 2,\r\n+  },\r\n+  cardTitle: { fontSize: 18, fontWeight: \"bold\", marginBottom: 12 },\r\n+  row: { flexDirection: \"row\", justifyContent: \"space-between\" },\r\n+  column: { flex: 1 },\r\n+  label: { fontSize: 14, color: \"#666\" },\r\n+  value: { fontSize: 16, fontWeight: \"500\", marginBottom: 8 },\r\n+  buttonPrimary: {\r\n+    backgroundColor: \"#4f46e5\",\r\n+    padding: 10,\r\n+    borderRadius: 6,\r\n+    marginTop: 8,\r\n+  },\r\n+  buttonOutline: {\r\n+    borderColor: \"#4f46e5\",\r\n+    borderWidth: 1,\r\n+    padding: 10,\r\n+    borderRadius: 6,\r\n+    marginTop: 8,\r\n+  },\r\n+  buttonDanger: {\r\n+    backgroundColor: \"#dc2626\",\r\n+    padding: 10,\r\n+    borderRadius: 6,\r\n+    marginTop: 8,\r\n+  },\r\n+  buttonText: { color: \"#fff\", textAlign: \"center\", fontWeight: \"bold\" },\r\n+  buttonOutlineText: {\r\n+    color: \"#4f46e5\",\r\n+    textAlign: \"center\",\r\n+    fontWeight: \"bold\",\r\n+  },\r\n+  item: { marginBottom: 12 },\r\n+  link: { color: \"#2563eb\", textDecorationLine: \"underline\" },\r\n+  dangerTitle: { color: \"#dc2626\", fontWeight: \"bold\", marginTop: 12 },\r\n+  smallText: { fontSize: 12, color: \"#666\", marginBottom: 8 },\r\n+});\r\n+\r\n+export default Dashboard;\r\n"
                }
            ],
            "date": 1752739708622,
            "name": "Commit-0",
            "content": "// Dashboard.tsx\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport Footer from \"@/src/components/Footer\";\r\nimport Navbar from \"@/src/components/Navbar\";\r\nimport type { RootStackParamList } from \"@/src/navigation/types\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ActivityIndicator, Alert, View } from \"react-native\";\r\n\r\ntype NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n\r\nconst Dashboard = () => {\r\n  const navigation = useNavigation<NavigationProp>();\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAdmin, setIsAdmin] = useState<boolean | null>(null);\r\n  const [profile, setProfile] = useState<any>(null);\r\n  const [documents, setDocuments] = useState<any[]>([]);\r\n  const [reservations, setReservations] = useState<any[]>([]);\r\n\r\n  // Charger le profil utilisateur\r\n  useEffect(() => {\r\n    const fetchProfile = async () => {\r\n      const {\r\n        data: { user },\r\n      } = await supabase.auth.getUser();\r\n\r\n      if (!user) {\r\n        setIsAdmin(false);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const { data, error } = await supabase\r\n        .from(\"profiles\")\r\n        .select(\"*\")\r\n        .eq(\"id\", user.id)\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error(\"Erreur récupération profil:\", error.message);\r\n      } else {\r\n        setProfile(data);\r\n        setIsAdmin(data?.is_admin ?? false);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchProfile();\r\n  }, []);\r\n\r\n  // Charger les documents\r\n  useEffect(() => {\r\n    const fetchDocuments = async () => {\r\n      if (!profile?.id || isAdmin) return;\r\n      const { data, error } = await supabase\r\n        .from(\"user_documents\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", profile.id)\r\n        .order(\"uploaded_at\", { ascending: false });\r\n\r\n      if (error) {\r\n        console.error(\"Erreur chargement documents:\", error);\r\n      } else {\r\n        setDocuments(data || []);\r\n      }\r\n    };\r\n\r\n    fetchDocuments();\r\n  }, [profile, isAdmin]);\r\n\r\n  // Charger les réservations\r\n  useEffect(() => {\r\n    const fetchReservations = async () => {\r\n      if (!profile?.id) return;\r\n      const { data, error } = await supabase\r\n        .from(\"reservations\")\r\n        .select(\"*\")\r\n        .eq(\"user_id\", profile.id)\r\n        .order(\"reservation_date\", { ascending: false });\r\n\r\n      if (error) {\r\n        console.error(\"Erreur chargement reservations:\", error);\r\n      } else {\r\n        setReservations(data || []);\r\n      }\r\n    };\r\n\r\n    fetchReservations();\r\n  }, [profile]);\r\n\r\n  // Supprimer le compte\r\n  const handleDeleteAccount = async () => {\r\n    Alert.alert(\r\n      \"Confirmation\",\r\n      \"Voulez-vous vraiment désactiver votre compte ?\",\r\n      [\r\n        {\r\n          text: \"Annuler\",\r\n          style: \"cancel\",\r\n        },\r\n        {\r\n          text: \"Confirmer\",\r\n          onPress: async () => {\r\n            if (!profile?.id || !profile?.email) return;\r\n\r\n            try {\r\n              const res = await fetch(\r\n                \"https://mon-backend-node.vercel.app/api/disable-account\",\r\n                {\r\n                  method: \"POST\",\r\n                  headers: { \"Content-Type\": \"application/json\" },\r\n                  body: JSON.stringify({\r\n                    id: profile.id,\r\n                    email: profile.email,\r\n                    first_name: profile.first_name,\r\n                    last_name: profile.last_name,\r\n                    frontendUrl: process.env.EXPO_PUBLIC_APP_URL,\r\n                  }),\r\n                }\r\n              );\r\n\r\n              if (!res.ok) {\r\n                Alert.alert(\"Erreur\", \"Problème lors de la désactivation.\");\r\n                return;\r\n              }\r\n\r\n              Alert.alert(\"Succès\", \"Votre compte a été désactivé.\");\r\n              await supabase.auth.signOut();\r\n              navigation.navigate(\"Login\");\r\n            } catch (err) {\r\n              console.error(err);\r\n              Alert.alert(\"Erreur\", \"Impossible de contacter le serveur.\");\r\n            }\r\n          },\r\n        },\r\n      ]\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\r\n        <ActivityIndicator size=\"large\" color=\"#00bcd4\" />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  const canCancel = (reservationDate: string, startTime: string) => {\r\n    const dateTime = new Date(`${reservationDate}T${startTime || \"09:00:00\"}`);\r\n    const now = new Date();\r\n    const diff = dateTime.getTime() - now.getTime();\r\n    return diff > 48 * 60 * 60 * 1000; // 48h en ms\r\n  };\r\n\r\n  const handleCancelReservation = async (\r\n    id: string,\r\n    paymentIntentId?: string,\r\n    userEmail?: string,\r\n    reservationDate?: string,\r\n    reservationType?: string\r\n  ) => {\r\n    if (!window.confirm(\"Confirmer l'annulation de cette réservation ?\")) {\r\n      return;\r\n    }\r\n\r\n    // Partie remboursement Stripe + envoi mails\r\n    if (paymentIntentId && userEmail) {\r\n      try {\r\n        const res = await fetch(\r\n          \"https://mon-backend-node.vercel.app/api/refund-stripe-payment\",\r\n          {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n              paymentIntentId,\r\n              userEmail,\r\n              reservationDate,\r\n              reservationType,\r\n            }),\r\n          }\r\n        );\r\n        const data = await res.json();\r\n        if (!res.ok || !data.success) {\r\n          toast({\r\n            title: \"Erreur\",\r\n            description: \"Le remboursement ou l'envoi de mails a échoué.\",\r\n            variant: \"destructive\",\r\n          });\r\n          return;\r\n        }\r\n      } catch (err) {\r\n        toast({\r\n          title: \"Erreur\",\r\n          description: \"Erreur lors du remboursement ou de l'envoi de mails.\",\r\n          variant: \"destructive\",\r\n        });\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Suppression en base de données\r\n    const { error } = await supabase.from(\"reservations\").delete().eq(\"id\", id);\r\n    if (error) {\r\n      toast({\r\n        title: \"Erreur\",\r\n        description: \"Impossible de supprimer la réservation en base.\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setReservations((prev) => prev.filter((r) => r.id !== id));\r\n    toast({ title: \"Réservation annulée et remboursée\" });\r\n  };\r\n\r\n  // Vérifier la session utilisateur et rediriger si nécessaire\r\n  useEffect(() => {\r\n    const checkUser = async () => {\r\n      try {\r\n        const {\r\n          data: { session },\r\n        } = await supabase.auth.getSession();\r\n\r\n        if (!session) {\r\n          toast({\r\n            title: \"Accès non autorisé\",\r\n            description:\r\n              \"Veuillez vous connecter pour accéder à votre tableau de bord\",\r\n            variant: \"destructive\",\r\n          });\r\n          navigate(\"/login\");\r\n          return;\r\n        }\r\n      } catch (error) {\r\n        navigate(\"/login\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkUser();\r\n\r\n    const { data: authListener } = supabase.auth.onAuthStateChange((event) => {\r\n      if (event === \"SIGNED_OUT\") {\r\n        navigate(\"/login\");\r\n      }\r\n    });\r\n    return () => {\r\n      authListener.subscription.unsubscribe();\r\n    };\r\n  }, [navigate]);\r\n\r\n  // Récupérer les abonnements et factures Stripe\r\n  useEffect(() => {\r\n    if (!profile?.id) return;\r\n    const fetchStripeData = async () => {\r\n      const { data: profileData, error: profileError } = await supabase\r\n        .from(\"profiles\")\r\n        .select(\"stripe_customer_id\")\r\n        .eq(\"id\", profile.id)\r\n        .maybeSingle();\r\n\r\n      if (profileError) {\r\n        console.error(\r\n          \"❌ Erreur Supabase lors de la récupération du profil :\",\r\n          profileError\r\n        );\r\n        return;\r\n      }\r\n\r\n      if (!profileData?.stripe_customer_id) {\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const res = await fetch(\r\n          \"https://mon-backend-node.vercel.app/api/get-stripe-data\",\r\n          {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n              stripeCustomerId: profileData.stripe_customer_id,\r\n            }),\r\n          }\r\n        );\r\n        const stripeData = await res.json();\r\n        setStripeSubscriptions(stripeData.subscriptions || []);\r\n        setStripeInvoices(stripeData.invoices || []);\r\n      } catch (error) {\r\n        console.error(\"❌ Erreur lors de l'appel à Stripe :\", error);\r\n      }\r\n    };\r\n\r\n    fetchStripeData();\r\n  }, [profile]);\r\n\r\n  const handleOpenStripePortal = async () => {\r\n    if (!profile?.id) return;\r\n\r\n    const { data: profileData, error: profileError } = await supabase\r\n      .from(\"profiles\")\r\n      .select(\"stripe_customer_id\")\r\n      .eq(\"id\", profile.id)\r\n      .maybeSingle();\r\n\r\n    if (profileError) {\r\n      console.error(\"Erreur lors de la récupération du profil :\", profileError);\r\n      return;\r\n    }\r\n    if (!profileData?.stripe_customer_id) return;\r\n\r\n    try {\r\n      const res = await fetch(\r\n        \"https://mon-backend-node.vercel.app/api/create-stripe-portal-session\",\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            stripeCustomerId: profileData.stripe_customer_id,\r\n          }),\r\n        }\r\n      );\r\n      const data = await res.json();\r\n      if (!data.url) {\r\n        toast({\r\n          title: \"Erreur\",\r\n          description: \"Impossible d'obtenir l'URL du portail Stripe.\",\r\n          variant: \"destructive\",\r\n        });\r\n        return;\r\n      }\r\n      window.location.href = data.url;\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Erreur\",\r\n        description: \"Une erreur est survenue avec le portail client.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateInput: string | number): string => {\r\n    try {\r\n      const date = new Date(dateInput);\r\n      return format(date, \"dd/MM/yyyy\", { locale: fr });\r\n    } catch {\r\n      return String(dateInput);\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    switch (status) {\r\n      case \"active\":\r\n        return <Badge className=\"bg-green-500\">Actif</Badge>;\r\n      case \"option\":\r\n        return <Badge className=\"bg-amber-500\">En option</Badge>;\r\n      case \"pending\":\r\n        return <Badge className=\"bg-blue-500\">En attente</Badge>;\r\n      default:\r\n        return <Badge className=\"bg-gray-500\">{status}</Badge>;\r\n    }\r\n  };\r\n\r\n  if (loading || userDataLoading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center h-screen\">\r\n        <div className=\"animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-lysco-turquoise\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex flex-col items-center justify-center h-screen\">\r\n        <p className=\"text-red-500 text-xl mb-4\">\r\n          Une erreur est survenue lors du chargement de vos données\r\n        </p>\r\n        <Button onClick={() => navigate(\"/login\")}>\r\n          Retourner à l'accueil\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isEditingProfile) {\r\n    return (\r\n      <div className=\"flex flex-col min-h-screen\">\r\n        <Navbar />\r\n        <main className=\"flex-1 container mx-auto px-4 py-8\">\r\n          <ProfileEditForm\r\n            profile={profile}\r\n            onUpdate={updateProfile}\r\n            onCancel={() => setIsEditingProfile(false)}\r\n          />\r\n        </main>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col min-h-screen\">\r\n      <Navbar />\r\n      <main className=\"flex-1 container mx-auto px-4 py-8\">\r\n        <div className=\"mb-8\">\r\n          <h1 className=\"text-3xl font-bold\">Tableau de bord</h1>\r\n          <p className=\"text-gray-600\">\r\n            Bienvenue sur votre espace personnel Lys&Co,{\" \"}\r\n            {profile?.first_name || profile?.email}\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 gap-8\">\r\n          {/* Profil utilisateur */}\r\n          <Card>\r\n            <CardHeader className=\"flex flex-row items-center justify-between\">\r\n              <CardTitle className=\"text-xl flex items-center\">\r\n                <User className=\"mr-2 h-5 w-5 text-lysco-turquoise\" />\r\n                Mon Profil\r\n              </CardTitle>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => setIsEditingProfile(true)}\r\n              >\r\n                Modifier mon profil\r\n              </Button>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"flex flex-col md:flex-row gap-6\">\r\n                <div className=\"flex-1 space-y-3\">\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-600\">Nom</p>\r\n                    <p className=\"font-medium\">\r\n                      {profile?.first_name} {profile?.last_name}\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-600\">Email</p>\r\n                    <p className=\"font-medium\">{profile?.email}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex-1 space-y-3\">\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-600\">Entreprise</p>\r\n                    <p className=\"font-medium\">\r\n                      {profile?.company_name || \"Non renseigné\"}\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-sm text-gray-600\">Téléphone</p>\r\n                    <p className=\"font-medium\">\r\n                      {profile?.phone || \"Non renseigné\"}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n            <CardContent className=\"border-t pt-4\">\r\n              <div className=\"mt-6\">\r\n                <h3 className=\"text-red-600 font-semibold mb-2\">\r\n                  Suppression de compte\r\n                </h3>\r\n                <p className=\"text-sm text-gray-500 mb-2\">\r\n                  Cette action est irréversible. Toutes vos données seront\r\n                  supprimées.\r\n                </p>\r\n                <Button variant=\"destructive\" onClick={handleDeleteAccount}>\r\n                  Supprimer définitivement mon compte\r\n                </Button>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {isAdmin ? (\r\n            <AdminDashboard />\r\n          ) : (\r\n            <>\r\n              {/* Mes documents */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"text-2xl font-semibold flex items-center gap-2\">\r\n                    <FileText className=\"w-5 h-5 text-lysco-turquoise\" />\r\n                    Mes documents\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  {loadingDocuments ? (\r\n                    <p>Chargement des documents…</p>\r\n                  ) : documents.length === 0 ? (\r\n                    <p>Aucun document disponible.</p>\r\n                  ) : (\r\n                    <ul className=\"space-y-4\">\r\n                      {documents.map((doc) => (\r\n                        <li\r\n                          key={doc.id}\r\n                          className=\"bg-gray-50 border border-gray-200 rounded-lg p-4 flex flex-col sm:flex-row\r\n                                     justify-between items-start sm:items-center shadow-sm\"\r\n                        >\r\n                          <div className=\"flex-1\">\r\n                            <p className=\"text-gray-800 font-medium\">\r\n                              {doc.file_name}\r\n                            </p>\r\n                            <p className=\"text-sm text-gray-500 mt-1\">\r\n                              {new Date(doc.uploaded_at).toLocaleDateString(\r\n                                \"fr-FR\",\r\n                                {\r\n                                  day: \"2-digit\",\r\n                                  month: \"long\",\r\n                                  year: \"numeric\",\r\n                                  hour: \"2-digit\",\r\n                                  minute: \"2-digit\",\r\n                                }\r\n                              )}\r\n                            </p>\r\n                            <a\r\n                              href={doc.file_url}\r\n                              target=\"_blank\"\r\n                              rel=\"noopener noreferrer\"\r\n                              className=\"inline-block mt-2 text-sm text-blue-600 hover:underline\"\r\n                            >\r\n                              Télécharger\r\n                            </a>\r\n                          </div>\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Mes réservations */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"text-2xl font-semibold flex items-center gap-2\">\r\n                    <Calendar className=\"w-5 h-5 text-lysco-turquoise\" />\r\n                    Mes réservations de salles\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  {loadingReservations ? (\r\n                    <div>Chargement…</div>\r\n                  ) : reservations.length === 0 ? (\r\n                    <div>Aucune réservation trouvée.</div>\r\n                  ) : (\r\n                    <div className=\"grid md:grid-cols-2 gap-4\">\r\n                      {reservations.map((res) => (\r\n                        <div\r\n                          key={res.id}\r\n                          className=\"border rounded-xl p-4 shadow-sm bg-white\"\r\n                        >\r\n                          <p className=\"mb-1\">\r\n                            Date : {formatDate(res.reservation_date)}\r\n                          </p>\r\n                          <p className=\"mb-1\">\r\n                            Heure :{\" \"}\r\n                            {res.start_time\r\n                              ? `${res.start_time} - ${res.end_time}`\r\n                              : \"Journée/Demi-journée\"}\r\n                          </p>\r\n                          <p className=\"mb-1\">\r\n                            Type :{\" \"}\r\n                            {humanizeReservationType(res.reservation_type)}\r\n                          </p>\r\n                          <div className=\"mb-1 flex items-center gap-2\">\r\n                            <span>Statut :</span>\r\n                            {getStatusBadge(res.status)}\r\n                          </div>\r\n                          <div className=\"flex flex-col gap-2 w-max\">\r\n                            {res.status !== \"cancelled\" &&\r\n                              canCancel(\r\n                                res.reservation_date,\r\n                                res.start_time\r\n                              ) && (\r\n                                <Button\r\n                                  variant=\"destructive\"\r\n                                  size=\"sm\"\r\n                                  onClick={() =>\r\n                                    handleCancelReservation(\r\n                                      res.id,\r\n                                      res.payment_intent_id,\r\n                                      profile?.email,\r\n                                      res.reservation_date,\r\n                                      res.reservation_type\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  Annuler\r\n                                </Button>\r\n                              )}\r\n                            {res.status !== \"cancelled\" &&\r\n                              !canCancel(\r\n                                res.reservation_date,\r\n                                res.start_time\r\n                              ) && (\r\n                                <span className=\"text-xs text-gray-500\">\r\n                                  Annulation impossible (moins de 48h)\r\n                                </span>\r\n                              )}\r\n                            <Button\r\n                              onClick={async () => {\r\n                                setCalendarError(null);\r\n                                try {\r\n                                  console.log(\r\n                                    \"=== 🕵️ Début bouton calendrier ===\"\r\n                                  );\r\n\r\n                                  const rawPeriod = res.period;\r\n                                  console.log(\"rawPeriod:\", rawPeriod);\r\n\r\n                                  const [startStr, endStr] = rawPeriod\r\n                                    .replace(/^\\[|\\)$|\\\"/g, \"\")\r\n                                    .split(\",\");\r\n                                  console.log(\"startStr brut:\", startStr);\r\n                                  console.log(\"endStr brut:\", endStr);\r\n\r\n                                  const safeStartStr = startStr\r\n                                    .trim()\r\n                                    .replace(\" \", \"T\")\r\n                                    .replace(\"+00\", \"Z\");\r\n                                  const safeEndStr = endStr\r\n                                    .trim()\r\n                                    .replace(\" \", \"T\")\r\n                                    .replace(\"+00\", \"Z\");\r\n\r\n                                  const startDate = new Date(safeStartStr);\r\n                                  const endDate = new Date(safeEndStr);\r\n\r\n                                  if (\r\n                                    isNaN(startDate.getTime()) ||\r\n                                    isNaN(endDate.getTime())\r\n                                  ) {\r\n                                    throw new Error(\r\n                                      \"La date de réservation est invalide\"\r\n                                    );\r\n                                  }\r\n                                  if (startDate >= endDate) {\r\n                                    throw new Error(\r\n                                      \"La date de fin doit être postérieure au début\"\r\n                                    );\r\n                                  }\r\n\r\n                                  console.log(\"✅ Dates sans décalage :\");\r\n                                  console.log(\r\n                                    \"Start UTC:\",\r\n                                    startDate.toISOString()\r\n                                  );\r\n                                  console.log(\r\n                                    \"End UTC:\",\r\n                                    endDate.toISOString()\r\n                                  );\r\n\r\n                                  await addToCalendar({\r\n                                    title: `Réservation ${humanizeReservationType(\r\n                                      res.reservation_type\r\n                                    )}`,\r\n                                    startDate, // directement les Date en UTC, sans modifier\r\n                                    endDate,\r\n                                    location: \"Lys&Co\",\r\n                                    notes: `Type: ${res.reservation_type}`,\r\n                                    alarm: true,\r\n                                  });\r\n\r\n                                  toast({\r\n                                    title: \"✅ Ajouté au calendrier\",\r\n                                    description:\r\n                                      \"La réservation a été enregistrée dans votre calendrier\",\r\n                                  });\r\n                                } catch (error) {\r\n                                  console.error(\"💥 ERREUR CATCH:\", error);\r\n                                  let errorMessage =\r\n                                    \"Une erreur inattendue est survenue\";\r\n                                  if (error instanceof Error) {\r\n                                    errorMessage = error.message;\r\n                                    if (\r\n                                      error.message.includes(\r\n                                        \"must be JavaScript Date Objects\"\r\n                                      )\r\n                                    ) {\r\n                                      errorMessage =\r\n                                        \"Format de date incompatible avec le calendrier\";\r\n                                    }\r\n                                  }\r\n                                  setCalendarError(errorMessage);\r\n                                  toast({\r\n                                    title: \"❌ Erreur d'ajout au calendrier\",\r\n                                    description: errorMessage,\r\n                                    variant: \"destructive\",\r\n                                  });\r\n                                }\r\n                              }}\r\n                              disabled={!res.reservation_date}\r\n                            >\r\n                              <Calendar className=\"h-4 w-4 mr-2\" />\r\n                              Ajouter au calendrier\r\n                            </Button>\r\n                          </div>\r\n                          {calendarError && (\r\n                            <div style={{ color: \"red\", marginTop: \"8px\" }}>\r\n                              {calendarError}\r\n                            </div>\r\n                          )}\r\n                          <div>\r\n                            Cordova détecté :{\" \"}\r\n                            {String(!!(window as any).cordova)}\r\n                          </div>\r\n                          <div>\r\n                            Plugin calendar :{\" \"}\r\n                            {String(!!(window as any).plugins?.calendar)}\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Abonnements Stripe */}\r\n              {stripeSubscriptions.length > 0 && (\r\n                <Card>\r\n                  <CardHeader>\r\n                    <CardTitle className=\"text-2xl font-semibold flex items-center gap-2\">\r\n                      <List className=\"w-5 h-5 text-lysco-turquoise\" />\r\n                      Mes abonnements\r\n                    </CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"grid md:grid-cols-2 gap-4\">\r\n                      {stripeSubscriptions.map((sub) => (\r\n                        <div\r\n                          key={sub.id}\r\n                          className=\"border rounded-xl p-4 shadow-sm bg-white\"\r\n                        >\r\n                          <div className=\"mb-1 flex items-center gap-2\">\r\n                            <span>Statut :</span>\r\n                            {getStatusBadge(sub.status)}\r\n                          </div>\r\n                          <p className=\"mb-1\">\r\n                            Début : {formatDate(sub.start_date * 1000)}\r\n                          </p>\r\n                          {sub.cancel_at && (\r\n                            <p className=\"mb-1\">\r\n                              Fin prévue : {formatDate(sub.cancel_at * 1000)}\r\n                            </p>\r\n                          )}\r\n                          {sub.items?.data?.length > 0 &&\r\n                            sub.items.data.map((item) => (\r\n                              <p key={item.id} className=\"mb-1\">\r\n                                Produit :{\" \"}\r\n                                <span className=\"font-medium\">\r\n                                  {item.product_name || \"Nom inconnu\"}\r\n                                </span>\r\n                              </p>\r\n                            ))}\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                    <Button className=\"mt-4\" onClick={handleOpenStripePortal}>\r\n                      Gérer mes abonnements\r\n                    </Button>\r\n                  </CardContent>\r\n                </Card>\r\n              )}\r\n\r\n              {/* Factures Stripe */}\r\n              {stripeInvoices.length > 0 && (\r\n                <Card>\r\n                  <CardHeader>\r\n                    <CardTitle className=\"text-2xl font-semibold flex items-center gap-2\">\r\n                      <ShoppingCart className=\"w-5 h-5 text-lysco-turquoise\" />\r\n                      Mes factures d'abonnement\r\n                    </CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"grid md:grid-cols-2 gap-4\">\r\n                      {stripeInvoices.map((invoice) => (\r\n                        <div\r\n                          key={invoice.id}\r\n                          className=\"border rounded-xl p-4 shadow-sm bg-white\"\r\n                        >\r\n                          <p className=\"mb-1\">\r\n                            Montant payé :{\" \"}\r\n                            <strong>\r\n                              {(invoice.amount_paid / 100).toFixed(2)} €\r\n                            </strong>\r\n                          </p>\r\n                          <p className=\"mb-1\">\r\n                            🗓 Date : {formatDate(invoice.created * 1000)}\r\n                          </p>\r\n                          {invoice.lines?.data?.length > 0 &&\r\n                            invoice.lines.data.map((line) => (\r\n                              <p key={line.id} className=\"mb-1\">\r\n                                🏷 Produit :{\" \"}\r\n                                <span className=\"font-medium\">\r\n                                  {line.product_name || \"Nom inconnu\"}\r\n                                </span>\r\n                              </p>\r\n                            ))}\r\n                          <a\r\n                            href={invoice.invoice_pdf}\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                            className=\"text-blue-600 underline\"\r\n                          >\r\n                            Télécharger la facture\r\n                          </a>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n      </main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"
        }
    ]
}