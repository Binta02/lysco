{
    "sourceFile": "src/screens/Login.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1752739085094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752739198571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { supabase } from \"@/integrations/supabase/client\";\r\n import Footer from \"@/src/components/Footer\";\r\n import Navbar from \"@/src/components/Navbar\";\r\n import type { RootStackParamList } from \"@/src/navigation/types\";\r\n+import type { RouteProp } from \"@react-navigation/native\";\r\n import { useNavigation, useRoute } from \"@react-navigation/native\";\r\n import type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\n import React, { useEffect, useState } from \"react\";\r\n import {\r\n@@ -14,9 +15,15 @@\n   View,\r\n } from \"react-native\";\r\n \r\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n+type LoginRouteProp = RouteProp<RootStackParamList, \"Login\">;\r\n \r\n+const navigation = useNavigation<NavigationProp>();\r\n+const route = useRoute<LoginRouteProp>();\r\n+\r\n+const redirectUrl = route.params?.redirect;\r\n+\r\n const Login = () => {\r\n   const navigation = useNavigation<NavigationProp>();\r\n   const route = useRoute();\r\n   const [email, setEmail] = useState(\"\");\r\n"
                },
                {
                    "date": 1752739220684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,8 @@\n \r\n const navigation = useNavigation<NavigationProp>();\r\n const route = useRoute<LoginRouteProp>();\r\n \r\n-const redirectUrl = route.params?.redirect;\r\n-\r\n const Login = () => {\r\n   const navigation = useNavigation<NavigationProp>();\r\n   const route = useRoute();\r\n   const [email, setEmail] = useState(\"\");\r\n@@ -31,9 +29,10 @@\n   const [showPassword, setShowPassword] = useState(false);\r\n   const [accountDisabledMessage, setAccountDisabledMessage] = useState(\"\");\r\n   const [isLoading, setIsLoading] = useState(false);\r\n \r\n-  const redirectUrl = route.params?.redirect as string | undefined;\r\n+  // const redirectUrl = route.params?.redirect as string | undefined;\r\n+  const redirectUrl = route.params?.redirect;\r\n \r\n   useEffect(() => {\r\n     const checkSession = async () => {\r\n       const {\r\n"
                },
                {
                    "date": 1752739297044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,8 @@\n   const [showPassword, setShowPassword] = useState(false);\r\n   const [accountDisabledMessage, setAccountDisabledMessage] = useState(\"\");\r\n   const [isLoading, setIsLoading] = useState(false);\r\n \r\n-  // const redirectUrl = route.params?.redirect as string | undefined;\r\n   const redirectUrl = route.params?.redirect;\r\n \r\n   useEffect(() => {\r\n     const checkSession = async () => {\r\n"
                },
                {
                    "date": 1752739396424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,14 +17,11 @@\n \r\n type NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n type LoginRouteProp = RouteProp<RootStackParamList, \"Login\">;\r\n \r\n-const navigation = useNavigation<NavigationProp>();\r\n-const route = useRoute<LoginRouteProp>();\r\n-\r\n const Login = () => {\r\n   const navigation = useNavigation<NavigationProp>();\r\n-  const route = useRoute();\r\n+  const route = useRoute<LoginRouteProp>();\r\n   const [email, setEmail] = useState(\"\");\r\n   const [password, setPassword] = useState(\"\");\r\n   const [showPassword, setShowPassword] = useState(false);\r\n   const [accountDisabledMessage, setAccountDisabledMessage] = useState(\"\");\r\n"
                },
                {
                    "date": 1752739464189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n       const {\r\n         data: { session },\r\n       } = await supabase.auth.getSession();\r\n       if (session) {\r\n-        navigation.navigate(redirectUrl || \"Dashboard\");\r\n+        navigation.navigate(\"Dashboard\");\r\n       }\r\n     };\r\n     checkSession();\r\n   }, [navigation, redirectUrl]);\r\n@@ -86,9 +86,9 @@\n         return;\r\n       }\r\n \r\n       Alert.alert(\"Connexion réussie\", \"Bienvenue sur Lys&Co !\");\r\n-      navigation.navigate(redirectUrl || \"Dashboard\");\r\n+      navigation.navigate(\"Dashboard\");\r\n     } catch (err) {\r\n       console.error(\"Login error:\", err);\r\n       Alert.alert(\"Erreur\", \"Une erreur inattendue est survenue.\");\r\n     } finally {\r\n"
                }
            ],
            "date": 1752739085094,
            "name": "Commit-0",
            "content": "import { supabase } from \"@/integrations/supabase/client\";\r\nimport Footer from \"@/src/components/Footer\";\r\nimport Navbar from \"@/src/components/Navbar\";\r\nimport type { RootStackParamList } from \"@/src/navigation/types\";\r\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\r\nimport type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Alert,\r\n  ScrollView,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\n\r\ntype NavigationProp = NativeStackNavigationProp<RootStackParamList>;\r\n\r\nconst Login = () => {\r\n  const navigation = useNavigation<NavigationProp>();\r\n  const route = useRoute();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [accountDisabledMessage, setAccountDisabledMessage] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const redirectUrl = route.params?.redirect as string | undefined;\r\n\r\n  useEffect(() => {\r\n    const checkSession = async () => {\r\n      const {\r\n        data: { session },\r\n      } = await supabase.auth.getSession();\r\n      if (session) {\r\n        navigation.navigate(redirectUrl || \"Dashboard\");\r\n      }\r\n    };\r\n    checkSession();\r\n  }, [navigation, redirectUrl]);\r\n\r\n  const handleLogin = async () => {\r\n    if (!email || !password) {\r\n      Alert.alert(\"Erreur\", \"Veuillez remplir tous les champs.\");\r\n      return;\r\n    }\r\n    setIsLoading(true);\r\n    setAccountDisabledMessage(\"\");\r\n\r\n    try {\r\n      const { data: signInData, error: signInError } =\r\n        await supabase.auth.signInWithPassword({\r\n          email,\r\n          password,\r\n        });\r\n\r\n      if (signInError) {\r\n        Alert.alert(\"Erreur de connexion\", signInError.message);\r\n        return;\r\n      }\r\n\r\n      const user = signInData?.user;\r\n      if (!user) {\r\n        Alert.alert(\"Erreur\", \"Utilisateur introuvable après connexion.\");\r\n        return;\r\n      }\r\n\r\n      const { data: profileData, error: profileError } = await supabase\r\n        .from(\"profiles\")\r\n        .select(\"deleted_at\")\r\n        .eq(\"id\", user.id)\r\n        .single();\r\n\r\n      if (profileError) {\r\n        Alert.alert(\"Erreur\", \"Impossible de vérifier l'état du compte.\");\r\n        return;\r\n      }\r\n\r\n      if (profileData?.deleted_at) {\r\n        setAccountDisabledMessage(\r\n          \"Votre compte a été désactivé. Contactez le support ou utilisez le lien de réactivation.\"\r\n        );\r\n        await supabase.auth.signOut();\r\n        return;\r\n      }\r\n\r\n      Alert.alert(\"Connexion réussie\", \"Bienvenue sur Lys&Co !\");\r\n      navigation.navigate(redirectUrl || \"Dashboard\");\r\n    } catch (err) {\r\n      console.error(\"Login error:\", err);\r\n      Alert.alert(\"Erreur\", \"Une erreur inattendue est survenue.\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleResetPassword = async () => {\r\n    if (!email) {\r\n      Alert.alert(\r\n        \"Email requis\",\r\n        \"Veuillez entrer votre email pour réinitialiser votre mot de passe.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\r\n        redirectTo: `${process.env.EXPO_PUBLIC_APP_URL}/reset-password`,\r\n      });\r\n\r\n      if (error) {\r\n        Alert.alert(\"Erreur\", error.message);\r\n        return;\r\n      }\r\n\r\n      Alert.alert(\r\n        \"Email envoyé\",\r\n        \"Veuillez vérifier votre boîte mail pour réinitialiser votre mot de passe.\"\r\n      );\r\n    } catch (err) {\r\n      console.error(\"Reset password error:\", err);\r\n      Alert.alert(\"Erreur\", \"Une erreur inattendue est survenue.\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1, backgroundColor: \"#f5f5f5\" }}>\r\n      <Navbar />\r\n\r\n      <ScrollView\r\n        contentContainerStyle={{\r\n          flexGrow: 1,\r\n          justifyContent: \"center\",\r\n          padding: 20,\r\n        }}\r\n      >\r\n        <View style={{ backgroundColor: \"#fff\", padding: 20, borderRadius: 8 }}>\r\n          <Text\r\n            style={{\r\n              fontSize: 24,\r\n              fontWeight: \"bold\",\r\n              textAlign: \"center\",\r\n              marginBottom: 10,\r\n            }}\r\n          >\r\n            Connexion\r\n          </Text>\r\n          <Text style={{ textAlign: \"center\", marginBottom: 20 }}>\r\n            Entrez vos identifiants pour accéder à votre compte\r\n          </Text>\r\n\r\n          {/* Email */}\r\n          <TextInput\r\n            style={{\r\n              borderWidth: 1,\r\n              padding: 10,\r\n              borderRadius: 6,\r\n              marginBottom: 10,\r\n            }}\r\n            placeholder=\"Email\"\r\n            keyboardType=\"email-address\"\r\n            value={email}\r\n            onChangeText={setEmail}\r\n          />\r\n\r\n          {/* Mot de passe */}\r\n          <TextInput\r\n            style={{\r\n              borderWidth: 1,\r\n              padding: 10,\r\n              borderRadius: 6,\r\n              marginBottom: 10,\r\n            }}\r\n            placeholder=\"Mot de passe\"\r\n            secureTextEntry={!showPassword}\r\n            value={password}\r\n            onChangeText={setPassword}\r\n          />\r\n\r\n          {/* Afficher/Masquer mot de passe */}\r\n          <TouchableOpacity\r\n            onPress={() => setShowPassword(!showPassword)}\r\n            style={{ alignSelf: \"flex-end\", marginBottom: 10 }}\r\n          >\r\n            <Text style={{ color: \"#007aff\" }}>\r\n              {showPassword\r\n                ? \"Masquer le mot de passe\"\r\n                : \"Afficher le mot de passe\"}\r\n            </Text>\r\n          </TouchableOpacity>\r\n\r\n          {/* Message compte désactivé */}\r\n          {accountDisabledMessage ? (\r\n            <Text\r\n              style={{\r\n                color: \"red\",\r\n                fontSize: 12,\r\n                marginBottom: 10,\r\n                textAlign: \"center\",\r\n              }}\r\n            >\r\n              {accountDisabledMessage}\r\n            </Text>\r\n          ) : null}\r\n\r\n          {/* Bouton login */}\r\n          <TouchableOpacity\r\n            onPress={handleLogin}\r\n            style={{\r\n              backgroundColor: \"#00bcd4\",\r\n              padding: 12,\r\n              borderRadius: 6,\r\n              alignItems: \"center\",\r\n              marginBottom: 10,\r\n            }}\r\n          >\r\n            <Text style={{ color: \"#fff\", fontWeight: \"bold\" }}>\r\n              {isLoading ? \"Connexion en cours...\" : \"Se connecter\"}\r\n            </Text>\r\n          </TouchableOpacity>\r\n\r\n          {/* Mot de passe oublié */}\r\n          <TouchableOpacity\r\n            onPress={handleResetPassword}\r\n            style={{ marginBottom: 20 }}\r\n          >\r\n            <Text style={{ color: \"#00bcd4\", textAlign: \"center\" }}>\r\n              Mot de passe oublié ?\r\n            </Text>\r\n          </TouchableOpacity>\r\n\r\n          {/* Pas encore de compte */}\r\n          <View style={{ alignItems: \"center\" }}>\r\n            <Text>\r\n              Pas encore de compte ?{\" \"}\r\n              <Text\r\n                style={{ color: \"#ec407a\", textDecorationLine: \"underline\" }}\r\n                onPress={() => navigation.navigate(\"Register\")}\r\n              >\r\n                Créer un compte\r\n              </Text>\r\n            </Text>\r\n          </View>\r\n        </View>\r\n      </ScrollView>\r\n\r\n      <Footer />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"
        }
    ]
}